
denem7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf3c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e4  0800c0e0  0800c0e0  0000d0e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c5c4  0800c5c4  0000e1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c5c4  0800c5c4  0000d5c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c5cc  0800c5cc  0000e1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c5cc  0800c5cc  0000d5cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c5d0  0800c5d0  0000d5d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800c5d4  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e1d4  2**0
                  CONTENTS
 10 .bss          000006e8  200001d4  200001d4  0000e1d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008bc  200008bc  0000e1d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000134ca  00000000  00000000  0000e204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d40  00000000  00000000  000216ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ed0  00000000  00000000  00024410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b6d  00000000  00000000  000252e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023914  00000000  00000000  00025e4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016604  00000000  00000000  00049761  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d57f8  00000000  00000000  0005fd65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013555d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004cb8  00000000  00000000  001355a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  0013a258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c0c4 	.word	0x0800c0c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	0800c0c4 	.word	0x0800c0c4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08a      	sub	sp, #40	@ 0x28
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000bbe:	f107 031c 	add.w	r3, r7, #28
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
 8000bd8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bda:	4b2e      	ldr	r3, [pc, #184]	@ (8000c94 <MX_ADC1_Init+0xdc>)
 8000bdc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000be0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000be2:	4b2c      	ldr	r3, [pc, #176]	@ (8000c94 <MX_ADC1_Init+0xdc>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000be8:	4b2a      	ldr	r3, [pc, #168]	@ (8000c94 <MX_ADC1_Init+0xdc>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bee:	4b29      	ldr	r3, [pc, #164]	@ (8000c94 <MX_ADC1_Init+0xdc>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bf4:	4b27      	ldr	r3, [pc, #156]	@ (8000c94 <MX_ADC1_Init+0xdc>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bfa:	4b26      	ldr	r3, [pc, #152]	@ (8000c94 <MX_ADC1_Init+0xdc>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c02:	4b24      	ldr	r3, [pc, #144]	@ (8000c94 <MX_ADC1_Init+0xdc>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c08:	4b22      	ldr	r3, [pc, #136]	@ (8000c94 <MX_ADC1_Init+0xdc>)
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c0e:	4b21      	ldr	r3, [pc, #132]	@ (8000c94 <MX_ADC1_Init+0xdc>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c14:	4b1f      	ldr	r3, [pc, #124]	@ (8000c94 <MX_ADC1_Init+0xdc>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c1a:	4b1e      	ldr	r3, [pc, #120]	@ (8000c94 <MX_ADC1_Init+0xdc>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c22:	4b1c      	ldr	r3, [pc, #112]	@ (8000c94 <MX_ADC1_Init+0xdc>)
 8000c24:	2204      	movs	r2, #4
 8000c26:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c28:	4b1a      	ldr	r3, [pc, #104]	@ (8000c94 <MX_ADC1_Init+0xdc>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000c2e:	4b19      	ldr	r3, [pc, #100]	@ (8000c94 <MX_ADC1_Init+0xdc>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c34:	4817      	ldr	r0, [pc, #92]	@ (8000c94 <MX_ADC1_Init+0xdc>)
 8000c36:	f001 faa5 	bl	8002184 <HAL_ADC_Init>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000c40:	f000 ff72 	bl	8001b28 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c48:	f107 031c 	add.w	r3, r7, #28
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4811      	ldr	r0, [pc, #68]	@ (8000c94 <MX_ADC1_Init+0xdc>)
 8000c50:	f002 f9d8 	bl	8003004 <HAL_ADCEx_MultiModeConfigChannel>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000c5a:	f000 ff65 	bl	8001b28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c62:	2301      	movs	r3, #1
 8000c64:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c66:	2300      	movs	r3, #0
 8000c68:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c76:	1d3b      	adds	r3, r7, #4
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4806      	ldr	r0, [pc, #24]	@ (8000c94 <MX_ADC1_Init+0xdc>)
 8000c7c:	f001 fed8 	bl	8002a30 <HAL_ADC_ConfigChannel>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000c86:	f000 ff4f 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c8a:	bf00      	nop
 8000c8c:	3728      	adds	r7, #40	@ 0x28
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	200001f0 	.word	0x200001f0

08000c98 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c9e:	463b      	mov	r3, r7
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]
 8000cac:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000cae:	4b27      	ldr	r3, [pc, #156]	@ (8000d4c <MX_ADC2_Init+0xb4>)
 8000cb0:	4a27      	ldr	r2, [pc, #156]	@ (8000d50 <MX_ADC2_Init+0xb8>)
 8000cb2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000cb4:	4b25      	ldr	r3, [pc, #148]	@ (8000d4c <MX_ADC2_Init+0xb4>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000cba:	4b24      	ldr	r3, [pc, #144]	@ (8000d4c <MX_ADC2_Init+0xb4>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cc0:	4b22      	ldr	r3, [pc, #136]	@ (8000d4c <MX_ADC2_Init+0xb4>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000cc6:	4b21      	ldr	r3, [pc, #132]	@ (8000d4c <MX_ADC2_Init+0xb4>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000ccc:	4b1f      	ldr	r3, [pc, #124]	@ (8000d4c <MX_ADC2_Init+0xb4>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cd4:	4b1d      	ldr	r3, [pc, #116]	@ (8000d4c <MX_ADC2_Init+0xb4>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cda:	4b1c      	ldr	r3, [pc, #112]	@ (8000d4c <MX_ADC2_Init+0xb4>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d4c <MX_ADC2_Init+0xb4>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000ce6:	4b19      	ldr	r3, [pc, #100]	@ (8000d4c <MX_ADC2_Init+0xb4>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000cec:	4b17      	ldr	r3, [pc, #92]	@ (8000d4c <MX_ADC2_Init+0xb4>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cf4:	4b15      	ldr	r3, [pc, #84]	@ (8000d4c <MX_ADC2_Init+0xb4>)
 8000cf6:	2204      	movs	r2, #4
 8000cf8:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000cfa:	4b14      	ldr	r3, [pc, #80]	@ (8000d4c <MX_ADC2_Init+0xb4>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d00:	4b12      	ldr	r3, [pc, #72]	@ (8000d4c <MX_ADC2_Init+0xb4>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d06:	4811      	ldr	r0, [pc, #68]	@ (8000d4c <MX_ADC2_Init+0xb4>)
 8000d08:	f001 fa3c 	bl	8002184 <HAL_ADC_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000d12:	f000 ff09 	bl	8001b28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000d16:	2309      	movs	r3, #9
 8000d18:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d22:	2300      	movs	r3, #0
 8000d24:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d26:	2300      	movs	r3, #0
 8000d28:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d2e:	463b      	mov	r3, r7
 8000d30:	4619      	mov	r1, r3
 8000d32:	4806      	ldr	r0, [pc, #24]	@ (8000d4c <MX_ADC2_Init+0xb4>)
 8000d34:	f001 fe7c 	bl	8002a30 <HAL_ADC_ConfigChannel>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000d3e:	f000 fef3 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000d42:	bf00      	nop
 8000d44:	3718      	adds	r7, #24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000240 	.word	0x20000240
 8000d50:	50000100 	.word	0x50000100

08000d54 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08c      	sub	sp, #48	@ 0x30
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 031c 	add.w	r3, r7, #28
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000d74:	d12e      	bne.n	8000dd4 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000d76:	4b32      	ldr	r3, [pc, #200]	@ (8000e40 <HAL_ADC_MspInit+0xec>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	4a30      	ldr	r2, [pc, #192]	@ (8000e40 <HAL_ADC_MspInit+0xec>)
 8000d7e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000d80:	4b2f      	ldr	r3, [pc, #188]	@ (8000e40 <HAL_ADC_MspInit+0xec>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d10b      	bne.n	8000da0 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000d88:	4b2e      	ldr	r3, [pc, #184]	@ (8000e44 <HAL_ADC_MspInit+0xf0>)
 8000d8a:	695b      	ldr	r3, [r3, #20]
 8000d8c:	4a2d      	ldr	r2, [pc, #180]	@ (8000e44 <HAL_ADC_MspInit+0xf0>)
 8000d8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d92:	6153      	str	r3, [r2, #20]
 8000d94:	4b2b      	ldr	r3, [pc, #172]	@ (8000e44 <HAL_ADC_MspInit+0xf0>)
 8000d96:	695b      	ldr	r3, [r3, #20]
 8000d98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d9c:	61bb      	str	r3, [r7, #24]
 8000d9e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da0:	4b28      	ldr	r3, [pc, #160]	@ (8000e44 <HAL_ADC_MspInit+0xf0>)
 8000da2:	695b      	ldr	r3, [r3, #20]
 8000da4:	4a27      	ldr	r2, [pc, #156]	@ (8000e44 <HAL_ADC_MspInit+0xf0>)
 8000da6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000daa:	6153      	str	r3, [r2, #20]
 8000dac:	4b25      	ldr	r3, [pc, #148]	@ (8000e44 <HAL_ADC_MspInit+0xf0>)
 8000dae:	695b      	ldr	r3, [r3, #20]
 8000db0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000db4:	617b      	str	r3, [r7, #20]
 8000db6:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000db8:	2301      	movs	r3, #1
 8000dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc4:	f107 031c 	add.w	r3, r7, #28
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dce:	f002 fc9d 	bl	800370c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000dd2:	e031      	b.n	8000e38 <HAL_ADC_MspInit+0xe4>
  else if(adcHandle->Instance==ADC2)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a1b      	ldr	r2, [pc, #108]	@ (8000e48 <HAL_ADC_MspInit+0xf4>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d12c      	bne.n	8000e38 <HAL_ADC_MspInit+0xe4>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000dde:	4b18      	ldr	r3, [pc, #96]	@ (8000e40 <HAL_ADC_MspInit+0xec>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	3301      	adds	r3, #1
 8000de4:	4a16      	ldr	r2, [pc, #88]	@ (8000e40 <HAL_ADC_MspInit+0xec>)
 8000de6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000de8:	4b15      	ldr	r3, [pc, #84]	@ (8000e40 <HAL_ADC_MspInit+0xec>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d10b      	bne.n	8000e08 <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000df0:	4b14      	ldr	r3, [pc, #80]	@ (8000e44 <HAL_ADC_MspInit+0xf0>)
 8000df2:	695b      	ldr	r3, [r3, #20]
 8000df4:	4a13      	ldr	r2, [pc, #76]	@ (8000e44 <HAL_ADC_MspInit+0xf0>)
 8000df6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dfa:	6153      	str	r3, [r2, #20]
 8000dfc:	4b11      	ldr	r3, [pc, #68]	@ (8000e44 <HAL_ADC_MspInit+0xf0>)
 8000dfe:	695b      	ldr	r3, [r3, #20]
 8000e00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e04:	613b      	str	r3, [r7, #16]
 8000e06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e08:	4b0e      	ldr	r3, [pc, #56]	@ (8000e44 <HAL_ADC_MspInit+0xf0>)
 8000e0a:	695b      	ldr	r3, [r3, #20]
 8000e0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e44 <HAL_ADC_MspInit+0xf0>)
 8000e0e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000e12:	6153      	str	r3, [r2, #20]
 8000e14:	4b0b      	ldr	r3, [pc, #44]	@ (8000e44 <HAL_ADC_MspInit+0xf0>)
 8000e16:	695b      	ldr	r3, [r3, #20]
 8000e18:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e20:	2308      	movs	r3, #8
 8000e22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e24:	2303      	movs	r3, #3
 8000e26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e2c:	f107 031c 	add.w	r3, r7, #28
 8000e30:	4619      	mov	r1, r3
 8000e32:	4806      	ldr	r0, [pc, #24]	@ (8000e4c <HAL_ADC_MspInit+0xf8>)
 8000e34:	f002 fc6a 	bl	800370c <HAL_GPIO_Init>
}
 8000e38:	bf00      	nop
 8000e3a:	3730      	adds	r7, #48	@ 0x30
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000290 	.word	0x20000290
 8000e44:	40021000 	.word	0x40021000
 8000e48:	50000100 	.word	0x50000100
 8000e4c:	48000800 	.word	0x48000800

08000e50 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08a      	sub	sp, #40	@ 0x28
 8000e54:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e56:	f107 0314 	add.w	r3, r7, #20
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	609a      	str	r2, [r3, #8]
 8000e62:	60da      	str	r2, [r3, #12]
 8000e64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e66:	4b61      	ldr	r3, [pc, #388]	@ (8000fec <MX_GPIO_Init+0x19c>)
 8000e68:	695b      	ldr	r3, [r3, #20]
 8000e6a:	4a60      	ldr	r2, [pc, #384]	@ (8000fec <MX_GPIO_Init+0x19c>)
 8000e6c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000e70:	6153      	str	r3, [r2, #20]
 8000e72:	4b5e      	ldr	r3, [pc, #376]	@ (8000fec <MX_GPIO_Init+0x19c>)
 8000e74:	695b      	ldr	r3, [r3, #20]
 8000e76:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e7e:	4b5b      	ldr	r3, [pc, #364]	@ (8000fec <MX_GPIO_Init+0x19c>)
 8000e80:	695b      	ldr	r3, [r3, #20]
 8000e82:	4a5a      	ldr	r2, [pc, #360]	@ (8000fec <MX_GPIO_Init+0x19c>)
 8000e84:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e88:	6153      	str	r3, [r2, #20]
 8000e8a:	4b58      	ldr	r3, [pc, #352]	@ (8000fec <MX_GPIO_Init+0x19c>)
 8000e8c:	695b      	ldr	r3, [r3, #20]
 8000e8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e96:	4b55      	ldr	r3, [pc, #340]	@ (8000fec <MX_GPIO_Init+0x19c>)
 8000e98:	695b      	ldr	r3, [r3, #20]
 8000e9a:	4a54      	ldr	r2, [pc, #336]	@ (8000fec <MX_GPIO_Init+0x19c>)
 8000e9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ea0:	6153      	str	r3, [r2, #20]
 8000ea2:	4b52      	ldr	r3, [pc, #328]	@ (8000fec <MX_GPIO_Init+0x19c>)
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eaa:	60bb      	str	r3, [r7, #8]
 8000eac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eae:	4b4f      	ldr	r3, [pc, #316]	@ (8000fec <MX_GPIO_Init+0x19c>)
 8000eb0:	695b      	ldr	r3, [r3, #20]
 8000eb2:	4a4e      	ldr	r2, [pc, #312]	@ (8000fec <MX_GPIO_Init+0x19c>)
 8000eb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000eb8:	6153      	str	r3, [r2, #20]
 8000eba:	4b4c      	ldr	r3, [pc, #304]	@ (8000fec <MX_GPIO_Init+0x19c>)
 8000ebc:	695b      	ldr	r3, [r3, #20]
 8000ebe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ec2:	607b      	str	r3, [r7, #4]
 8000ec4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ec6:	4b49      	ldr	r3, [pc, #292]	@ (8000fec <MX_GPIO_Init+0x19c>)
 8000ec8:	695b      	ldr	r3, [r3, #20]
 8000eca:	4a48      	ldr	r2, [pc, #288]	@ (8000fec <MX_GPIO_Init+0x19c>)
 8000ecc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000ed0:	6153      	str	r3, [r2, #20]
 8000ed2:	4b46      	ldr	r3, [pc, #280]	@ (8000fec <MX_GPIO_Init+0x19c>)
 8000ed4:	695b      	ldr	r3, [r3, #20]
 8000ed6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000eda:	603b      	str	r3, [r7, #0]
 8000edc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	4843      	ldr	r0, [pc, #268]	@ (8000ff0 <MX_GPIO_Init+0x1a0>)
 8000ee4:	f002 fd9c 	bl	8003a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000eee:	4841      	ldr	r0, [pc, #260]	@ (8000ff4 <MX_GPIO_Init+0x1a4>)
 8000ef0:	f002 fd96 	bl	8003a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2140      	movs	r1, #64	@ 0x40
 8000ef8:	483f      	ldr	r0, [pc, #252]	@ (8000ff8 <MX_GPIO_Init+0x1a8>)
 8000efa:	f002 fd91 	bl	8003a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000efe:	2200      	movs	r2, #0
 8000f00:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f08:	f002 fd8a 	bl	8003a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000f0c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f12:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	4619      	mov	r1, r3
 8000f22:	4833      	ldr	r0, [pc, #204]	@ (8000ff0 <MX_GPIO_Init+0x1a0>)
 8000f24:	f002 fbf2 	bl	800370c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f34:	2300      	movs	r3, #0
 8000f36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	482c      	ldr	r0, [pc, #176]	@ (8000ff0 <MX_GPIO_Init+0x1a0>)
 8000f40:	f002 fbe4 	bl	800370c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f44:	2302      	movs	r3, #2
 8000f46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f48:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000f4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	4619      	mov	r1, r3
 8000f58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f5c:	f002 fbd6 	bl	800370c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000f60:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000f64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f66:	2301      	movs	r3, #1
 8000f68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000f72:	f107 0314 	add.w	r3, r7, #20
 8000f76:	4619      	mov	r1, r3
 8000f78:	481e      	ldr	r0, [pc, #120]	@ (8000ff4 <MX_GPIO_Init+0x1a4>)
 8000f7a:	f002 fbc7 	bl	800370c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000f7e:	2340      	movs	r3, #64	@ 0x40
 8000f80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f82:	2301      	movs	r3, #1
 8000f84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f8e:	f107 0314 	add.w	r3, r7, #20
 8000f92:	4619      	mov	r1, r3
 8000f94:	4818      	ldr	r0, [pc, #96]	@ (8000ff8 <MX_GPIO_Init+0x1a8>)
 8000f96:	f002 fbb9 	bl	800370c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000f9a:	2380      	movs	r3, #128	@ 0x80
 8000f9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	4619      	mov	r1, r3
 8000fac:	4812      	ldr	r0, [pc, #72]	@ (8000ff8 <MX_GPIO_Init+0x1a8>)
 8000fae:	f002 fbad 	bl	800370c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000fb2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	4619      	mov	r1, r3
 8000fca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fce:	f002 fb9d 	bl	800370c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	2007      	movs	r0, #7
 8000fd8:	f002 fb61 	bl	800369e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000fdc:	2007      	movs	r0, #7
 8000fde:	f002 fb7a 	bl	80036d6 <HAL_NVIC_EnableIRQ>

}
 8000fe2:	bf00      	nop
 8000fe4:	3728      	adds	r7, #40	@ 0x28
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	48000800 	.word	0x48000800
 8000ff4:	48000400 	.word	0x48000400
 8000ff8:	48001800 	.word	0x48001800

08000ffc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001000:	4b1b      	ldr	r3, [pc, #108]	@ (8001070 <MX_I2C1_Init+0x74>)
 8001002:	4a1c      	ldr	r2, [pc, #112]	@ (8001074 <MX_I2C1_Init+0x78>)
 8001004:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8001006:	4b1a      	ldr	r3, [pc, #104]	@ (8001070 <MX_I2C1_Init+0x74>)
 8001008:	4a1b      	ldr	r2, [pc, #108]	@ (8001078 <MX_I2C1_Init+0x7c>)
 800100a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800100c:	4b18      	ldr	r3, [pc, #96]	@ (8001070 <MX_I2C1_Init+0x74>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001012:	4b17      	ldr	r3, [pc, #92]	@ (8001070 <MX_I2C1_Init+0x74>)
 8001014:	2201      	movs	r2, #1
 8001016:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001018:	4b15      	ldr	r3, [pc, #84]	@ (8001070 <MX_I2C1_Init+0x74>)
 800101a:	2200      	movs	r2, #0
 800101c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800101e:	4b14      	ldr	r3, [pc, #80]	@ (8001070 <MX_I2C1_Init+0x74>)
 8001020:	2200      	movs	r2, #0
 8001022:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001024:	4b12      	ldr	r3, [pc, #72]	@ (8001070 <MX_I2C1_Init+0x74>)
 8001026:	2200      	movs	r2, #0
 8001028:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800102a:	4b11      	ldr	r3, [pc, #68]	@ (8001070 <MX_I2C1_Init+0x74>)
 800102c:	2200      	movs	r2, #0
 800102e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001030:	4b0f      	ldr	r3, [pc, #60]	@ (8001070 <MX_I2C1_Init+0x74>)
 8001032:	2200      	movs	r2, #0
 8001034:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001036:	480e      	ldr	r0, [pc, #56]	@ (8001070 <MX_I2C1_Init+0x74>)
 8001038:	f002 fd22 	bl	8003a80 <HAL_I2C_Init>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001042:	f000 fd71 	bl	8001b28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001046:	2100      	movs	r1, #0
 8001048:	4809      	ldr	r0, [pc, #36]	@ (8001070 <MX_I2C1_Init+0x74>)
 800104a:	f003 fa69 	bl	8004520 <HAL_I2CEx_ConfigAnalogFilter>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001054:	f000 fd68 	bl	8001b28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001058:	2100      	movs	r1, #0
 800105a:	4805      	ldr	r0, [pc, #20]	@ (8001070 <MX_I2C1_Init+0x74>)
 800105c:	f003 faab 	bl	80045b6 <HAL_I2CEx_ConfigDigitalFilter>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001066:	f000 fd5f 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000294 	.word	0x20000294
 8001074:	40005400 	.word	0x40005400
 8001078:	00201d2b 	.word	0x00201d2b

0800107c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08a      	sub	sp, #40	@ 0x28
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a17      	ldr	r2, [pc, #92]	@ (80010f8 <HAL_I2C_MspInit+0x7c>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d128      	bne.n	80010f0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800109e:	4b17      	ldr	r3, [pc, #92]	@ (80010fc <HAL_I2C_MspInit+0x80>)
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	4a16      	ldr	r2, [pc, #88]	@ (80010fc <HAL_I2C_MspInit+0x80>)
 80010a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010a8:	6153      	str	r3, [r2, #20]
 80010aa:	4b14      	ldr	r3, [pc, #80]	@ (80010fc <HAL_I2C_MspInit+0x80>)
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010b6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010bc:	2312      	movs	r3, #18
 80010be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010c4:	2303      	movs	r3, #3
 80010c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010c8:	2304      	movs	r3, #4
 80010ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	4619      	mov	r1, r3
 80010d2:	480b      	ldr	r0, [pc, #44]	@ (8001100 <HAL_I2C_MspInit+0x84>)
 80010d4:	f002 fb1a 	bl	800370c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010d8:	4b08      	ldr	r3, [pc, #32]	@ (80010fc <HAL_I2C_MspInit+0x80>)
 80010da:	69db      	ldr	r3, [r3, #28]
 80010dc:	4a07      	ldr	r2, [pc, #28]	@ (80010fc <HAL_I2C_MspInit+0x80>)
 80010de:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010e2:	61d3      	str	r3, [r2, #28]
 80010e4:	4b05      	ldr	r3, [pc, #20]	@ (80010fc <HAL_I2C_MspInit+0x80>)
 80010e6:	69db      	ldr	r3, [r3, #28]
 80010e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80010f0:	bf00      	nop
 80010f2:	3728      	adds	r7, #40	@ 0x28
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40005400 	.word	0x40005400
 80010fc:	40021000 	.word	0x40021000
 8001100:	48000400 	.word	0x48000400

08001104 <__io_putchar>:
uint16_t SHT21_ReadRaw(uint8_t cmd);
float SHT21_ReadTemperature(void);
float SHT21_ReadHumidity(void);

int __io_putchar(int ch)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800110c:	1d39      	adds	r1, r7, #4
 800110e:	f04f 33ff 	mov.w	r3, #4294967295
 8001112:	2201      	movs	r2, #1
 8001114:	4803      	ldr	r0, [pc, #12]	@ (8001124 <__io_putchar+0x20>)
 8001116:	f006 f93d 	bl	8007394 <HAL_UART_Transmit>
    return ch;
 800111a:	687b      	ldr	r3, [r7, #4]
}
 800111c:	4618      	mov	r0, r3
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000410 	.word	0x20000410

08001128 <Modbus_CRC16>:

uint16_t Modbus_CRC16(uint8_t *buf, uint8_t len)
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	460b      	mov	r3, r1
 8001132:	70fb      	strb	r3, [r7, #3]
    uint16_t crc = 0xFFFF;
 8001134:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001138:	81fb      	strh	r3, [r7, #14]
    for (uint8_t pos = 0; pos < len; pos++)
 800113a:	2300      	movs	r3, #0
 800113c:	737b      	strb	r3, [r7, #13]
 800113e:	e026      	b.n	800118e <Modbus_CRC16+0x66>
    {
        crc ^= (uint16_t)buf[pos];
 8001140:	7b7b      	ldrb	r3, [r7, #13]
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	4413      	add	r3, r2
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	461a      	mov	r2, r3
 800114a:	89fb      	ldrh	r3, [r7, #14]
 800114c:	4053      	eors	r3, r2
 800114e:	81fb      	strh	r3, [r7, #14]
        for (uint8_t i = 8; i != 0; i--)
 8001150:	2308      	movs	r3, #8
 8001152:	733b      	strb	r3, [r7, #12]
 8001154:	e015      	b.n	8001182 <Modbus_CRC16+0x5a>
        {
            if ((crc & 0x0001) != 0)
 8001156:	89fb      	ldrh	r3, [r7, #14]
 8001158:	f003 0301 	and.w	r3, r3, #1
 800115c:	2b00      	cmp	r3, #0
 800115e:	d00a      	beq.n	8001176 <Modbus_CRC16+0x4e>
            {
                crc >>= 1;
 8001160:	89fb      	ldrh	r3, [r7, #14]
 8001162:	085b      	lsrs	r3, r3, #1
 8001164:	81fb      	strh	r3, [r7, #14]
                crc ^= 0xA001;
 8001166:	89fb      	ldrh	r3, [r7, #14]
 8001168:	f483 43bf 	eor.w	r3, r3, #24448	@ 0x5f80
 800116c:	f083 037e 	eor.w	r3, r3, #126	@ 0x7e
 8001170:	43db      	mvns	r3, r3
 8001172:	81fb      	strh	r3, [r7, #14]
 8001174:	e002      	b.n	800117c <Modbus_CRC16+0x54>
            }
            else
            {
                crc >>= 1;
 8001176:	89fb      	ldrh	r3, [r7, #14]
 8001178:	085b      	lsrs	r3, r3, #1
 800117a:	81fb      	strh	r3, [r7, #14]
        for (uint8_t i = 8; i != 0; i--)
 800117c:	7b3b      	ldrb	r3, [r7, #12]
 800117e:	3b01      	subs	r3, #1
 8001180:	733b      	strb	r3, [r7, #12]
 8001182:	7b3b      	ldrb	r3, [r7, #12]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d1e6      	bne.n	8001156 <Modbus_CRC16+0x2e>
    for (uint8_t pos = 0; pos < len; pos++)
 8001188:	7b7b      	ldrb	r3, [r7, #13]
 800118a:	3301      	adds	r3, #1
 800118c:	737b      	strb	r3, [r7, #13]
 800118e:	7b7a      	ldrb	r2, [r7, #13]
 8001190:	78fb      	ldrb	r3, [r7, #3]
 8001192:	429a      	cmp	r2, r3
 8001194:	d3d4      	bcc.n	8001140 <Modbus_CRC16+0x18>
            }
        }
    }
    return crc;
 8001196:	89fb      	ldrh	r3, [r7, #14]
}
 8001198:	4618      	mov	r0, r3
 800119a:	3714      	adds	r7, #20
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <Read_Temperature>:

HAL_StatusTypeDef Read_Temperature(uint16_t *temperature)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b088      	sub	sp, #32
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
    uint8_t query[8] = {0x01, 0x03, 0x00, 0x20, 0x00, 0x01, 0x00, 0x00};
 80011ac:	4a3c      	ldr	r2, [pc, #240]	@ (80012a0 <Read_Temperature+0xfc>)
 80011ae:	f107 0310 	add.w	r3, r7, #16
 80011b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011b6:	e883 0003 	stmia.w	r3, {r0, r1}
    uint16_t crc = Modbus_CRC16(query, 6);
 80011ba:	f107 0310 	add.w	r3, r7, #16
 80011be:	2106      	movs	r1, #6
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff ffb1 	bl	8001128 <Modbus_CRC16>
 80011c6:	4603      	mov	r3, r0
 80011c8:	83fb      	strh	r3, [r7, #30]
    query[6] = crc & 0xFF;
 80011ca:	8bfb      	ldrh	r3, [r7, #30]
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	75bb      	strb	r3, [r7, #22]
    query[7] = (crc >> 8) & 0xFF;
 80011d0:	8bfb      	ldrh	r3, [r7, #30]
 80011d2:	0a1b      	lsrs	r3, r3, #8
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	75fb      	strb	r3, [r7, #23]

    uint8_t response[7] = {0};
 80011da:	f107 0308 	add.w	r3, r7, #8
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	f8c3 2003 	str.w	r2, [r3, #3]

    HAL_GPIO_WritePin(RS485_DE_RE_PORT, RS485_DE_RE_PIN, GPIO_PIN_SET);
 80011e6:	2201      	movs	r2, #1
 80011e8:	2101      	movs	r1, #1
 80011ea:	482e      	ldr	r0, [pc, #184]	@ (80012a4 <Read_Temperature+0x100>)
 80011ec:	f002 fc18 	bl	8003a20 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80011f0:	2001      	movs	r0, #1
 80011f2:	f000 ffa3 	bl	800213c <HAL_Delay>
    HAL_StatusTypeDef status = HAL_UART_Transmit(&huart2, query, 8, 1000);
 80011f6:	f107 0110 	add.w	r1, r7, #16
 80011fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011fe:	2208      	movs	r2, #8
 8001200:	4829      	ldr	r0, [pc, #164]	@ (80012a8 <Read_Temperature+0x104>)
 8001202:	f006 f8c7 	bl	8007394 <HAL_UART_Transmit>
 8001206:	4603      	mov	r3, r0
 8001208:	777b      	strb	r3, [r7, #29]
    HAL_Delay(2);
 800120a:	2002      	movs	r0, #2
 800120c:	f000 ff96 	bl	800213c <HAL_Delay>
    HAL_GPIO_WritePin(RS485_DE_RE_PORT, RS485_DE_RE_PIN, GPIO_PIN_RESET);
 8001210:	2200      	movs	r2, #0
 8001212:	2101      	movs	r1, #1
 8001214:	4823      	ldr	r0, [pc, #140]	@ (80012a4 <Read_Temperature+0x100>)
 8001216:	f002 fc03 	bl	8003a20 <HAL_GPIO_WritePin>

    if (status != HAL_OK) return status;
 800121a:	7f7b      	ldrb	r3, [r7, #29]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <Read_Temperature+0x80>
 8001220:	7f7b      	ldrb	r3, [r7, #29]
 8001222:	e039      	b.n	8001298 <Read_Temperature+0xf4>
    status = HAL_UART_Receive(&huart2, response, 7, 1000);
 8001224:	f107 0108 	add.w	r1, r7, #8
 8001228:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800122c:	2207      	movs	r2, #7
 800122e:	481e      	ldr	r0, [pc, #120]	@ (80012a8 <Read_Temperature+0x104>)
 8001230:	f006 f939 	bl	80074a6 <HAL_UART_Receive>
 8001234:	4603      	mov	r3, r0
 8001236:	777b      	strb	r3, [r7, #29]
    if (status != HAL_OK) return status;
 8001238:	7f7b      	ldrb	r3, [r7, #29]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <Read_Temperature+0x9e>
 800123e:	7f7b      	ldrb	r3, [r7, #29]
 8001240:	e02a      	b.n	8001298 <Read_Temperature+0xf4>

    if (response[0] != 0x01 || response[1] != 0x03) return HAL_ERROR;
 8001242:	7a3b      	ldrb	r3, [r7, #8]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d102      	bne.n	800124e <Read_Temperature+0xaa>
 8001248:	7a7b      	ldrb	r3, [r7, #9]
 800124a:	2b03      	cmp	r3, #3
 800124c:	d001      	beq.n	8001252 <Read_Temperature+0xae>
 800124e:	2301      	movs	r3, #1
 8001250:	e022      	b.n	8001298 <Read_Temperature+0xf4>
    uint16_t crc_calc = Modbus_CRC16(response, 5);
 8001252:	f107 0308 	add.w	r3, r7, #8
 8001256:	2105      	movs	r1, #5
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff ff65 	bl	8001128 <Modbus_CRC16>
 800125e:	4603      	mov	r3, r0
 8001260:	837b      	strh	r3, [r7, #26]
    uint16_t crc_recv = (response[6] << 8) | response[5];
 8001262:	7bbb      	ldrb	r3, [r7, #14]
 8001264:	b21b      	sxth	r3, r3
 8001266:	021b      	lsls	r3, r3, #8
 8001268:	b21a      	sxth	r2, r3
 800126a:	7b7b      	ldrb	r3, [r7, #13]
 800126c:	b21b      	sxth	r3, r3
 800126e:	4313      	orrs	r3, r2
 8001270:	b21b      	sxth	r3, r3
 8001272:	833b      	strh	r3, [r7, #24]
    if (crc_calc != crc_recv) return HAL_ERROR;
 8001274:	8b7a      	ldrh	r2, [r7, #26]
 8001276:	8b3b      	ldrh	r3, [r7, #24]
 8001278:	429a      	cmp	r2, r3
 800127a:	d001      	beq.n	8001280 <Read_Temperature+0xdc>
 800127c:	2301      	movs	r3, #1
 800127e:	e00b      	b.n	8001298 <Read_Temperature+0xf4>

    *temperature = (response[3] << 8) | response[4];
 8001280:	7afb      	ldrb	r3, [r7, #11]
 8001282:	b21b      	sxth	r3, r3
 8001284:	021b      	lsls	r3, r3, #8
 8001286:	b21a      	sxth	r2, r3
 8001288:	7b3b      	ldrb	r3, [r7, #12]
 800128a:	b21b      	sxth	r3, r3
 800128c:	4313      	orrs	r3, r2
 800128e:	b21b      	sxth	r3, r3
 8001290:	b29a      	uxth	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	801a      	strh	r2, [r3, #0]
    return HAL_OK;
 8001296:	2300      	movs	r3, #0
}
 8001298:	4618      	mov	r0, r3
 800129a:	3720      	adds	r7, #32
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	0800c0e0 	.word	0x0800c0e0
 80012a4:	48000800 	.word	0x48000800
 80012a8:	20000388 	.word	0x20000388

080012ac <Read_Humidity>:

HAL_StatusTypeDef Read_Humidity(uint16_t *humidity)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b088      	sub	sp, #32
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
    uint8_t query[8] = {0x07, 0x03, 0x75, 0x37, 0x00, 0x01, 0x00, 0x00};
 80012b4:	4a3c      	ldr	r2, [pc, #240]	@ (80013a8 <Read_Humidity+0xfc>)
 80012b6:	f107 0310 	add.w	r3, r7, #16
 80012ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012be:	e883 0003 	stmia.w	r3, {r0, r1}

    uint16_t crc = Modbus_CRC16(query, 6);
 80012c2:	f107 0310 	add.w	r3, r7, #16
 80012c6:	2106      	movs	r1, #6
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ff2d 	bl	8001128 <Modbus_CRC16>
 80012ce:	4603      	mov	r3, r0
 80012d0:	83fb      	strh	r3, [r7, #30]
    query[6] = crc & 0xFF;
 80012d2:	8bfb      	ldrh	r3, [r7, #30]
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	75bb      	strb	r3, [r7, #22]
    query[7] = (crc >> 8) & 0xFF;
 80012d8:	8bfb      	ldrh	r3, [r7, #30]
 80012da:	0a1b      	lsrs	r3, r3, #8
 80012dc:	b29b      	uxth	r3, r3
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	75fb      	strb	r3, [r7, #23]

    uint8_t response[7] = {0};
 80012e2:	f107 0308 	add.w	r3, r7, #8
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	f8c3 2003 	str.w	r2, [r3, #3]

    HAL_GPIO_WritePin(RS485_DE_RE_PORT, RS485_DE_RE_PIN, GPIO_PIN_SET);
 80012ee:	2201      	movs	r2, #1
 80012f0:	2101      	movs	r1, #1
 80012f2:	482e      	ldr	r0, [pc, #184]	@ (80013ac <Read_Humidity+0x100>)
 80012f4:	f002 fb94 	bl	8003a20 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 80012f8:	2014      	movs	r0, #20
 80012fa:	f000 ff1f 	bl	800213c <HAL_Delay>
    HAL_StatusTypeDef status = HAL_UART_Transmit(&huart2, query, 8, 1000);
 80012fe:	f107 0110 	add.w	r1, r7, #16
 8001302:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001306:	2208      	movs	r2, #8
 8001308:	4829      	ldr	r0, [pc, #164]	@ (80013b0 <Read_Humidity+0x104>)
 800130a:	f006 f843 	bl	8007394 <HAL_UART_Transmit>
 800130e:	4603      	mov	r3, r0
 8001310:	777b      	strb	r3, [r7, #29]
    HAL_Delay(20);
 8001312:	2014      	movs	r0, #20
 8001314:	f000 ff12 	bl	800213c <HAL_Delay>
    HAL_GPIO_WritePin(RS485_DE_RE_PORT, RS485_DE_RE_PIN, GPIO_PIN_RESET);
 8001318:	2200      	movs	r2, #0
 800131a:	2101      	movs	r1, #1
 800131c:	4823      	ldr	r0, [pc, #140]	@ (80013ac <Read_Humidity+0x100>)
 800131e:	f002 fb7f 	bl	8003a20 <HAL_GPIO_WritePin>

    if (status != HAL_OK) return status;
 8001322:	7f7b      	ldrb	r3, [r7, #29]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <Read_Humidity+0x80>
 8001328:	7f7b      	ldrb	r3, [r7, #29]
 800132a:	e039      	b.n	80013a0 <Read_Humidity+0xf4>
    status = HAL_UART_Receive(&huart2, response, 7, 1000);
 800132c:	f107 0108 	add.w	r1, r7, #8
 8001330:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001334:	2207      	movs	r2, #7
 8001336:	481e      	ldr	r0, [pc, #120]	@ (80013b0 <Read_Humidity+0x104>)
 8001338:	f006 f8b5 	bl	80074a6 <HAL_UART_Receive>
 800133c:	4603      	mov	r3, r0
 800133e:	777b      	strb	r3, [r7, #29]
    if (status != HAL_OK) return status;
 8001340:	7f7b      	ldrb	r3, [r7, #29]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <Read_Humidity+0x9e>
 8001346:	7f7b      	ldrb	r3, [r7, #29]
 8001348:	e02a      	b.n	80013a0 <Read_Humidity+0xf4>

    if (response[0] != 0x01 || response[1] != 0x03) return HAL_ERROR;
 800134a:	7a3b      	ldrb	r3, [r7, #8]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d102      	bne.n	8001356 <Read_Humidity+0xaa>
 8001350:	7a7b      	ldrb	r3, [r7, #9]
 8001352:	2b03      	cmp	r3, #3
 8001354:	d001      	beq.n	800135a <Read_Humidity+0xae>
 8001356:	2301      	movs	r3, #1
 8001358:	e022      	b.n	80013a0 <Read_Humidity+0xf4>
    uint16_t crc_calc = Modbus_CRC16(response, 5);
 800135a:	f107 0308 	add.w	r3, r7, #8
 800135e:	2105      	movs	r1, #5
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff fee1 	bl	8001128 <Modbus_CRC16>
 8001366:	4603      	mov	r3, r0
 8001368:	837b      	strh	r3, [r7, #26]
    uint16_t crc_recv = (response[5]) | (response[6] << 8);
 800136a:	7b7b      	ldrb	r3, [r7, #13]
 800136c:	b21a      	sxth	r2, r3
 800136e:	7bbb      	ldrb	r3, [r7, #14]
 8001370:	b21b      	sxth	r3, r3
 8001372:	021b      	lsls	r3, r3, #8
 8001374:	b21b      	sxth	r3, r3
 8001376:	4313      	orrs	r3, r2
 8001378:	b21b      	sxth	r3, r3
 800137a:	833b      	strh	r3, [r7, #24]
    if (crc_calc != crc_recv) return HAL_ERROR;
 800137c:	8b7a      	ldrh	r2, [r7, #26]
 800137e:	8b3b      	ldrh	r3, [r7, #24]
 8001380:	429a      	cmp	r2, r3
 8001382:	d001      	beq.n	8001388 <Read_Humidity+0xdc>
 8001384:	2301      	movs	r3, #1
 8001386:	e00b      	b.n	80013a0 <Read_Humidity+0xf4>

    *humidity = (response[3] << 8) | response[4];
 8001388:	7afb      	ldrb	r3, [r7, #11]
 800138a:	b21b      	sxth	r3, r3
 800138c:	021b      	lsls	r3, r3, #8
 800138e:	b21a      	sxth	r2, r3
 8001390:	7b3b      	ldrb	r3, [r7, #12]
 8001392:	b21b      	sxth	r3, r3
 8001394:	4313      	orrs	r3, r2
 8001396:	b21b      	sxth	r3, r3
 8001398:	b29a      	uxth	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	801a      	strh	r2, [r3, #0]
    return HAL_OK;
 800139e:	2300      	movs	r3, #0
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3720      	adds	r7, #32
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	0800c0e8 	.word	0x0800c0e8
 80013ac:	48000800 	.word	0x48000800
 80013b0:	20000388 	.word	0x20000388

080013b4 <Read_Radiation>:

HAL_StatusTypeDef Read_Radiation(uint16_t *radiation)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b088      	sub	sp, #32
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
    uint8_t query[8] = {0x01, 0x03, 0x00, 0x0C, 0x00, 0x01, 0x0C, 0xD4};
 80013bc:	4a3e      	ldr	r2, [pc, #248]	@ (80014b8 <Read_Radiation+0x104>)
 80013be:	f107 0310 	add.w	r3, r7, #16
 80013c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013c6:	e883 0003 	stmia.w	r3, {r0, r1}

    uint16_t crc = Modbus_CRC16(query, 6);
 80013ca:	f107 0310 	add.w	r3, r7, #16
 80013ce:	2106      	movs	r1, #6
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff fea9 	bl	8001128 <Modbus_CRC16>
 80013d6:	4603      	mov	r3, r0
 80013d8:	83fb      	strh	r3, [r7, #30]
    query[6] = crc & 0xFF;
 80013da:	8bfb      	ldrh	r3, [r7, #30]
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	75bb      	strb	r3, [r7, #22]
    query[7] = (crc >> 8) & 0xFF;
 80013e0:	8bfb      	ldrh	r3, [r7, #30]
 80013e2:	0a1b      	lsrs	r3, r3, #8
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	75fb      	strb	r3, [r7, #23]

    uint8_t response[7] = {0};
 80013ea:	f107 0308 	add.w	r3, r7, #8
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	f8c3 2003 	str.w	r2, [r3, #3]

    HAL_GPIO_WritePin(RS485_RAD_DE_RE_PORT, RS485_RAD_DE_RE_PIN, GPIO_PIN_SET);
 80013f6:	2201      	movs	r2, #1
 80013f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001400:	f002 fb0e 	bl	8003a20 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8001404:	2001      	movs	r0, #1
 8001406:	f000 fe99 	bl	800213c <HAL_Delay>
    HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, query, 8, 1000);
 800140a:	f107 0110 	add.w	r1, r7, #16
 800140e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001412:	2208      	movs	r2, #8
 8001414:	4829      	ldr	r0, [pc, #164]	@ (80014bc <Read_Radiation+0x108>)
 8001416:	f005 ffbd 	bl	8007394 <HAL_UART_Transmit>
 800141a:	4603      	mov	r3, r0
 800141c:	777b      	strb	r3, [r7, #29]
    HAL_Delay(2);
 800141e:	2002      	movs	r0, #2
 8001420:	f000 fe8c 	bl	800213c <HAL_Delay>
    HAL_GPIO_WritePin(RS485_RAD_DE_RE_PORT, RS485_RAD_DE_RE_PIN, GPIO_PIN_RESET);
 8001424:	2200      	movs	r2, #0
 8001426:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800142a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800142e:	f002 faf7 	bl	8003a20 <HAL_GPIO_WritePin>

    if (status != HAL_OK) return status;
 8001432:	7f7b      	ldrb	r3, [r7, #29]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <Read_Radiation+0x88>
 8001438:	7f7b      	ldrb	r3, [r7, #29]
 800143a:	e039      	b.n	80014b0 <Read_Radiation+0xfc>

    status = HAL_UART_Receive(&huart1, response, 7, 1000);
 800143c:	f107 0108 	add.w	r1, r7, #8
 8001440:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001444:	2207      	movs	r2, #7
 8001446:	481d      	ldr	r0, [pc, #116]	@ (80014bc <Read_Radiation+0x108>)
 8001448:	f006 f82d 	bl	80074a6 <HAL_UART_Receive>
 800144c:	4603      	mov	r3, r0
 800144e:	777b      	strb	r3, [r7, #29]
    if (status != HAL_OK) return status;
 8001450:	7f7b      	ldrb	r3, [r7, #29]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <Read_Radiation+0xa6>
 8001456:	7f7b      	ldrb	r3, [r7, #29]
 8001458:	e02a      	b.n	80014b0 <Read_Radiation+0xfc>

    if (response[0] != 0x06 || response[1] != 0x03) return HAL_ERROR;
 800145a:	7a3b      	ldrb	r3, [r7, #8]
 800145c:	2b06      	cmp	r3, #6
 800145e:	d102      	bne.n	8001466 <Read_Radiation+0xb2>
 8001460:	7a7b      	ldrb	r3, [r7, #9]
 8001462:	2b03      	cmp	r3, #3
 8001464:	d001      	beq.n	800146a <Read_Radiation+0xb6>
 8001466:	2301      	movs	r3, #1
 8001468:	e022      	b.n	80014b0 <Read_Radiation+0xfc>

    uint16_t crc_calc = Modbus_CRC16(response, 5);
 800146a:	f107 0308 	add.w	r3, r7, #8
 800146e:	2105      	movs	r1, #5
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff fe59 	bl	8001128 <Modbus_CRC16>
 8001476:	4603      	mov	r3, r0
 8001478:	837b      	strh	r3, [r7, #26]
    uint16_t crc_recv = (response[6] << 8) | response[5];
 800147a:	7bbb      	ldrb	r3, [r7, #14]
 800147c:	b21b      	sxth	r3, r3
 800147e:	021b      	lsls	r3, r3, #8
 8001480:	b21a      	sxth	r2, r3
 8001482:	7b7b      	ldrb	r3, [r7, #13]
 8001484:	b21b      	sxth	r3, r3
 8001486:	4313      	orrs	r3, r2
 8001488:	b21b      	sxth	r3, r3
 800148a:	833b      	strh	r3, [r7, #24]
    if (crc_calc != crc_recv) return HAL_ERROR;
 800148c:	8b7a      	ldrh	r2, [r7, #26]
 800148e:	8b3b      	ldrh	r3, [r7, #24]
 8001490:	429a      	cmp	r2, r3
 8001492:	d001      	beq.n	8001498 <Read_Radiation+0xe4>
 8001494:	2301      	movs	r3, #1
 8001496:	e00b      	b.n	80014b0 <Read_Radiation+0xfc>

    *radiation = (response[3] << 8) | response[4];
 8001498:	7afb      	ldrb	r3, [r7, #11]
 800149a:	b21b      	sxth	r3, r3
 800149c:	021b      	lsls	r3, r3, #8
 800149e:	b21a      	sxth	r2, r3
 80014a0:	7b3b      	ldrb	r3, [r7, #12]
 80014a2:	b21b      	sxth	r3, r3
 80014a4:	4313      	orrs	r3, r2
 80014a6:	b21b      	sxth	r3, r3
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	801a      	strh	r2, [r3, #0]

    return HAL_OK;
 80014ae:	2300      	movs	r3, #0
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3720      	adds	r7, #32
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	0800c0f0 	.word	0x0800c0f0
 80014bc:	20000300 	.word	0x20000300

080014c0 <Read_PT1000_Temperature>:

float Read_PT1000_Temperature(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08e      	sub	sp, #56	@ 0x38
 80014c4:	af00      	add	r7, sp, #0
    float temp = NAN;
 80014c6:	4b4f      	ldr	r3, [pc, #316]	@ (8001604 <Read_PT1000_Temperature+0x144>)
 80014c8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    ADC_ChannelConfTypeDef sConfig = {0};
 80014ca:	1d3b      	adds	r3, r7, #4
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]
 80014d8:	615a      	str	r2, [r3, #20]
    sConfig.Channel      = ADC_CHANNEL_9;
 80014da:	2309      	movs	r3, #9
 80014dc:	607b      	str	r3, [r7, #4]
    sConfig.Rank         = ADC_REGULAR_RANK_1;
 80014de:	2301      	movs	r3, #1
 80014e0:	60bb      	str	r3, [r7, #8]
    sConfig.SingleDiff   = ADC_SINGLE_ENDED;
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 80014e6:	2307      	movs	r3, #7
 80014e8:	60fb      	str	r3, [r7, #12]
    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014ea:	2300      	movs	r3, #0
 80014ec:	617b      	str	r3, [r7, #20]
    sConfig.Offset       = 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	61bb      	str	r3, [r7, #24]

    if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	4619      	mov	r1, r3
 80014f6:	4844      	ldr	r0, [pc, #272]	@ (8001608 <Read_PT1000_Temperature+0x148>)
 80014f8:	f001 fa9a 	bl	8002a30 <HAL_ADC_ConfigChannel>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <Read_PT1000_Temperature+0x4a>
    {
        MX_ADC2_Init();
 8001502:	f7ff fbc9 	bl	8000c98 <MX_ADC2_Init>
        return NAN;
 8001506:	4b3f      	ldr	r3, [pc, #252]	@ (8001604 <Read_PT1000_Temperature+0x144>)
 8001508:	e075      	b.n	80015f6 <Read_PT1000_Temperature+0x136>
    }

    const int N = 16;
 800150a:	2310      	movs	r3, #16
 800150c:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t sum = 0;
 800150e:	2300      	movs	r3, #0
 8001510:	637b      	str	r3, [r7, #52]	@ 0x34
    for (int i = 0; i < N; i++)
 8001512:	2300      	movs	r3, #0
 8001514:	633b      	str	r3, [r7, #48]	@ 0x30
 8001516:	e01d      	b.n	8001554 <Read_PT1000_Temperature+0x94>
    {
        HAL_ADC_Start(&hadc2);
 8001518:	483b      	ldr	r0, [pc, #236]	@ (8001608 <Read_PT1000_Temperature+0x148>)
 800151a:	f001 f82d 	bl	8002578 <HAL_ADC_Start>
        if (HAL_ADC_PollForConversion(&hadc2, 10) != HAL_OK)
 800151e:	210a      	movs	r1, #10
 8001520:	4839      	ldr	r0, [pc, #228]	@ (8001608 <Read_PT1000_Temperature+0x148>)
 8001522:	f001 f975 	bl	8002810 <HAL_ADC_PollForConversion>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d006      	beq.n	800153a <Read_PT1000_Temperature+0x7a>
        {
            HAL_ADC_Stop(&hadc2);
 800152c:	4836      	ldr	r0, [pc, #216]	@ (8001608 <Read_PT1000_Temperature+0x148>)
 800152e:	f001 f939 	bl	80027a4 <HAL_ADC_Stop>
            MX_ADC2_Init();
 8001532:	f7ff fbb1 	bl	8000c98 <MX_ADC2_Init>
            return NAN;
 8001536:	4b33      	ldr	r3, [pc, #204]	@ (8001604 <Read_PT1000_Temperature+0x144>)
 8001538:	e05d      	b.n	80015f6 <Read_PT1000_Temperature+0x136>
        }
        sum += HAL_ADC_GetValue(&hadc2);
 800153a:	4833      	ldr	r0, [pc, #204]	@ (8001608 <Read_PT1000_Temperature+0x148>)
 800153c:	f001 fa6a 	bl	8002a14 <HAL_ADC_GetValue>
 8001540:	4602      	mov	r2, r0
 8001542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001544:	4413      	add	r3, r2
 8001546:	637b      	str	r3, [r7, #52]	@ 0x34
        HAL_ADC_Stop(&hadc2);
 8001548:	482f      	ldr	r0, [pc, #188]	@ (8001608 <Read_PT1000_Temperature+0x148>)
 800154a:	f001 f92b 	bl	80027a4 <HAL_ADC_Stop>
    for (int i = 0; i < N; i++)
 800154e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001550:	3301      	adds	r3, #1
 8001552:	633b      	str	r3, [r7, #48]	@ 0x30
 8001554:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001558:	429a      	cmp	r2, r3
 800155a:	dbdd      	blt.n	8001518 <Read_PT1000_Temperature+0x58>
    }
    float adc_avg = (float)sum / (float)N;
 800155c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800155e:	ee07 3a90 	vmov	s15, r3
 8001562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001568:	ee07 3a90 	vmov	s15, r3
 800156c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001570:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001574:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    float v_meas = (adc_avg / ADC_MAX) * VREF;
 8001578:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800157c:	eddf 6a23 	vldr	s13, [pc, #140]	@ 800160c <Read_PT1000_Temperature+0x14c>
 8001580:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001584:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001610 <Read_PT1000_Temperature+0x150>
 8001588:	ee67 7a87 	vmul.f32	s15, s15, s14
 800158c:	edc7 7a08 	vstr	s15, [r7, #32]

    if (v_meas <= 0.0f || v_meas >= (VREF - 0.001f))
 8001590:	edd7 7a08 	vldr	s15, [r7, #32]
 8001594:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800159c:	d908      	bls.n	80015b0 <Read_PT1000_Temperature+0xf0>
 800159e:	edd7 7a08 	vldr	s15, [r7, #32]
 80015a2:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8001614 <Read_PT1000_Temperature+0x154>
 80015a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ae:	db03      	blt.n	80015b8 <Read_PT1000_Temperature+0xf8>
    {
        MX_ADC2_Init();
 80015b0:	f7ff fb72 	bl	8000c98 <MX_ADC2_Init>
        return NAN;
 80015b4:	4b13      	ldr	r3, [pc, #76]	@ (8001604 <Read_PT1000_Temperature+0x144>)
 80015b6:	e01e      	b.n	80015f6 <Read_PT1000_Temperature+0x136>
    }

    float r_pt1000 = (v_meas / (VREF - v_meas)) * R_REF;
 80015b8:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001610 <Read_PT1000_Temperature+0x150>
 80015bc:	edd7 7a08 	vldr	s15, [r7, #32]
 80015c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015c4:	edd7 6a08 	vldr	s13, [r7, #32]
 80015c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015cc:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001618 <Read_PT1000_Temperature+0x158>
 80015d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015d4:	edc7 7a07 	vstr	s15, [r7, #28]
    temp = (r_pt1000 - PT1000_R0) / (PT1000_R0 * ALPHA);
 80015d8:	edd7 7a07 	vldr	s15, [r7, #28]
 80015dc:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001618 <Read_PT1000_Temperature+0x158>
 80015e0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80015e4:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 800161c <Read_PT1000_Temperature+0x15c>
 80015e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015ec:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    MX_ADC2_Init();
 80015f0:	f7ff fb52 	bl	8000c98 <MX_ADC2_Init>
    return temp;
 80015f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80015f6:	ee07 3a90 	vmov	s15, r3
 80015fa:	eeb0 0a67 	vmov.f32	s0, s15
 80015fe:	3738      	adds	r7, #56	@ 0x38
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	7fc00000 	.word	0x7fc00000
 8001608:	20000240 	.word	0x20000240
 800160c:	457ff000 	.word	0x457ff000
 8001610:	40533333 	.word	0x40533333
 8001614:	405322d1 	.word	0x405322d1
 8001618:	447a0000 	.word	0x447a0000
 800161c:	40766666 	.word	0x40766666

08001620 <read_wind_direction_degrees>:

float read_wind_direction_degrees(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 8001626:	4816      	ldr	r0, [pc, #88]	@ (8001680 <read_wind_direction_degrees+0x60>)
 8001628:	f000 ffa6 	bl	8002578 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800162c:	f04f 31ff 	mov.w	r1, #4294967295
 8001630:	4813      	ldr	r0, [pc, #76]	@ (8001680 <read_wind_direction_degrees+0x60>)
 8001632:	f001 f8ed 	bl	8002810 <HAL_ADC_PollForConversion>
    uint32_t adc_value = HAL_ADC_GetValue(&hadc1);
 8001636:	4812      	ldr	r0, [pc, #72]	@ (8001680 <read_wind_direction_degrees+0x60>)
 8001638:	f001 f9ec 	bl	8002a14 <HAL_ADC_GetValue>
 800163c:	6078      	str	r0, [r7, #4]
    HAL_ADC_Stop(&hadc1);
 800163e:	4810      	ldr	r0, [pc, #64]	@ (8001680 <read_wind_direction_degrees+0x60>)
 8001640:	f001 f8b0 	bl	80027a4 <HAL_ADC_Stop>
    float voltage = (adc_value * 3.3f) / 4095.0f;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	ee07 3a90 	vmov	s15, r3
 800164a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800164e:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8001684 <read_wind_direction_degrees+0x64>
 8001652:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001656:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8001688 <read_wind_direction_degrees+0x68>
 800165a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800165e:	edc7 7a00 	vstr	s15, [r7]
    return (voltage / 3.3f) * 360.0f;
 8001662:	ed97 7a00 	vldr	s14, [r7]
 8001666:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8001684 <read_wind_direction_degrees+0x64>
 800166a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800166e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800168c <read_wind_direction_degrees+0x6c>
 8001672:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001676:	eeb0 0a67 	vmov.f32	s0, s15
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	200001f0 	.word	0x200001f0
 8001684:	40533333 	.word	0x40533333
 8001688:	457ff000 	.word	0x457ff000
 800168c:	43b40000 	.word	0x43b40000

08001690 <calculate_wind_speed>:

float calculate_wind_speed(uint32_t pulses, float interval_seconds)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	ed87 0a00 	vstr	s0, [r7]
    (void)interval_seconds;
    if (pulses == 0) return 0;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d102      	bne.n	80016a8 <calculate_wind_speed+0x18>
 80016a2:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 80016d0 <calculate_wind_speed+0x40>
 80016a6:	e00c      	b.n	80016c2 <calculate_wind_speed+0x32>
    return (0.41f * pulses) + 0.66f;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	ee07 3a90 	vmov	s15, r3
 80016ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016b2:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80016d4 <calculate_wind_speed+0x44>
 80016b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016ba:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80016d8 <calculate_wind_speed+0x48>
 80016be:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 80016c2:	eeb0 0a67 	vmov.f32	s0, s15
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	00000000 	.word	0x00000000
 80016d4:	3ed1eb85 	.word	0x3ed1eb85
 80016d8:	3f28f5c3 	.word	0x3f28f5c3

080016dc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_1)
 80016e6:	88fb      	ldrh	r3, [r7, #6]
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d110      	bne.n	800170e <HAL_GPIO_EXTI_Callback+0x32>
    {
        uint32_t now = HAL_GetTick();
 80016ec:	f000 fd1a 	bl	8002124 <HAL_GetTick>
 80016f0:	60f8      	str	r0, [r7, #12]
        if (now - last_interrupt_time > 200)
 80016f2:	4b09      	ldr	r3, [pc, #36]	@ (8001718 <HAL_GPIO_EXTI_Callback+0x3c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2bc8      	cmp	r3, #200	@ 0xc8
 80016fc:	d907      	bls.n	800170e <HAL_GPIO_EXTI_Callback+0x32>
        {
            pulse_count++;
 80016fe:	4b07      	ldr	r3, [pc, #28]	@ (800171c <HAL_GPIO_EXTI_Callback+0x40>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	3301      	adds	r3, #1
 8001704:	4a05      	ldr	r2, [pc, #20]	@ (800171c <HAL_GPIO_EXTI_Callback+0x40>)
 8001706:	6013      	str	r3, [r2, #0]
            last_interrupt_time = now;
 8001708:	4a03      	ldr	r2, [pc, #12]	@ (8001718 <HAL_GPIO_EXTI_Callback+0x3c>)
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	6013      	str	r3, [r2, #0]
        }
    }
}
 800170e:	bf00      	nop
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	200002ec 	.word	0x200002ec
 800171c:	200002e8 	.word	0x200002e8

08001720 <SHT21_ReadRaw>:

#define SHT21_ADDR (0x40 << 1)

uint16_t SHT21_ReadRaw(uint8_t cmd)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af02      	add	r7, sp, #8
 8001726:	4603      	mov	r3, r0
 8001728:	71fb      	strb	r3, [r7, #7]
    uint8_t data[3] = {0};
 800172a:	f107 0308 	add.w	r3, r7, #8
 800172e:	2100      	movs	r1, #0
 8001730:	460a      	mov	r2, r1
 8001732:	801a      	strh	r2, [r3, #0]
 8001734:	460a      	mov	r2, r1
 8001736:	709a      	strb	r2, [r3, #2]
    HAL_I2C_Master_Transmit(&hi2c1, SHT21_ADDR, &cmd, 1, 100);
 8001738:	1dfa      	adds	r2, r7, #7
 800173a:	2364      	movs	r3, #100	@ 0x64
 800173c:	9300      	str	r3, [sp, #0]
 800173e:	2301      	movs	r3, #1
 8001740:	2180      	movs	r1, #128	@ 0x80
 8001742:	4810      	ldr	r0, [pc, #64]	@ (8001784 <SHT21_ReadRaw+0x64>)
 8001744:	f002 fa38 	bl	8003bb8 <HAL_I2C_Master_Transmit>
    HAL_Delay(85);
 8001748:	2055      	movs	r0, #85	@ 0x55
 800174a:	f000 fcf7 	bl	800213c <HAL_Delay>
    HAL_I2C_Master_Receive(&hi2c1, SHT21_ADDR, data, 3, 100);
 800174e:	f107 0208 	add.w	r2, r7, #8
 8001752:	2364      	movs	r3, #100	@ 0x64
 8001754:	9300      	str	r3, [sp, #0]
 8001756:	2303      	movs	r3, #3
 8001758:	2180      	movs	r1, #128	@ 0x80
 800175a:	480a      	ldr	r0, [pc, #40]	@ (8001784 <SHT21_ReadRaw+0x64>)
 800175c:	f002 fb44 	bl	8003de8 <HAL_I2C_Master_Receive>
    uint16_t raw = (data[0] << 8) | data[1];
 8001760:	7a3b      	ldrb	r3, [r7, #8]
 8001762:	b21b      	sxth	r3, r3
 8001764:	021b      	lsls	r3, r3, #8
 8001766:	b21a      	sxth	r2, r3
 8001768:	7a7b      	ldrb	r3, [r7, #9]
 800176a:	b21b      	sxth	r3, r3
 800176c:	4313      	orrs	r3, r2
 800176e:	b21b      	sxth	r3, r3
 8001770:	81fb      	strh	r3, [r7, #14]
    raw &= ~0x0003;
 8001772:	89fb      	ldrh	r3, [r7, #14]
 8001774:	f023 0303 	bic.w	r3, r3, #3
 8001778:	81fb      	strh	r3, [r7, #14]
    return raw;
 800177a:	89fb      	ldrh	r3, [r7, #14]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20000294 	.word	0x20000294

08001788 <SHT21_ReadTemperature>:

float SHT21_ReadTemperature(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
    uint16_t raw = SHT21_ReadRaw(0xF3);
 800178e:	20f3      	movs	r0, #243	@ 0xf3
 8001790:	f7ff ffc6 	bl	8001720 <SHT21_ReadRaw>
 8001794:	4603      	mov	r3, r0
 8001796:	80fb      	strh	r3, [r7, #6]
    return -46.85f + 175.72f * ((float)raw / 65536.0f);
 8001798:	88fb      	ldrh	r3, [r7, #6]
 800179a:	ee07 3a90 	vmov	s15, r3
 800179e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017a2:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80017c4 <SHT21_ReadTemperature+0x3c>
 80017a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017aa:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80017c8 <SHT21_ReadTemperature+0x40>
 80017ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017b2:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80017cc <SHT21_ReadTemperature+0x44>
 80017b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
}
 80017ba:	eeb0 0a67 	vmov.f32	s0, s15
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	47800000 	.word	0x47800000
 80017c8:	432fb852 	.word	0x432fb852
 80017cc:	423b6666 	.word	0x423b6666

080017d0 <SHT21_ReadHumidity>:

float SHT21_ReadHumidity(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
    uint16_t raw = SHT21_ReadRaw(0xF5);
 80017d6:	20f5      	movs	r0, #245	@ 0xf5
 80017d8:	f7ff ffa2 	bl	8001720 <SHT21_ReadRaw>
 80017dc:	4603      	mov	r3, r0
 80017de:	80fb      	strh	r3, [r7, #6]
    return -6.0f + 125.0f * ((float)raw / 65536.0f);
 80017e0:	88fb      	ldrh	r3, [r7, #6]
 80017e2:	ee07 3a90 	vmov	s15, r3
 80017e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017ea:	eddf 6a08 	vldr	s13, [pc, #32]	@ 800180c <SHT21_ReadHumidity+0x3c>
 80017ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017f2:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001810 <SHT21_ReadHumidity+0x40>
 80017f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017fa:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 80017fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
}
 8001802:	eeb0 0a67 	vmov.f32	s0, s15
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	47800000 	.word	0x47800000
 8001810:	42fa0000 	.word	0x42fa0000

08001814 <main>:

int main(void)
{
 8001814:	b5b0      	push	{r4, r5, r7, lr}
 8001816:	b088      	sub	sp, #32
 8001818:	af02      	add	r7, sp, #8
    HAL_Init();
 800181a:	f000 fc29 	bl	8002070 <HAL_Init>
    SystemClock_Config();
 800181e:	f000 f91b 	bl	8001a58 <SystemClock_Config>

    MX_GPIO_Init();
 8001822:	f7ff fb15 	bl	8000e50 <MX_GPIO_Init>
    MX_ADC1_Init();
 8001826:	f7ff f9c7 	bl	8000bb8 <MX_ADC1_Init>
    MX_ADC2_Init();
 800182a:	f7ff fa35 	bl	8000c98 <MX_ADC2_Init>
    MX_USART2_UART_Init();
 800182e:	f000 faed 	bl	8001e0c <MX_USART2_UART_Init>
    MX_USART3_UART_Init();
 8001832:	f000 fb1b 	bl	8001e6c <MX_USART3_UART_Init>
    MX_USART1_UART_Init();
 8001836:	f000 fab9 	bl	8001dac <MX_USART1_UART_Init>
    MX_I2C1_Init();
 800183a:	f7ff fbdf 	bl	8000ffc <MX_I2C1_Init>

    HAL_GPIO_WritePin(RS485_DE_RE_PORT, RS485_DE_RE_PIN, GPIO_PIN_RESET);
 800183e:	2200      	movs	r2, #0
 8001840:	2101      	movs	r1, #1
 8001842:	4874      	ldr	r0, [pc, #464]	@ (8001a14 <main+0x200>)
 8001844:	f002 f8ec 	bl	8003a20 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RS485_RAD_DE_RE_PORT, RS485_RAD_DE_RE_PIN, GPIO_PIN_RESET);
 8001848:	2200      	movs	r2, #0
 800184a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800184e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001852:	f002 f8e5 	bl	8003a20 <HAL_GPIO_WritePin>

    last_print_time = HAL_GetTick();
 8001856:	f000 fc65 	bl	8002124 <HAL_GetTick>
 800185a:	4603      	mov	r3, r0
 800185c:	4a6e      	ldr	r2, [pc, #440]	@ (8001a18 <main+0x204>)
 800185e:	6013      	str	r3, [r2, #0]
    last_temp_read_time = HAL_GetTick();
 8001860:	f000 fc60 	bl	8002124 <HAL_GetTick>
 8001864:	4603      	mov	r3, r0
 8001866:	4a6d      	ldr	r2, [pc, #436]	@ (8001a1c <main+0x208>)
 8001868:	6013      	str	r3, [r2, #0]

    while (1)
    {
        uint32_t current_time = HAL_GetTick();
 800186a:	f000 fc5b 	bl	8002124 <HAL_GetTick>
 800186e:	6178      	str	r0, [r7, #20]

        if (current_time - last_print_time >= 1000)
 8001870:	4b69      	ldr	r3, [pc, #420]	@ (8001a18 <main+0x204>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	697a      	ldr	r2, [r7, #20]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800187c:	d329      	bcc.n	80018d2 <main+0xbe>
        {
            float speed = calculate_wind_speed(pulse_count, 1.0f);
 800187e:	4b68      	ldr	r3, [pc, #416]	@ (8001a20 <main+0x20c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff ff02 	bl	8001690 <calculate_wind_speed>
 800188c:	ed87 0a04 	vstr	s0, [r7, #16]
            float direction = read_wind_direction_degrees();
 8001890:	f7ff fec6 	bl	8001620 <read_wind_direction_degrees>
 8001894:	ed87 0a03 	vstr	s0, [r7, #12]

            printf("Ruzgar hizi: %.2f km/h, Ruzgar yonu: %.2f derece\r\n", speed, direction);
 8001898:	6938      	ldr	r0, [r7, #16]
 800189a:	f7fe fe5d 	bl	8000558 <__aeabi_f2d>
 800189e:	4604      	mov	r4, r0
 80018a0:	460d      	mov	r5, r1
 80018a2:	68f8      	ldr	r0, [r7, #12]
 80018a4:	f7fe fe58 	bl	8000558 <__aeabi_f2d>
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	e9cd 2300 	strd	r2, r3, [sp]
 80018b0:	4622      	mov	r2, r4
 80018b2:	462b      	mov	r3, r5
 80018b4:	485b      	ldr	r0, [pc, #364]	@ (8001a24 <main+0x210>)
 80018b6:	f008 fc2b 	bl	800a110 <iprintf>
            printf("pulse count=%lu\r\n", pulse_count);
 80018ba:	4b59      	ldr	r3, [pc, #356]	@ (8001a20 <main+0x20c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4619      	mov	r1, r3
 80018c0:	4859      	ldr	r0, [pc, #356]	@ (8001a28 <main+0x214>)
 80018c2:	f008 fc25 	bl	800a110 <iprintf>
            pulse_count = 0;
 80018c6:	4b56      	ldr	r3, [pc, #344]	@ (8001a20 <main+0x20c>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
            last_print_time = current_time;
 80018cc:	4a52      	ldr	r2, [pc, #328]	@ (8001a18 <main+0x204>)
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	6013      	str	r3, [r2, #0]
        }

        if (current_time - last_temp_read_time >= 2000)
 80018d2:	4b52      	ldr	r3, [pc, #328]	@ (8001a1c <main+0x208>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80018de:	d3c4      	bcc.n	800186a <main+0x56>
        {
            if (Read_Temperature(&temperature_raw) == HAL_OK)
 80018e0:	4852      	ldr	r0, [pc, #328]	@ (8001a2c <main+0x218>)
 80018e2:	f7ff fc5f 	bl	80011a4 <Read_Temperature>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d112      	bne.n	8001912 <main+0xfe>
                printf("RS485 Sicaklik: %.1f C\r\n", temperature_raw / 10.0f);
 80018ec:	4b4f      	ldr	r3, [pc, #316]	@ (8001a2c <main+0x218>)
 80018ee:	881b      	ldrh	r3, [r3, #0]
 80018f0:	ee07 3a90 	vmov	s15, r3
 80018f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018f8:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80018fc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001900:	ee16 0a90 	vmov	r0, s13
 8001904:	f7fe fe28 	bl	8000558 <__aeabi_f2d>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4848      	ldr	r0, [pc, #288]	@ (8001a30 <main+0x21c>)
 800190e:	f008 fbff 	bl	800a110 <iprintf>

            uint16_t humidity_raw = 0;
 8001912:	2300      	movs	r3, #0
 8001914:	80fb      	strh	r3, [r7, #6]
            if (Read_Humidity(&humidity_raw) == HAL_OK)
 8001916:	1dbb      	adds	r3, r7, #6
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff fcc7 	bl	80012ac <Read_Humidity>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d111      	bne.n	8001948 <main+0x134>
                printf("RS485 Nem: %.1f %%\r\n", humidity_raw / 10.0f);
 8001924:	88fb      	ldrh	r3, [r7, #6]
 8001926:	ee07 3a90 	vmov	s15, r3
 800192a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800192e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001932:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001936:	ee16 0a90 	vmov	r0, s13
 800193a:	f7fe fe0d 	bl	8000558 <__aeabi_f2d>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	483c      	ldr	r0, [pc, #240]	@ (8001a34 <main+0x220>)
 8001944:	f008 fbe4 	bl	800a110 <iprintf>

            printf("SHT21 Sicaklik: %.2f C\r\n", SHT21_ReadTemperature());
 8001948:	f7ff ff1e 	bl	8001788 <SHT21_ReadTemperature>
 800194c:	ee10 3a10 	vmov	r3, s0
 8001950:	4618      	mov	r0, r3
 8001952:	f7fe fe01 	bl	8000558 <__aeabi_f2d>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	4837      	ldr	r0, [pc, #220]	@ (8001a38 <main+0x224>)
 800195c:	f008 fbd8 	bl	800a110 <iprintf>
            printf("SHT21 Nem: %.2f %%\r\n", SHT21_ReadHumidity());
 8001960:	f7ff ff36 	bl	80017d0 <SHT21_ReadHumidity>
 8001964:	ee10 3a10 	vmov	r3, s0
 8001968:	4618      	mov	r0, r3
 800196a:	f7fe fdf5 	bl	8000558 <__aeabi_f2d>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	4832      	ldr	r0, [pc, #200]	@ (8001a3c <main+0x228>)
 8001974:	f008 fbcc 	bl	800a110 <iprintf>

            uint16_t rad_raw = 0;
 8001978:	2300      	movs	r3, #0
 800197a:	80bb      	strh	r3, [r7, #4]
            if (Read_Radiation(&rad_raw) == HAL_OK)
 800197c:	1d3b      	adds	r3, r7, #4
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff fd18 	bl	80013b4 <Read_Radiation>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d111      	bne.n	80019ae <main+0x19a>
                printf("Isinim: %.1f W/m2\r\n", rad_raw / 10.0f);
 800198a:	88bb      	ldrh	r3, [r7, #4]
 800198c:	ee07 3a90 	vmov	s15, r3
 8001990:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001994:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001998:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800199c:	ee16 0a90 	vmov	r0, s13
 80019a0:	f7fe fdda 	bl	8000558 <__aeabi_f2d>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	4825      	ldr	r0, [pc, #148]	@ (8001a40 <main+0x22c>)
 80019aa:	f008 fbb1 	bl	800a110 <iprintf>
            printf("RS485 ışınım sensoru hatasi!\r\n");
 80019ae:	4825      	ldr	r0, [pc, #148]	@ (8001a44 <main+0x230>)
 80019b0:	f008 fc16 	bl	800a1e0 <puts>

            float panel_temp = Read_PT1000_Temperature();
 80019b4:	f7ff fd84 	bl	80014c0 <Read_PT1000_Temperature>
 80019b8:	ed87 0a02 	vstr	s0, [r7, #8]
            if (isnan(panel_temp) || panel_temp < -50.0f || panel_temp > 200.0f)
 80019bc:	ed97 7a02 	vldr	s14, [r7, #8]
 80019c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80019c4:	eeb4 7a67 	vcmp.f32	s14, s15
 80019c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019cc:	d611      	bvs.n	80019f2 <main+0x1de>
 80019ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80019d2:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001a48 <main+0x234>
 80019d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019de:	d408      	bmi.n	80019f2 <main+0x1de>
 80019e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80019e4:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8001a4c <main+0x238>
 80019e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f0:	dd03      	ble.n	80019fa <main+0x1e6>
            {
                printf("Panel sicaklik hatasi!\r\n");
 80019f2:	4817      	ldr	r0, [pc, #92]	@ (8001a50 <main+0x23c>)
 80019f4:	f008 fbf4 	bl	800a1e0 <puts>
 80019f8:	e007      	b.n	8001a0a <main+0x1f6>
            }
            else
            {
                printf("Panel Sicaklik: %.2f C\r\n", panel_temp);
 80019fa:	68b8      	ldr	r0, [r7, #8]
 80019fc:	f7fe fdac 	bl	8000558 <__aeabi_f2d>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	4813      	ldr	r0, [pc, #76]	@ (8001a54 <main+0x240>)
 8001a06:	f008 fb83 	bl	800a110 <iprintf>
            }

            last_temp_read_time = current_time;
 8001a0a:	4a04      	ldr	r2, [pc, #16]	@ (8001a1c <main+0x208>)
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	6013      	str	r3, [r2, #0]
    {
 8001a10:	e72b      	b.n	800186a <main+0x56>
 8001a12:	bf00      	nop
 8001a14:	48000800 	.word	0x48000800
 8001a18:	200002f0 	.word	0x200002f0
 8001a1c:	200002f4 	.word	0x200002f4
 8001a20:	200002e8 	.word	0x200002e8
 8001a24:	0800c0f8 	.word	0x0800c0f8
 8001a28:	0800c12c 	.word	0x0800c12c
 8001a2c:	200002f8 	.word	0x200002f8
 8001a30:	0800c140 	.word	0x0800c140
 8001a34:	0800c15c 	.word	0x0800c15c
 8001a38:	0800c174 	.word	0x0800c174
 8001a3c:	0800c190 	.word	0x0800c190
 8001a40:	0800c1a8 	.word	0x0800c1a8
 8001a44:	0800c1bc 	.word	0x0800c1bc
 8001a48:	c2480000 	.word	0xc2480000
 8001a4c:	43480000 	.word	0x43480000
 8001a50:	0800c1e0 	.word	0x0800c1e0
 8001a54:	0800c1f8 	.word	0x0800c1f8

08001a58 <SystemClock_Config>:
        }
    }
}

void SystemClock_Config(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b0a6      	sub	sp, #152	@ 0x98
 8001a5c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a5e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001a62:	2228      	movs	r2, #40	@ 0x28
 8001a64:	2100      	movs	r1, #0
 8001a66:	4618      	mov	r0, r3
 8001a68:	f008 fc9a 	bl	800a3a0 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a6c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	60da      	str	r2, [r3, #12]
 8001a7a:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a7c:	1d3b      	adds	r3, r7, #4
 8001a7e:	2258      	movs	r2, #88	@ 0x58
 8001a80:	2100      	movs	r1, #0
 8001a82:	4618      	mov	r0, r3
 8001a84:	f008 fc8c 	bl	800a3a0 <memset>

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 8001a88:	2309      	movs	r3, #9
 8001a8a:	673b      	str	r3, [r7, #112]	@ 0x70
    RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001a8c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001a90:	677b      	str	r3, [r7, #116]	@ 0x74
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a92:	2301      	movs	r3, #1
 8001a94:	67fb      	str	r3, [r7, #124]	@ 0x7c
    RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001a96:	2301      	movs	r3, #1
 8001a98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001aa2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001aa6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001aaa:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001aae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ab8:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001abc:	4618      	mov	r0, r3
 8001abe:	f003 ffc9 	bl	8005a54 <HAL_RCC_OscConfig>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <SystemClock_Config+0x74>
        Error_Handler();
 8001ac8:	f000 f82e 	bl	8001b28 <Error_Handler>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8001acc:	230f      	movs	r3, #15
 8001ace:	65fb      	str	r3, [r7, #92]	@ 0x5c
                                 RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	663b      	str	r3, [r7, #96]	@ 0x60
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	667b      	str	r3, [r7, #100]	@ 0x64
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ad8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001adc:	66bb      	str	r3, [r7, #104]	@ 0x68
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ae2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001ae6:	2102      	movs	r1, #2
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f004 ffd7 	bl	8006a9c <HAL_RCC_ClockConfig>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <SystemClock_Config+0xa0>
        Error_Handler();
 8001af4:	f000 f818 	bl	8001b28 <Error_Handler>

    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_ADC12 | RCC_PERIPHCLK_I2C1;
 8001af8:	23a6      	movs	r3, #166	@ 0xa6
 8001afa:	607b      	str	r3, [r7, #4]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001afc:	2300      	movs	r3, #0
 8001afe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001b04:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8001b0a:	2310      	movs	r3, #16
 8001b0c:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b0e:	1d3b      	adds	r3, r7, #4
 8001b10:	4618      	mov	r0, r3
 8001b12:	f005 f9d5 	bl	8006ec0 <HAL_RCCEx_PeriphCLKConfig>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <SystemClock_Config+0xc8>
        Error_Handler();
 8001b1c:	f000 f804 	bl	8001b28 <Error_Handler>
}
 8001b20:	bf00      	nop
 8001b22:	3798      	adds	r7, #152	@ 0x98
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <Error_Handler>:

void Error_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b2c:	b672      	cpsid	i
}
 8001b2e:	bf00      	nop
    __disable_irq();
    while (1) {}
 8001b30:	bf00      	nop
 8001b32:	e7fd      	b.n	8001b30 <Error_Handler+0x8>

08001b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b3a:	4b0f      	ldr	r3, [pc, #60]	@ (8001b78 <HAL_MspInit+0x44>)
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	4a0e      	ldr	r2, [pc, #56]	@ (8001b78 <HAL_MspInit+0x44>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	6193      	str	r3, [r2, #24]
 8001b46:	4b0c      	ldr	r3, [pc, #48]	@ (8001b78 <HAL_MspInit+0x44>)
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	607b      	str	r3, [r7, #4]
 8001b50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b52:	4b09      	ldr	r3, [pc, #36]	@ (8001b78 <HAL_MspInit+0x44>)
 8001b54:	69db      	ldr	r3, [r3, #28]
 8001b56:	4a08      	ldr	r2, [pc, #32]	@ (8001b78 <HAL_MspInit+0x44>)
 8001b58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b5c:	61d3      	str	r3, [r2, #28]
 8001b5e:	4b06      	ldr	r3, [pc, #24]	@ (8001b78 <HAL_MspInit+0x44>)
 8001b60:	69db      	ldr	r3, [r3, #28]
 8001b62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b66:	603b      	str	r3, [r7, #0]
 8001b68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	40021000 	.word	0x40021000

08001b7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b80:	bf00      	nop
 8001b82:	e7fd      	b.n	8001b80 <NMI_Handler+0x4>

08001b84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b88:	bf00      	nop
 8001b8a:	e7fd      	b.n	8001b88 <HardFault_Handler+0x4>

08001b8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b90:	bf00      	nop
 8001b92:	e7fd      	b.n	8001b90 <MemManage_Handler+0x4>

08001b94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b98:	bf00      	nop
 8001b9a:	e7fd      	b.n	8001b98 <BusFault_Handler+0x4>

08001b9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ba0:	bf00      	nop
 8001ba2:	e7fd      	b.n	8001ba0 <UsageFault_Handler+0x4>

08001ba4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bd2:	f000 fa93 	bl	80020fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001bde:	2002      	movs	r0, #2
 8001be0:	f001 ff36 	bl	8003a50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001be4:	bf00      	nop
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001bec:	4802      	ldr	r0, [pc, #8]	@ (8001bf8 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8001bee:	f002 fd2e 	bl	800464e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20000498 	.word	0x20000498

08001bfc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  return 1;
 8001c00:	2301      	movs	r3, #1
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <_kill>:

int _kill(int pid, int sig)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c16:	f008 fc15 	bl	800a444 <__errno>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2216      	movs	r2, #22
 8001c1e:	601a      	str	r2, [r3, #0]
  return -1;
 8001c20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <_exit>:

void _exit (int status)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c34:	f04f 31ff 	mov.w	r1, #4294967295
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f7ff ffe7 	bl	8001c0c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c3e:	bf00      	nop
 8001c40:	e7fd      	b.n	8001c3e <_exit+0x12>

08001c42 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b086      	sub	sp, #24
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	60f8      	str	r0, [r7, #12]
 8001c4a:	60b9      	str	r1, [r7, #8]
 8001c4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c4e:	2300      	movs	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]
 8001c52:	e00a      	b.n	8001c6a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c54:	f3af 8000 	nop.w
 8001c58:	4601      	mov	r1, r0
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	1c5a      	adds	r2, r3, #1
 8001c5e:	60ba      	str	r2, [r7, #8]
 8001c60:	b2ca      	uxtb	r2, r1
 8001c62:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	3301      	adds	r3, #1
 8001c68:	617b      	str	r3, [r7, #20]
 8001c6a:	697a      	ldr	r2, [r7, #20]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	dbf0      	blt.n	8001c54 <_read+0x12>
  }

  return len;
 8001c72:	687b      	ldr	r3, [r7, #4]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3718      	adds	r7, #24
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]
 8001c8c:	e009      	b.n	8001ca2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	1c5a      	adds	r2, r3, #1
 8001c92:	60ba      	str	r2, [r7, #8]
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff fa34 	bl	8001104 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	617b      	str	r3, [r7, #20]
 8001ca2:	697a      	ldr	r2, [r7, #20]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	dbf1      	blt.n	8001c8e <_write+0x12>
  }
  return len;
 8001caa:	687b      	ldr	r3, [r7, #4]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <_close>:

int _close(int file)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cdc:	605a      	str	r2, [r3, #4]
  return 0;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <_isatty>:

int _isatty(int file)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cf4:	2301      	movs	r3, #1
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d02:	b480      	push	{r7}
 8001d04:	b085      	sub	sp, #20
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	60f8      	str	r0, [r7, #12]
 8001d0a:	60b9      	str	r1, [r7, #8]
 8001d0c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3714      	adds	r7, #20
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d24:	4a14      	ldr	r2, [pc, #80]	@ (8001d78 <_sbrk+0x5c>)
 8001d26:	4b15      	ldr	r3, [pc, #84]	@ (8001d7c <_sbrk+0x60>)
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d30:	4b13      	ldr	r3, [pc, #76]	@ (8001d80 <_sbrk+0x64>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d102      	bne.n	8001d3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d38:	4b11      	ldr	r3, [pc, #68]	@ (8001d80 <_sbrk+0x64>)
 8001d3a:	4a12      	ldr	r2, [pc, #72]	@ (8001d84 <_sbrk+0x68>)
 8001d3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d3e:	4b10      	ldr	r3, [pc, #64]	@ (8001d80 <_sbrk+0x64>)
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4413      	add	r3, r2
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d207      	bcs.n	8001d5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d4c:	f008 fb7a 	bl	800a444 <__errno>
 8001d50:	4603      	mov	r3, r0
 8001d52:	220c      	movs	r2, #12
 8001d54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d56:	f04f 33ff 	mov.w	r3, #4294967295
 8001d5a:	e009      	b.n	8001d70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d5c:	4b08      	ldr	r3, [pc, #32]	@ (8001d80 <_sbrk+0x64>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d62:	4b07      	ldr	r3, [pc, #28]	@ (8001d80 <_sbrk+0x64>)
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4413      	add	r3, r2
 8001d6a:	4a05      	ldr	r2, [pc, #20]	@ (8001d80 <_sbrk+0x64>)
 8001d6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3718      	adds	r7, #24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	20010000 	.word	0x20010000
 8001d7c:	00000400 	.word	0x00000400
 8001d80:	200002fc 	.word	0x200002fc
 8001d84:	200008c0 	.word	0x200008c0

08001d88 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d8c:	4b06      	ldr	r3, [pc, #24]	@ (8001da8 <SystemInit+0x20>)
 8001d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d92:	4a05      	ldr	r2, [pc, #20]	@ (8001da8 <SystemInit+0x20>)
 8001d94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	e000ed00 	.word	0xe000ed00

08001dac <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001db0:	4b14      	ldr	r3, [pc, #80]	@ (8001e04 <MX_USART1_UART_Init+0x58>)
 8001db2:	4a15      	ldr	r2, [pc, #84]	@ (8001e08 <MX_USART1_UART_Init+0x5c>)
 8001db4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001db6:	4b13      	ldr	r3, [pc, #76]	@ (8001e04 <MX_USART1_UART_Init+0x58>)
 8001db8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001dbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dbe:	4b11      	ldr	r3, [pc, #68]	@ (8001e04 <MX_USART1_UART_Init+0x58>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8001e04 <MX_USART1_UART_Init+0x58>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001dca:	4b0e      	ldr	r3, [pc, #56]	@ (8001e04 <MX_USART1_UART_Init+0x58>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001e04 <MX_USART1_UART_Init+0x58>)
 8001dd2:	220c      	movs	r2, #12
 8001dd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8001e04 <MX_USART1_UART_Init+0x58>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ddc:	4b09      	ldr	r3, [pc, #36]	@ (8001e04 <MX_USART1_UART_Init+0x58>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001de2:	4b08      	ldr	r3, [pc, #32]	@ (8001e04 <MX_USART1_UART_Init+0x58>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001de8:	4b06      	ldr	r3, [pc, #24]	@ (8001e04 <MX_USART1_UART_Init+0x58>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001dee:	4805      	ldr	r0, [pc, #20]	@ (8001e04 <MX_USART1_UART_Init+0x58>)
 8001df0:	f005 fa82 	bl	80072f8 <HAL_UART_Init>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001dfa:	f7ff fe95 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20000300 	.word	0x20000300
 8001e08:	40013800 	.word	0x40013800

08001e0c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e10:	4b14      	ldr	r3, [pc, #80]	@ (8001e64 <MX_USART2_UART_Init+0x58>)
 8001e12:	4a15      	ldr	r2, [pc, #84]	@ (8001e68 <MX_USART2_UART_Init+0x5c>)
 8001e14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001e16:	4b13      	ldr	r3, [pc, #76]	@ (8001e64 <MX_USART2_UART_Init+0x58>)
 8001e18:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001e1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e1e:	4b11      	ldr	r3, [pc, #68]	@ (8001e64 <MX_USART2_UART_Init+0x58>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e24:	4b0f      	ldr	r3, [pc, #60]	@ (8001e64 <MX_USART2_UART_Init+0x58>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e64 <MX_USART2_UART_Init+0x58>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e30:	4b0c      	ldr	r3, [pc, #48]	@ (8001e64 <MX_USART2_UART_Init+0x58>)
 8001e32:	220c      	movs	r2, #12
 8001e34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e36:	4b0b      	ldr	r3, [pc, #44]	@ (8001e64 <MX_USART2_UART_Init+0x58>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e3c:	4b09      	ldr	r3, [pc, #36]	@ (8001e64 <MX_USART2_UART_Init+0x58>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e42:	4b08      	ldr	r3, [pc, #32]	@ (8001e64 <MX_USART2_UART_Init+0x58>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e48:	4b06      	ldr	r3, [pc, #24]	@ (8001e64 <MX_USART2_UART_Init+0x58>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e4e:	4805      	ldr	r0, [pc, #20]	@ (8001e64 <MX_USART2_UART_Init+0x58>)
 8001e50:	f005 fa52 	bl	80072f8 <HAL_UART_Init>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001e5a:	f7ff fe65 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	20000388 	.word	0x20000388
 8001e68:	40004400 	.word	0x40004400

08001e6c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e70:	4b14      	ldr	r3, [pc, #80]	@ (8001ec4 <MX_USART3_UART_Init+0x58>)
 8001e72:	4a15      	ldr	r2, [pc, #84]	@ (8001ec8 <MX_USART3_UART_Init+0x5c>)
 8001e74:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8001e76:	4b13      	ldr	r3, [pc, #76]	@ (8001ec4 <MX_USART3_UART_Init+0x58>)
 8001e78:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001e7c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e7e:	4b11      	ldr	r3, [pc, #68]	@ (8001ec4 <MX_USART3_UART_Init+0x58>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e84:	4b0f      	ldr	r3, [pc, #60]	@ (8001ec4 <MX_USART3_UART_Init+0x58>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ec4 <MX_USART3_UART_Init+0x58>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e90:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec4 <MX_USART3_UART_Init+0x58>)
 8001e92:	220c      	movs	r2, #12
 8001e94:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e96:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec4 <MX_USART3_UART_Init+0x58>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e9c:	4b09      	ldr	r3, [pc, #36]	@ (8001ec4 <MX_USART3_UART_Init+0x58>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ea2:	4b08      	ldr	r3, [pc, #32]	@ (8001ec4 <MX_USART3_UART_Init+0x58>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ea8:	4b06      	ldr	r3, [pc, #24]	@ (8001ec4 <MX_USART3_UART_Init+0x58>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001eae:	4805      	ldr	r0, [pc, #20]	@ (8001ec4 <MX_USART3_UART_Init+0x58>)
 8001eb0:	f005 fa22 	bl	80072f8 <HAL_UART_Init>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001eba:	f7ff fe35 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20000410 	.word	0x20000410
 8001ec8:	40004800 	.word	0x40004800

08001ecc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b08e      	sub	sp, #56	@ 0x38
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	605a      	str	r2, [r3, #4]
 8001ede:	609a      	str	r2, [r3, #8]
 8001ee0:	60da      	str	r2, [r3, #12]
 8001ee2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a47      	ldr	r2, [pc, #284]	@ (8002008 <HAL_UART_MspInit+0x13c>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d12a      	bne.n	8001f44 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001eee:	4b47      	ldr	r3, [pc, #284]	@ (800200c <HAL_UART_MspInit+0x140>)
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	4a46      	ldr	r2, [pc, #280]	@ (800200c <HAL_UART_MspInit+0x140>)
 8001ef4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ef8:	6193      	str	r3, [r2, #24]
 8001efa:	4b44      	ldr	r3, [pc, #272]	@ (800200c <HAL_UART_MspInit+0x140>)
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f02:	623b      	str	r3, [r7, #32]
 8001f04:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f06:	4b41      	ldr	r3, [pc, #260]	@ (800200c <HAL_UART_MspInit+0x140>)
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	4a40      	ldr	r2, [pc, #256]	@ (800200c <HAL_UART_MspInit+0x140>)
 8001f0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f10:	6153      	str	r3, [r2, #20]
 8001f12:	4b3e      	ldr	r3, [pc, #248]	@ (800200c <HAL_UART_MspInit+0x140>)
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f1a:	61fb      	str	r3, [r7, #28]
 8001f1c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f1e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001f22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f24:	2302      	movs	r3, #2
 8001f26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f30:	2307      	movs	r3, #7
 8001f32:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f38:	4619      	mov	r1, r3
 8001f3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f3e:	f001 fbe5 	bl	800370c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001f42:	e05c      	b.n	8001ffe <HAL_UART_MspInit+0x132>
  else if(uartHandle->Instance==USART2)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a31      	ldr	r2, [pc, #196]	@ (8002010 <HAL_UART_MspInit+0x144>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d129      	bne.n	8001fa2 <HAL_UART_MspInit+0xd6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f4e:	4b2f      	ldr	r3, [pc, #188]	@ (800200c <HAL_UART_MspInit+0x140>)
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	4a2e      	ldr	r2, [pc, #184]	@ (800200c <HAL_UART_MspInit+0x140>)
 8001f54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f58:	61d3      	str	r3, [r2, #28]
 8001f5a:	4b2c      	ldr	r3, [pc, #176]	@ (800200c <HAL_UART_MspInit+0x140>)
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f62:	61bb      	str	r3, [r7, #24]
 8001f64:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f66:	4b29      	ldr	r3, [pc, #164]	@ (800200c <HAL_UART_MspInit+0x140>)
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	4a28      	ldr	r2, [pc, #160]	@ (800200c <HAL_UART_MspInit+0x140>)
 8001f6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f70:	6153      	str	r3, [r2, #20]
 8001f72:	4b26      	ldr	r3, [pc, #152]	@ (800200c <HAL_UART_MspInit+0x140>)
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f7a:	617b      	str	r3, [r7, #20]
 8001f7c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f7e:	230c      	movs	r3, #12
 8001f80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f82:	2302      	movs	r3, #2
 8001f84:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f86:	2300      	movs	r3, #0
 8001f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f8e:	2307      	movs	r3, #7
 8001f90:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f96:	4619      	mov	r1, r3
 8001f98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f9c:	f001 fbb6 	bl	800370c <HAL_GPIO_Init>
}
 8001fa0:	e02d      	b.n	8001ffe <HAL_UART_MspInit+0x132>
  else if(uartHandle->Instance==USART3)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a1b      	ldr	r2, [pc, #108]	@ (8002014 <HAL_UART_MspInit+0x148>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d128      	bne.n	8001ffe <HAL_UART_MspInit+0x132>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001fac:	4b17      	ldr	r3, [pc, #92]	@ (800200c <HAL_UART_MspInit+0x140>)
 8001fae:	69db      	ldr	r3, [r3, #28]
 8001fb0:	4a16      	ldr	r2, [pc, #88]	@ (800200c <HAL_UART_MspInit+0x140>)
 8001fb2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fb6:	61d3      	str	r3, [r2, #28]
 8001fb8:	4b14      	ldr	r3, [pc, #80]	@ (800200c <HAL_UART_MspInit+0x140>)
 8001fba:	69db      	ldr	r3, [r3, #28]
 8001fbc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fc0:	613b      	str	r3, [r7, #16]
 8001fc2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc4:	4b11      	ldr	r3, [pc, #68]	@ (800200c <HAL_UART_MspInit+0x140>)
 8001fc6:	695b      	ldr	r3, [r3, #20]
 8001fc8:	4a10      	ldr	r2, [pc, #64]	@ (800200c <HAL_UART_MspInit+0x140>)
 8001fca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fce:	6153      	str	r3, [r2, #20]
 8001fd0:	4b0e      	ldr	r3, [pc, #56]	@ (800200c <HAL_UART_MspInit+0x140>)
 8001fd2:	695b      	ldr	r3, [r3, #20]
 8001fd4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fd8:	60fb      	str	r3, [r7, #12]
 8001fda:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001fdc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001fe0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fea:	2303      	movs	r3, #3
 8001fec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001fee:	2307      	movs	r3, #7
 8001ff0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	4807      	ldr	r0, [pc, #28]	@ (8002018 <HAL_UART_MspInit+0x14c>)
 8001ffa:	f001 fb87 	bl	800370c <HAL_GPIO_Init>
}
 8001ffe:	bf00      	nop
 8002000:	3738      	adds	r7, #56	@ 0x38
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40013800 	.word	0x40013800
 800200c:	40021000 	.word	0x40021000
 8002010:	40004400 	.word	0x40004400
 8002014:	40004800 	.word	0x40004800
 8002018:	48000400 	.word	0x48000400

0800201c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800201c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002054 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002020:	f7ff feb2 	bl	8001d88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002024:	480c      	ldr	r0, [pc, #48]	@ (8002058 <LoopForever+0x6>)
  ldr r1, =_edata
 8002026:	490d      	ldr	r1, [pc, #52]	@ (800205c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002028:	4a0d      	ldr	r2, [pc, #52]	@ (8002060 <LoopForever+0xe>)
  movs r3, #0
 800202a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800202c:	e002      	b.n	8002034 <LoopCopyDataInit>

0800202e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800202e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002030:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002032:	3304      	adds	r3, #4

08002034 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002034:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002036:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002038:	d3f9      	bcc.n	800202e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800203a:	4a0a      	ldr	r2, [pc, #40]	@ (8002064 <LoopForever+0x12>)
  ldr r4, =_ebss
 800203c:	4c0a      	ldr	r4, [pc, #40]	@ (8002068 <LoopForever+0x16>)
  movs r3, #0
 800203e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002040:	e001      	b.n	8002046 <LoopFillZerobss>

08002042 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002042:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002044:	3204      	adds	r2, #4

08002046 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002046:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002048:	d3fb      	bcc.n	8002042 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800204a:	f008 fa01 	bl	800a450 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800204e:	f7ff fbe1 	bl	8001814 <main>

08002052 <LoopForever>:

LoopForever:
    b LoopForever
 8002052:	e7fe      	b.n	8002052 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002054:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002058:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800205c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002060:	0800c5d4 	.word	0x0800c5d4
  ldr r2, =_sbss
 8002064:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002068:	200008bc 	.word	0x200008bc

0800206c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800206c:	e7fe      	b.n	800206c <ADC1_2_IRQHandler>
	...

08002070 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002074:	4b08      	ldr	r3, [pc, #32]	@ (8002098 <HAL_Init+0x28>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a07      	ldr	r2, [pc, #28]	@ (8002098 <HAL_Init+0x28>)
 800207a:	f043 0310 	orr.w	r3, r3, #16
 800207e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002080:	2003      	movs	r0, #3
 8002082:	f001 fb01 	bl	8003688 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002086:	2000      	movs	r0, #0
 8002088:	f000 f808 	bl	800209c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800208c:	f7ff fd52 	bl	8001b34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40022000 	.word	0x40022000

0800209c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020a4:	4b12      	ldr	r3, [pc, #72]	@ (80020f0 <HAL_InitTick+0x54>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	4b12      	ldr	r3, [pc, #72]	@ (80020f4 <HAL_InitTick+0x58>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	4619      	mov	r1, r3
 80020ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80020b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ba:	4618      	mov	r0, r3
 80020bc:	f001 fb19 	bl	80036f2 <HAL_SYSTICK_Config>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e00e      	b.n	80020e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2b0f      	cmp	r3, #15
 80020ce:	d80a      	bhi.n	80020e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020d0:	2200      	movs	r2, #0
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	f04f 30ff 	mov.w	r0, #4294967295
 80020d8:	f001 fae1 	bl	800369e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020dc:	4a06      	ldr	r2, [pc, #24]	@ (80020f8 <HAL_InitTick+0x5c>)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80020e2:	2300      	movs	r3, #0
 80020e4:	e000      	b.n	80020e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	20000000 	.word	0x20000000
 80020f4:	20000008 	.word	0x20000008
 80020f8:	20000004 	.word	0x20000004

080020fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002100:	4b06      	ldr	r3, [pc, #24]	@ (800211c <HAL_IncTick+0x20>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	461a      	mov	r2, r3
 8002106:	4b06      	ldr	r3, [pc, #24]	@ (8002120 <HAL_IncTick+0x24>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4413      	add	r3, r2
 800210c:	4a04      	ldr	r2, [pc, #16]	@ (8002120 <HAL_IncTick+0x24>)
 800210e:	6013      	str	r3, [r2, #0]
}
 8002110:	bf00      	nop
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	20000008 	.word	0x20000008
 8002120:	2000076c 	.word	0x2000076c

08002124 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  return uwTick;  
 8002128:	4b03      	ldr	r3, [pc, #12]	@ (8002138 <HAL_GetTick+0x14>)
 800212a:	681b      	ldr	r3, [r3, #0]
}
 800212c:	4618      	mov	r0, r3
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	2000076c 	.word	0x2000076c

0800213c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002144:	f7ff ffee 	bl	8002124 <HAL_GetTick>
 8002148:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002154:	d005      	beq.n	8002162 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002156:	4b0a      	ldr	r3, [pc, #40]	@ (8002180 <HAL_Delay+0x44>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	461a      	mov	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	4413      	add	r3, r2
 8002160:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002162:	bf00      	nop
 8002164:	f7ff ffde 	bl	8002124 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	429a      	cmp	r2, r3
 8002172:	d8f7      	bhi.n	8002164 <HAL_Delay+0x28>
  {
  }
}
 8002174:	bf00      	nop
 8002176:	bf00      	nop
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	20000008 	.word	0x20000008

08002184 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b09a      	sub	sp, #104	@ 0x68
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800218c:	2300      	movs	r3, #0
 800218e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002192:	2300      	movs	r3, #0
 8002194:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002196:	2300      	movs	r3, #0
 8002198:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d101      	bne.n	80021a4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e1e3      	b.n	800256c <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ae:	f003 0310 	and.w	r3, r3, #16
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d176      	bne.n	80022a4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d152      	bne.n	8002264 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f7fe fdbb 	bl	8000d54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d13b      	bne.n	8002264 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f001 f85f 	bl	80032b0 <ADC_Disable>
 80021f2:	4603      	mov	r3, r0
 80021f4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fc:	f003 0310 	and.w	r3, r3, #16
 8002200:	2b00      	cmp	r3, #0
 8002202:	d12f      	bne.n	8002264 <HAL_ADC_Init+0xe0>
 8002204:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002208:	2b00      	cmp	r3, #0
 800220a:	d12b      	bne.n	8002264 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002210:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002214:	f023 0302 	bic.w	r3, r3, #2
 8002218:	f043 0202 	orr.w	r2, r3, #2
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	689a      	ldr	r2, [r3, #8]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800222e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	689a      	ldr	r2, [r3, #8]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800223e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002240:	4b92      	ldr	r3, [pc, #584]	@ (800248c <HAL_ADC_Init+0x308>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a92      	ldr	r2, [pc, #584]	@ (8002490 <HAL_ADC_Init+0x30c>)
 8002246:	fba2 2303 	umull	r2, r3, r2, r3
 800224a:	0c9a      	lsrs	r2, r3, #18
 800224c:	4613      	mov	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4413      	add	r3, r2
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002256:	e002      	b.n	800225e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	3b01      	subs	r3, #1
 800225c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1f9      	bne.n	8002258 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d007      	beq.n	8002282 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800227c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002280:	d110      	bne.n	80022a4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002286:	f023 0312 	bic.w	r3, r3, #18
 800228a:	f043 0210 	orr.w	r2, r3, #16
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002296:	f043 0201 	orr.w	r2, r3, #1
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a8:	f003 0310 	and.w	r3, r3, #16
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f040 8150 	bne.w	8002552 <HAL_ADC_Init+0x3ce>
 80022b2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f040 814b 	bne.w	8002552 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f040 8143 	bne.w	8002552 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80022d4:	f043 0202 	orr.w	r2, r3, #2
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022e4:	d004      	beq.n	80022f0 <HAL_ADC_Init+0x16c>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a6a      	ldr	r2, [pc, #424]	@ (8002494 <HAL_ADC_Init+0x310>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d101      	bne.n	80022f4 <HAL_ADC_Init+0x170>
 80022f0:	4b69      	ldr	r3, [pc, #420]	@ (8002498 <HAL_ADC_Init+0x314>)
 80022f2:	e000      	b.n	80022f6 <HAL_ADC_Init+0x172>
 80022f4:	4b69      	ldr	r3, [pc, #420]	@ (800249c <HAL_ADC_Init+0x318>)
 80022f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002300:	d102      	bne.n	8002308 <HAL_ADC_Init+0x184>
 8002302:	4b64      	ldr	r3, [pc, #400]	@ (8002494 <HAL_ADC_Init+0x310>)
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	e01a      	b.n	800233e <HAL_ADC_Init+0x1ba>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a61      	ldr	r2, [pc, #388]	@ (8002494 <HAL_ADC_Init+0x310>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d103      	bne.n	800231a <HAL_ADC_Init+0x196>
 8002312:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	e011      	b.n	800233e <HAL_ADC_Init+0x1ba>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a60      	ldr	r2, [pc, #384]	@ (80024a0 <HAL_ADC_Init+0x31c>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d102      	bne.n	800232a <HAL_ADC_Init+0x1a6>
 8002324:	4b5f      	ldr	r3, [pc, #380]	@ (80024a4 <HAL_ADC_Init+0x320>)
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	e009      	b.n	800233e <HAL_ADC_Init+0x1ba>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a5d      	ldr	r2, [pc, #372]	@ (80024a4 <HAL_ADC_Init+0x320>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d102      	bne.n	800233a <HAL_ADC_Init+0x1b6>
 8002334:	4b5a      	ldr	r3, [pc, #360]	@ (80024a0 <HAL_ADC_Init+0x31c>)
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	e001      	b.n	800233e <HAL_ADC_Init+0x1ba>
 800233a:	2300      	movs	r3, #0
 800233c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f003 0303 	and.w	r3, r3, #3
 8002348:	2b01      	cmp	r3, #1
 800234a:	d108      	bne.n	800235e <HAL_ADC_Init+0x1da>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b01      	cmp	r3, #1
 8002358:	d101      	bne.n	800235e <HAL_ADC_Init+0x1da>
 800235a:	2301      	movs	r3, #1
 800235c:	e000      	b.n	8002360 <HAL_ADC_Init+0x1dc>
 800235e:	2300      	movs	r3, #0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d11c      	bne.n	800239e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002364:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002366:	2b00      	cmp	r3, #0
 8002368:	d010      	beq.n	800238c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f003 0303 	and.w	r3, r3, #3
 8002372:	2b01      	cmp	r3, #1
 8002374:	d107      	bne.n	8002386 <HAL_ADC_Init+0x202>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b01      	cmp	r3, #1
 8002380:	d101      	bne.n	8002386 <HAL_ADC_Init+0x202>
 8002382:	2301      	movs	r3, #1
 8002384:	e000      	b.n	8002388 <HAL_ADC_Init+0x204>
 8002386:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002388:	2b00      	cmp	r3, #0
 800238a:	d108      	bne.n	800239e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800238c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	431a      	orrs	r2, r3
 800239a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800239c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	7e5b      	ldrb	r3, [r3, #25]
 80023a2:	035b      	lsls	r3, r3, #13
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80023a8:	2a01      	cmp	r2, #1
 80023aa:	d002      	beq.n	80023b2 <HAL_ADC_Init+0x22e>
 80023ac:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80023b0:	e000      	b.n	80023b4 <HAL_ADC_Init+0x230>
 80023b2:	2200      	movs	r2, #0
 80023b4:	431a      	orrs	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	431a      	orrs	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80023c4:	4313      	orrs	r3, r2
 80023c6:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d11b      	bne.n	800240a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	7e5b      	ldrb	r3, [r3, #25]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d109      	bne.n	80023ee <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023de:	3b01      	subs	r3, #1
 80023e0:	045a      	lsls	r2, r3, #17
 80023e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80023e4:	4313      	orrs	r3, r2
 80023e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023ea:	663b      	str	r3, [r7, #96]	@ 0x60
 80023ec:	e00d      	b.n	800240a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80023f6:	f043 0220 	orr.w	r2, r3, #32
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002402:	f043 0201 	orr.w	r2, r3, #1
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800240e:	2b01      	cmp	r3, #1
 8002410:	d054      	beq.n	80024bc <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a22      	ldr	r2, [pc, #136]	@ (80024a0 <HAL_ADC_Init+0x31c>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d004      	beq.n	8002426 <HAL_ADC_Init+0x2a2>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a20      	ldr	r2, [pc, #128]	@ (80024a4 <HAL_ADC_Init+0x320>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d140      	bne.n	80024a8 <HAL_ADC_Init+0x324>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800242a:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 800242e:	d02a      	beq.n	8002486 <HAL_ADC_Init+0x302>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002434:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002438:	d022      	beq.n	8002480 <HAL_ADC_Init+0x2fc>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800243e:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8002442:	d01a      	beq.n	800247a <HAL_ADC_Init+0x2f6>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002448:	f5b3 5f8a 	cmp.w	r3, #4416	@ 0x1140
 800244c:	d012      	beq.n	8002474 <HAL_ADC_Init+0x2f0>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002452:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 8002456:	d00a      	beq.n	800246e <HAL_ADC_Init+0x2ea>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800245c:	f5b3 5f86 	cmp.w	r3, #4288	@ 0x10c0
 8002460:	d002      	beq.n	8002468 <HAL_ADC_Init+0x2e4>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002466:	e023      	b.n	80024b0 <HAL_ADC_Init+0x32c>
 8002468:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800246c:	e020      	b.n	80024b0 <HAL_ADC_Init+0x32c>
 800246e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002472:	e01d      	b.n	80024b0 <HAL_ADC_Init+0x32c>
 8002474:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8002478:	e01a      	b.n	80024b0 <HAL_ADC_Init+0x32c>
 800247a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800247e:	e017      	b.n	80024b0 <HAL_ADC_Init+0x32c>
 8002480:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8002484:	e014      	b.n	80024b0 <HAL_ADC_Init+0x32c>
 8002486:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 800248a:	e011      	b.n	80024b0 <HAL_ADC_Init+0x32c>
 800248c:	20000000 	.word	0x20000000
 8002490:	431bde83 	.word	0x431bde83
 8002494:	50000100 	.word	0x50000100
 8002498:	50000300 	.word	0x50000300
 800249c:	50000700 	.word	0x50000700
 80024a0:	50000400 	.word	0x50000400
 80024a4:	50000500 	.word	0x50000500
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80024b4:	4313      	orrs	r3, r2
 80024b6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80024b8:	4313      	orrs	r3, r2
 80024ba:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 030c 	and.w	r3, r3, #12
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d114      	bne.n	80024f4 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	6812      	ldr	r2, [r2, #0]
 80024d4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80024d8:	f023 0302 	bic.w	r3, r3, #2
 80024dc:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	7e1b      	ldrb	r3, [r3, #24]
 80024e2:	039a      	lsls	r2, r3, #14
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	4313      	orrs	r3, r2
 80024ee:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80024f0:	4313      	orrs	r3, r2
 80024f2:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68da      	ldr	r2, [r3, #12]
 80024fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002574 <HAL_ADC_Init+0x3f0>)
 80024fc:	4013      	ands	r3, r2
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	6812      	ldr	r2, [r2, #0]
 8002502:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002504:	430b      	orrs	r3, r1
 8002506:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d10c      	bne.n	800252a <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002516:	f023 010f 	bic.w	r1, r3, #15
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	69db      	ldr	r3, [r3, #28]
 800251e:	1e5a      	subs	r2, r3, #1
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	430a      	orrs	r2, r1
 8002526:	631a      	str	r2, [r3, #48]	@ 0x30
 8002528:	e007      	b.n	800253a <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 020f 	bic.w	r2, r2, #15
 8002538:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002544:	f023 0303 	bic.w	r3, r3, #3
 8002548:	f043 0201 	orr.w	r2, r3, #1
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002550:	e00a      	b.n	8002568 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002556:	f023 0312 	bic.w	r3, r3, #18
 800255a:	f043 0210 	orr.w	r2, r3, #16
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002562:	2301      	movs	r3, #1
 8002564:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002568:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800256c:	4618      	mov	r0, r3
 800256e:	3768      	adds	r7, #104	@ 0x68
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	fff0c007 	.word	0xfff0c007

08002578 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002580:	2300      	movs	r3, #0
 8002582:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 0304 	and.w	r3, r3, #4
 800258e:	2b00      	cmp	r3, #0
 8002590:	f040 80f9 	bne.w	8002786 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800259a:	2b01      	cmp	r3, #1
 800259c:	d101      	bne.n	80025a2 <HAL_ADC_Start+0x2a>
 800259e:	2302      	movs	r3, #2
 80025a0:	e0f4      	b.n	800278c <HAL_ADC_Start+0x214>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2201      	movs	r2, #1
 80025a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 fe1c 	bl	80031e8 <ADC_Enable>
 80025b0:	4603      	mov	r3, r0
 80025b2:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80025b4:	7bfb      	ldrb	r3, [r7, #15]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f040 80e0 	bne.w	800277c <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80025c4:	f023 0301 	bic.w	r3, r3, #1
 80025c8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025d8:	d004      	beq.n	80025e4 <HAL_ADC_Start+0x6c>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a6d      	ldr	r2, [pc, #436]	@ (8002794 <HAL_ADC_Start+0x21c>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d106      	bne.n	80025f2 <HAL_ADC_Start+0x7a>
 80025e4:	4b6c      	ldr	r3, [pc, #432]	@ (8002798 <HAL_ADC_Start+0x220>)
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f003 031f 	and.w	r3, r3, #31
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d010      	beq.n	8002612 <HAL_ADC_Start+0x9a>
 80025f0:	e005      	b.n	80025fe <HAL_ADC_Start+0x86>
 80025f2:	4b6a      	ldr	r3, [pc, #424]	@ (800279c <HAL_ADC_Start+0x224>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 031f 	and.w	r3, r3, #31
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d009      	beq.n	8002612 <HAL_ADC_Start+0x9a>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002606:	d004      	beq.n	8002612 <HAL_ADC_Start+0x9a>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a64      	ldr	r2, [pc, #400]	@ (80027a0 <HAL_ADC_Start+0x228>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d115      	bne.n	800263e <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002616:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d036      	beq.n	800269a <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002630:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002634:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800263c:	e02d      	b.n	800269a <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002642:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002652:	d004      	beq.n	800265e <HAL_ADC_Start+0xe6>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a4e      	ldr	r2, [pc, #312]	@ (8002794 <HAL_ADC_Start+0x21c>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d10a      	bne.n	8002674 <HAL_ADC_Start+0xfc>
 800265e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002668:	2b00      	cmp	r3, #0
 800266a:	bf14      	ite	ne
 800266c:	2301      	movne	r3, #1
 800266e:	2300      	moveq	r3, #0
 8002670:	b2db      	uxtb	r3, r3
 8002672:	e008      	b.n	8002686 <HAL_ADC_Start+0x10e>
 8002674:	4b4a      	ldr	r3, [pc, #296]	@ (80027a0 <HAL_ADC_Start+0x228>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800267c:	2b00      	cmp	r3, #0
 800267e:	bf14      	ite	ne
 8002680:	2301      	movne	r3, #1
 8002682:	2300      	moveq	r3, #0
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d007      	beq.n	800269a <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002692:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026a6:	d106      	bne.n	80026b6 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ac:	f023 0206 	bic.w	r2, r3, #6
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	645a      	str	r2, [r3, #68]	@ 0x44
 80026b4:	e002      	b.n	80026bc <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	221c      	movs	r2, #28
 80026ca:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026d4:	d004      	beq.n	80026e0 <HAL_ADC_Start+0x168>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a2e      	ldr	r2, [pc, #184]	@ (8002794 <HAL_ADC_Start+0x21c>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d106      	bne.n	80026ee <HAL_ADC_Start+0x176>
 80026e0:	4b2d      	ldr	r3, [pc, #180]	@ (8002798 <HAL_ADC_Start+0x220>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f003 031f 	and.w	r3, r3, #31
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d03e      	beq.n	800276a <HAL_ADC_Start+0x1f2>
 80026ec:	e005      	b.n	80026fa <HAL_ADC_Start+0x182>
 80026ee:	4b2b      	ldr	r3, [pc, #172]	@ (800279c <HAL_ADC_Start+0x224>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 031f 	and.w	r3, r3, #31
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d037      	beq.n	800276a <HAL_ADC_Start+0x1f2>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002702:	d004      	beq.n	800270e <HAL_ADC_Start+0x196>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a22      	ldr	r2, [pc, #136]	@ (8002794 <HAL_ADC_Start+0x21c>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d106      	bne.n	800271c <HAL_ADC_Start+0x1a4>
 800270e:	4b22      	ldr	r3, [pc, #136]	@ (8002798 <HAL_ADC_Start+0x220>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 031f 	and.w	r3, r3, #31
 8002716:	2b05      	cmp	r3, #5
 8002718:	d027      	beq.n	800276a <HAL_ADC_Start+0x1f2>
 800271a:	e005      	b.n	8002728 <HAL_ADC_Start+0x1b0>
 800271c:	4b1f      	ldr	r3, [pc, #124]	@ (800279c <HAL_ADC_Start+0x224>)
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f003 031f 	and.w	r3, r3, #31
 8002724:	2b05      	cmp	r3, #5
 8002726:	d020      	beq.n	800276a <HAL_ADC_Start+0x1f2>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002730:	d004      	beq.n	800273c <HAL_ADC_Start+0x1c4>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a17      	ldr	r2, [pc, #92]	@ (8002794 <HAL_ADC_Start+0x21c>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d106      	bne.n	800274a <HAL_ADC_Start+0x1d2>
 800273c:	4b16      	ldr	r3, [pc, #88]	@ (8002798 <HAL_ADC_Start+0x220>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f003 031f 	and.w	r3, r3, #31
 8002744:	2b09      	cmp	r3, #9
 8002746:	d010      	beq.n	800276a <HAL_ADC_Start+0x1f2>
 8002748:	e005      	b.n	8002756 <HAL_ADC_Start+0x1de>
 800274a:	4b14      	ldr	r3, [pc, #80]	@ (800279c <HAL_ADC_Start+0x224>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f003 031f 	and.w	r3, r3, #31
 8002752:	2b09      	cmp	r3, #9
 8002754:	d009      	beq.n	800276a <HAL_ADC_Start+0x1f2>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800275e:	d004      	beq.n	800276a <HAL_ADC_Start+0x1f2>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a0e      	ldr	r2, [pc, #56]	@ (80027a0 <HAL_ADC_Start+0x228>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d10f      	bne.n	800278a <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f042 0204 	orr.w	r2, r2, #4
 8002778:	609a      	str	r2, [r3, #8]
 800277a:	e006      	b.n	800278a <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002784:	e001      	b.n	800278a <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002786:	2302      	movs	r3, #2
 8002788:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800278a:	7bfb      	ldrb	r3, [r7, #15]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	50000100 	.word	0x50000100
 8002798:	50000300 	.word	0x50000300
 800279c:	50000700 	.word	0x50000700
 80027a0:	50000400 	.word	0x50000400

080027a4 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027ac:	2300      	movs	r3, #0
 80027ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d101      	bne.n	80027be <HAL_ADC_Stop+0x1a>
 80027ba:	2302      	movs	r3, #2
 80027bc:	e023      	b.n	8002806 <HAL_ADC_Stop+0x62>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2201      	movs	r2, #1
 80027c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80027c6:	216c      	movs	r1, #108	@ 0x6c
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f000 fdd7 	bl	800337c <ADC_ConversionStop>
 80027ce:	4603      	mov	r3, r0
 80027d0:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80027d2:	7bfb      	ldrb	r3, [r7, #15]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d111      	bne.n	80027fc <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 fd69 	bl	80032b0 <ADC_Disable>
 80027de:	4603      	mov	r3, r0
 80027e0:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80027e2:	7bfb      	ldrb	r3, [r7, #15]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d109      	bne.n	80027fc <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ec:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80027f0:	f023 0301 	bic.w	r3, r3, #1
 80027f4:	f043 0201 	orr.w	r2, r3, #1
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002804:	7bfb      	ldrb	r3, [r7, #15]
}
 8002806:	4618      	mov	r0, r3
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
	...

08002810 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800281a:	2300      	movs	r3, #0
 800281c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	2b08      	cmp	r3, #8
 8002824:	d102      	bne.n	800282c <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002826:	2308      	movs	r3, #8
 8002828:	617b      	str	r3, [r7, #20]
 800282a:	e03a      	b.n	80028a2 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002834:	d004      	beq.n	8002840 <HAL_ADC_PollForConversion+0x30>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a72      	ldr	r2, [pc, #456]	@ (8002a04 <HAL_ADC_PollForConversion+0x1f4>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d101      	bne.n	8002844 <HAL_ADC_PollForConversion+0x34>
 8002840:	4b71      	ldr	r3, [pc, #452]	@ (8002a08 <HAL_ADC_PollForConversion+0x1f8>)
 8002842:	e000      	b.n	8002846 <HAL_ADC_PollForConversion+0x36>
 8002844:	4b71      	ldr	r3, [pc, #452]	@ (8002a0c <HAL_ADC_PollForConversion+0x1fc>)
 8002846:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f003 031f 	and.w	r3, r3, #31
 8002850:	2b00      	cmp	r3, #0
 8002852:	d112      	bne.n	800287a <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b01      	cmp	r3, #1
 8002860:	d11d      	bne.n	800289e <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002866:	f043 0220 	orr.w	r2, r3, #32
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e0bf      	b.n	80029fa <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00b      	beq.n	800289e <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288a:	f043 0220 	orr.w	r2, r3, #32
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e0ad      	b.n	80029fa <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800289e:	230c      	movs	r3, #12
 80028a0:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028aa:	d004      	beq.n	80028b6 <HAL_ADC_PollForConversion+0xa6>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a54      	ldr	r2, [pc, #336]	@ (8002a04 <HAL_ADC_PollForConversion+0x1f4>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d106      	bne.n	80028c4 <HAL_ADC_PollForConversion+0xb4>
 80028b6:	4b54      	ldr	r3, [pc, #336]	@ (8002a08 <HAL_ADC_PollForConversion+0x1f8>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 031f 	and.w	r3, r3, #31
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d010      	beq.n	80028e4 <HAL_ADC_PollForConversion+0xd4>
 80028c2:	e005      	b.n	80028d0 <HAL_ADC_PollForConversion+0xc0>
 80028c4:	4b51      	ldr	r3, [pc, #324]	@ (8002a0c <HAL_ADC_PollForConversion+0x1fc>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f003 031f 	and.w	r3, r3, #31
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d009      	beq.n	80028e4 <HAL_ADC_PollForConversion+0xd4>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028d8:	d004      	beq.n	80028e4 <HAL_ADC_PollForConversion+0xd4>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a4c      	ldr	r2, [pc, #304]	@ (8002a10 <HAL_ADC_PollForConversion+0x200>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d104      	bne.n	80028ee <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	613b      	str	r3, [r7, #16]
 80028ec:	e00f      	b.n	800290e <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028f6:	d004      	beq.n	8002902 <HAL_ADC_PollForConversion+0xf2>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a41      	ldr	r2, [pc, #260]	@ (8002a04 <HAL_ADC_PollForConversion+0x1f4>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d102      	bne.n	8002908 <HAL_ADC_PollForConversion+0xf8>
 8002902:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002906:	e000      	b.n	800290a <HAL_ADC_PollForConversion+0xfa>
 8002908:	4b41      	ldr	r3, [pc, #260]	@ (8002a10 <HAL_ADC_PollForConversion+0x200>)
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 800290e:	f7ff fc09 	bl	8002124 <HAL_GetTick>
 8002912:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002914:	e021      	b.n	800295a <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800291c:	d01d      	beq.n	800295a <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d007      	beq.n	8002934 <HAL_ADC_PollForConversion+0x124>
 8002924:	f7ff fbfe 	bl	8002124 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	429a      	cmp	r2, r3
 8002932:	d212      	bcs.n	800295a <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	4013      	ands	r3, r2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d10b      	bne.n	800295a <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002946:	f043 0204 	orr.w	r2, r3, #4
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e04f      	b.n	80029fa <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	4013      	ands	r3, r2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d0d6      	beq.n	8002916 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800297e:	2b00      	cmp	r3, #0
 8002980:	d131      	bne.n	80029e6 <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002988:	2b00      	cmp	r3, #0
 800298a:	d12c      	bne.n	80029e6 <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0308 	and.w	r3, r3, #8
 8002996:	2b08      	cmp	r3, #8
 8002998:	d125      	bne.n	80029e6 <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d112      	bne.n	80029ce <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d112      	bne.n	80029e6 <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c4:	f043 0201 	orr.w	r2, r3, #1
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	641a      	str	r2, [r3, #64]	@ 0x40
 80029cc:	e00b      	b.n	80029e6 <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d2:	f043 0220 	orr.w	r2, r3, #32
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029de:	f043 0201 	orr.w	r2, r3, #1
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d103      	bne.n	80029f8 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	697a      	ldr	r2, [r7, #20]
 80029f6:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3718      	adds	r7, #24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	50000100 	.word	0x50000100
 8002a08:	50000300 	.word	0x50000300
 8002a0c:	50000700 	.word	0x50000700
 8002a10:	50000400 	.word	0x50000400

08002a14 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
	...

08002a30 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b09b      	sub	sp, #108	@ 0x6c
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002a40:	2300      	movs	r3, #0
 8002a42:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d101      	bne.n	8002a52 <HAL_ADC_ConfigChannel+0x22>
 8002a4e:	2302      	movs	r3, #2
 8002a50:	e2c8      	b.n	8002fe4 <HAL_ADC_ConfigChannel+0x5b4>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f040 82ac 	bne.w	8002fc2 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2b04      	cmp	r3, #4
 8002a70:	d81c      	bhi.n	8002aac <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	4413      	add	r3, r2
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	461a      	mov	r2, r3
 8002a86:	231f      	movs	r3, #31
 8002a88:	4093      	lsls	r3, r2
 8002a8a:	43db      	mvns	r3, r3
 8002a8c:	4019      	ands	r1, r3
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	6818      	ldr	r0, [r3, #0]
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	4613      	mov	r3, r2
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	4413      	add	r3, r2
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	fa00 f203 	lsl.w	r2, r0, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	631a      	str	r2, [r3, #48]	@ 0x30
 8002aaa:	e063      	b.n	8002b74 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	2b09      	cmp	r3, #9
 8002ab2:	d81e      	bhi.n	8002af2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685a      	ldr	r2, [r3, #4]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	4413      	add	r3, r2
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	3b1e      	subs	r3, #30
 8002ac8:	221f      	movs	r2, #31
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	43db      	mvns	r3, r3
 8002ad0:	4019      	ands	r1, r3
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	6818      	ldr	r0, [r3, #0]
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685a      	ldr	r2, [r3, #4]
 8002ada:	4613      	mov	r3, r2
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	4413      	add	r3, r2
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	3b1e      	subs	r3, #30
 8002ae4:	fa00 f203 	lsl.w	r2, r0, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	635a      	str	r2, [r3, #52]	@ 0x34
 8002af0:	e040      	b.n	8002b74 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2b0e      	cmp	r3, #14
 8002af8:	d81e      	bhi.n	8002b38 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685a      	ldr	r2, [r3, #4]
 8002b04:	4613      	mov	r3, r2
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	4413      	add	r3, r2
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	3b3c      	subs	r3, #60	@ 0x3c
 8002b0e:	221f      	movs	r2, #31
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	43db      	mvns	r3, r3
 8002b16:	4019      	ands	r1, r3
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	6818      	ldr	r0, [r3, #0]
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	4613      	mov	r3, r2
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	4413      	add	r3, r2
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	3b3c      	subs	r3, #60	@ 0x3c
 8002b2a:	fa00 f203 	lsl.w	r2, r0, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	430a      	orrs	r2, r1
 8002b34:	639a      	str	r2, [r3, #56]	@ 0x38
 8002b36:	e01d      	b.n	8002b74 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	4613      	mov	r3, r2
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	4413      	add	r3, r2
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	3b5a      	subs	r3, #90	@ 0x5a
 8002b4c:	221f      	movs	r2, #31
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	43db      	mvns	r3, r3
 8002b54:	4019      	ands	r1, r3
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	6818      	ldr	r0, [r3, #0]
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	4413      	add	r3, r2
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	3b5a      	subs	r3, #90	@ 0x5a
 8002b68:	fa00 f203 	lsl.w	r2, r0, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	430a      	orrs	r2, r1
 8002b72:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f003 030c 	and.w	r3, r3, #12
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f040 80e5 	bne.w	8002d4e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2b09      	cmp	r3, #9
 8002b8a:	d91c      	bls.n	8002bc6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6999      	ldr	r1, [r3, #24]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	4613      	mov	r3, r2
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	4413      	add	r3, r2
 8002b9c:	3b1e      	subs	r3, #30
 8002b9e:	2207      	movs	r2, #7
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	4019      	ands	r1, r3
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	6898      	ldr	r0, [r3, #8]
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	4413      	add	r3, r2
 8002bb6:	3b1e      	subs	r3, #30
 8002bb8:	fa00 f203 	lsl.w	r2, r0, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	619a      	str	r2, [r3, #24]
 8002bc4:	e019      	b.n	8002bfa <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	6959      	ldr	r1, [r3, #20]
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	4413      	add	r3, r2
 8002bd6:	2207      	movs	r2, #7
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	4019      	ands	r1, r3
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	6898      	ldr	r0, [r3, #8]
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	4613      	mov	r3, r2
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	4413      	add	r3, r2
 8002bee:	fa00 f203 	lsl.w	r2, r0, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	695a      	ldr	r2, [r3, #20]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	08db      	lsrs	r3, r3, #3
 8002c06:	f003 0303 	and.w	r3, r3, #3
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	3b01      	subs	r3, #1
 8002c18:	2b03      	cmp	r3, #3
 8002c1a:	d84f      	bhi.n	8002cbc <HAL_ADC_ConfigChannel+0x28c>
 8002c1c:	a201      	add	r2, pc, #4	@ (adr r2, 8002c24 <HAL_ADC_ConfigChannel+0x1f4>)
 8002c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c22:	bf00      	nop
 8002c24:	08002c35 	.word	0x08002c35
 8002c28:	08002c57 	.word	0x08002c57
 8002c2c:	08002c79 	.word	0x08002c79
 8002c30:	08002c9b 	.word	0x08002c9b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002c3a:	4b99      	ldr	r3, [pc, #612]	@ (8002ea0 <HAL_ADC_ConfigChannel+0x470>)
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	6812      	ldr	r2, [r2, #0]
 8002c42:	0691      	lsls	r1, r2, #26
 8002c44:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002c46:	430a      	orrs	r2, r1
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002c52:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002c54:	e07b      	b.n	8002d4e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002c5c:	4b90      	ldr	r3, [pc, #576]	@ (8002ea0 <HAL_ADC_ConfigChannel+0x470>)
 8002c5e:	4013      	ands	r3, r2
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	6812      	ldr	r2, [r2, #0]
 8002c64:	0691      	lsls	r1, r2, #26
 8002c66:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002c74:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002c76:	e06a      	b.n	8002d4e <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002c7e:	4b88      	ldr	r3, [pc, #544]	@ (8002ea0 <HAL_ADC_ConfigChannel+0x470>)
 8002c80:	4013      	ands	r3, r2
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	6812      	ldr	r2, [r2, #0]
 8002c86:	0691      	lsls	r1, r2, #26
 8002c88:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	431a      	orrs	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002c96:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002c98:	e059      	b.n	8002d4e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002ca0:	4b7f      	ldr	r3, [pc, #508]	@ (8002ea0 <HAL_ADC_ConfigChannel+0x470>)
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	6812      	ldr	r2, [r2, #0]
 8002ca8:	0691      	lsls	r1, r2, #26
 8002caa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002cac:	430a      	orrs	r2, r1
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002cb8:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002cba:	e048      	b.n	8002d4e <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cc2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	069b      	lsls	r3, r3, #26
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d107      	bne.n	8002ce0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002cde:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ce6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	069b      	lsls	r3, r3, #26
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d107      	bne.n	8002d04 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002d02:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d0a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	069b      	lsls	r3, r3, #26
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d107      	bne.n	8002d28 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002d26:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d2e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	069b      	lsls	r3, r3, #26
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d107      	bne.n	8002d4c <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002d4a:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8002d4c:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f003 0303 	and.w	r3, r3, #3
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d108      	bne.n	8002d6e <HAL_ADC_ConfigChannel+0x33e>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d101      	bne.n	8002d6e <HAL_ADC_ConfigChannel+0x33e>
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e000      	b.n	8002d70 <HAL_ADC_ConfigChannel+0x340>
 8002d6e:	2300      	movs	r3, #0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f040 8131 	bne.w	8002fd8 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d00f      	beq.n	8002d9e <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	43da      	mvns	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	400a      	ands	r2, r1
 8002d98:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8002d9c:	e049      	b.n	8002e32 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2201      	movs	r2, #1
 8002dac:	409a      	lsls	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	430a      	orrs	r2, r1
 8002db4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2b09      	cmp	r3, #9
 8002dbe:	d91c      	bls.n	8002dfa <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6999      	ldr	r1, [r3, #24]
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	4413      	add	r3, r2
 8002dd0:	3b1b      	subs	r3, #27
 8002dd2:	2207      	movs	r2, #7
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	4019      	ands	r1, r3
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	6898      	ldr	r0, [r3, #8]
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	4613      	mov	r3, r2
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	4413      	add	r3, r2
 8002dea:	3b1b      	subs	r3, #27
 8002dec:	fa00 f203 	lsl.w	r2, r0, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	619a      	str	r2, [r3, #24]
 8002df8:	e01b      	b.n	8002e32 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6959      	ldr	r1, [r3, #20]
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	1c5a      	adds	r2, r3, #1
 8002e06:	4613      	mov	r3, r2
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	4413      	add	r3, r2
 8002e0c:	2207      	movs	r2, #7
 8002e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e12:	43db      	mvns	r3, r3
 8002e14:	4019      	ands	r1, r3
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	6898      	ldr	r0, [r3, #8]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	1c5a      	adds	r2, r3, #1
 8002e20:	4613      	mov	r3, r2
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	4413      	add	r3, r2
 8002e26:	fa00 f203 	lsl.w	r2, r0, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e3a:	d004      	beq.n	8002e46 <HAL_ADC_ConfigChannel+0x416>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a18      	ldr	r2, [pc, #96]	@ (8002ea4 <HAL_ADC_ConfigChannel+0x474>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d101      	bne.n	8002e4a <HAL_ADC_ConfigChannel+0x41a>
 8002e46:	4b18      	ldr	r3, [pc, #96]	@ (8002ea8 <HAL_ADC_ConfigChannel+0x478>)
 8002e48:	e000      	b.n	8002e4c <HAL_ADC_ConfigChannel+0x41c>
 8002e4a:	4b18      	ldr	r3, [pc, #96]	@ (8002eac <HAL_ADC_ConfigChannel+0x47c>)
 8002e4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2b10      	cmp	r3, #16
 8002e54:	d105      	bne.n	8002e62 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002e56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d015      	beq.n	8002e8e <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002e66:	2b11      	cmp	r3, #17
 8002e68:	d105      	bne.n	8002e76 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002e6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00b      	beq.n	8002e8e <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002e7a:	2b12      	cmp	r3, #18
 8002e7c:	f040 80ac 	bne.w	8002fd8 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002e80:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f040 80a5 	bne.w	8002fd8 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e96:	d10b      	bne.n	8002eb0 <HAL_ADC_ConfigChannel+0x480>
 8002e98:	4b02      	ldr	r3, [pc, #8]	@ (8002ea4 <HAL_ADC_ConfigChannel+0x474>)
 8002e9a:	60fb      	str	r3, [r7, #12]
 8002e9c:	e023      	b.n	8002ee6 <HAL_ADC_ConfigChannel+0x4b6>
 8002e9e:	bf00      	nop
 8002ea0:	83fff000 	.word	0x83fff000
 8002ea4:	50000100 	.word	0x50000100
 8002ea8:	50000300 	.word	0x50000300
 8002eac:	50000700 	.word	0x50000700
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a4e      	ldr	r2, [pc, #312]	@ (8002ff0 <HAL_ADC_ConfigChannel+0x5c0>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d103      	bne.n	8002ec2 <HAL_ADC_ConfigChannel+0x492>
 8002eba:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002ebe:	60fb      	str	r3, [r7, #12]
 8002ec0:	e011      	b.n	8002ee6 <HAL_ADC_ConfigChannel+0x4b6>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a4b      	ldr	r2, [pc, #300]	@ (8002ff4 <HAL_ADC_ConfigChannel+0x5c4>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d102      	bne.n	8002ed2 <HAL_ADC_ConfigChannel+0x4a2>
 8002ecc:	4b4a      	ldr	r3, [pc, #296]	@ (8002ff8 <HAL_ADC_ConfigChannel+0x5c8>)
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	e009      	b.n	8002ee6 <HAL_ADC_ConfigChannel+0x4b6>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a48      	ldr	r2, [pc, #288]	@ (8002ff8 <HAL_ADC_ConfigChannel+0x5c8>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d102      	bne.n	8002ee2 <HAL_ADC_ConfigChannel+0x4b2>
 8002edc:	4b45      	ldr	r3, [pc, #276]	@ (8002ff4 <HAL_ADC_ConfigChannel+0x5c4>)
 8002ede:	60fb      	str	r3, [r7, #12]
 8002ee0:	e001      	b.n	8002ee6 <HAL_ADC_ConfigChannel+0x4b6>
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f003 0303 	and.w	r3, r3, #3
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d108      	bne.n	8002f06 <HAL_ADC_ConfigChannel+0x4d6>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d101      	bne.n	8002f06 <HAL_ADC_ConfigChannel+0x4d6>
 8002f02:	2301      	movs	r3, #1
 8002f04:	e000      	b.n	8002f08 <HAL_ADC_ConfigChannel+0x4d8>
 8002f06:	2300      	movs	r3, #0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d150      	bne.n	8002fae <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002f0c:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d010      	beq.n	8002f34 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f003 0303 	and.w	r3, r3, #3
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d107      	bne.n	8002f2e <HAL_ADC_ConfigChannel+0x4fe>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d101      	bne.n	8002f2e <HAL_ADC_ConfigChannel+0x4fe>
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e000      	b.n	8002f30 <HAL_ADC_ConfigChannel+0x500>
 8002f2e:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d13c      	bne.n	8002fae <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2b10      	cmp	r3, #16
 8002f3a:	d11d      	bne.n	8002f78 <HAL_ADC_ConfigChannel+0x548>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f44:	d118      	bne.n	8002f78 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002f46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002f4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f50:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f52:	4b2a      	ldr	r3, [pc, #168]	@ (8002ffc <HAL_ADC_ConfigChannel+0x5cc>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a2a      	ldr	r2, [pc, #168]	@ (8003000 <HAL_ADC_ConfigChannel+0x5d0>)
 8002f58:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5c:	0c9a      	lsrs	r2, r3, #18
 8002f5e:	4613      	mov	r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	4413      	add	r3, r2
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f68:	e002      	b.n	8002f70 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1f9      	bne.n	8002f6a <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002f76:	e02e      	b.n	8002fd6 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2b11      	cmp	r3, #17
 8002f7e:	d10b      	bne.n	8002f98 <HAL_ADC_ConfigChannel+0x568>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f88:	d106      	bne.n	8002f98 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002f8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8002f92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f94:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002f96:	e01e      	b.n	8002fd6 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2b12      	cmp	r3, #18
 8002f9e:	d11a      	bne.n	8002fd6 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002fa0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002fa8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002faa:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002fac:	e013      	b.n	8002fd6 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb2:	f043 0220 	orr.w	r2, r3, #32
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002fc0:	e00a      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc6:	f043 0220 	orr.w	r2, r3, #32
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002fd4:	e000      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002fd6:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002fe0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	376c      	adds	r7, #108	@ 0x6c
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr
 8002ff0:	50000100 	.word	0x50000100
 8002ff4:	50000400 	.word	0x50000400
 8002ff8:	50000500 	.word	0x50000500
 8002ffc:	20000000 	.word	0x20000000
 8003000:	431bde83 	.word	0x431bde83

08003004 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003004:	b480      	push	{r7}
 8003006:	b099      	sub	sp, #100	@ 0x64
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800300e:	2300      	movs	r3, #0
 8003010:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800301c:	d102      	bne.n	8003024 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800301e:	4b6d      	ldr	r3, [pc, #436]	@ (80031d4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003020:	60bb      	str	r3, [r7, #8]
 8003022:	e01a      	b.n	800305a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a6a      	ldr	r2, [pc, #424]	@ (80031d4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d103      	bne.n	8003036 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800302e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003032:	60bb      	str	r3, [r7, #8]
 8003034:	e011      	b.n	800305a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a67      	ldr	r2, [pc, #412]	@ (80031d8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d102      	bne.n	8003046 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003040:	4b66      	ldr	r3, [pc, #408]	@ (80031dc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003042:	60bb      	str	r3, [r7, #8]
 8003044:	e009      	b.n	800305a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a64      	ldr	r2, [pc, #400]	@ (80031dc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d102      	bne.n	8003056 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003050:	4b61      	ldr	r3, [pc, #388]	@ (80031d8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003052:	60bb      	str	r3, [r7, #8]
 8003054:	e001      	b.n	800305a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003056:	2300      	movs	r3, #0
 8003058:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d101      	bne.n	8003064 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e0b0      	b.n	80031c6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800306a:	2b01      	cmp	r3, #1
 800306c:	d101      	bne.n	8003072 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800306e:	2302      	movs	r3, #2
 8003070:	e0a9      	b.n	80031c6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f003 0304 	and.w	r3, r3, #4
 8003084:	2b00      	cmp	r3, #0
 8003086:	f040 808d 	bne.w	80031a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f003 0304 	and.w	r3, r3, #4
 8003092:	2b00      	cmp	r3, #0
 8003094:	f040 8086 	bne.w	80031a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030a0:	d004      	beq.n	80030ac <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a4b      	ldr	r2, [pc, #300]	@ (80031d4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d101      	bne.n	80030b0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80030ac:	4b4c      	ldr	r3, [pc, #304]	@ (80031e0 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80030ae:	e000      	b.n	80030b2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80030b0:	4b4c      	ldr	r3, [pc, #304]	@ (80031e4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80030b2:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d040      	beq.n	800313e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80030bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	6859      	ldr	r1, [r3, #4]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80030ce:	035b      	lsls	r3, r3, #13
 80030d0:	430b      	orrs	r3, r1
 80030d2:	431a      	orrs	r2, r3
 80030d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80030d6:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f003 0303 	and.w	r3, r3, #3
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d108      	bne.n	80030f8 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d101      	bne.n	80030f8 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80030f4:	2301      	movs	r3, #1
 80030f6:	e000      	b.n	80030fa <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80030f8:	2300      	movs	r3, #0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d15c      	bne.n	80031b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f003 0303 	and.w	r3, r3, #3
 8003106:	2b01      	cmp	r3, #1
 8003108:	d107      	bne.n	800311a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	2b01      	cmp	r3, #1
 8003114:	d101      	bne.n	800311a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003116:	2301      	movs	r3, #1
 8003118:	e000      	b.n	800311c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800311a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800311c:	2b00      	cmp	r3, #0
 800311e:	d14b      	bne.n	80031b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003120:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003128:	f023 030f 	bic.w	r3, r3, #15
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	6811      	ldr	r1, [r2, #0]
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	6892      	ldr	r2, [r2, #8]
 8003134:	430a      	orrs	r2, r1
 8003136:	431a      	orrs	r2, r3
 8003138:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800313a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800313c:	e03c      	b.n	80031b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800313e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003146:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003148:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f003 0303 	and.w	r3, r3, #3
 8003154:	2b01      	cmp	r3, #1
 8003156:	d108      	bne.n	800316a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b01      	cmp	r3, #1
 8003164:	d101      	bne.n	800316a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003166:	2301      	movs	r3, #1
 8003168:	e000      	b.n	800316c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800316a:	2300      	movs	r3, #0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d123      	bne.n	80031b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f003 0303 	and.w	r3, r3, #3
 8003178:	2b01      	cmp	r3, #1
 800317a:	d107      	bne.n	800318c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b01      	cmp	r3, #1
 8003186:	d101      	bne.n	800318c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003188:	2301      	movs	r3, #1
 800318a:	e000      	b.n	800318e <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 800318c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800318e:	2b00      	cmp	r3, #0
 8003190:	d112      	bne.n	80031b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8003192:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800319a:	f023 030f 	bic.w	r3, r3, #15
 800319e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80031a0:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80031a2:	e009      	b.n	80031b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a8:	f043 0220 	orr.w	r2, r3, #32
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80031b6:	e000      	b.n	80031ba <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80031b8:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80031c2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 80031c6:	4618      	mov	r0, r3
 80031c8:	3764      	adds	r7, #100	@ 0x64
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	50000100 	.word	0x50000100
 80031d8:	50000400 	.word	0x50000400
 80031dc:	50000500 	.word	0x50000500
 80031e0:	50000300 	.word	0x50000300
 80031e4:	50000700 	.word	0x50000700

080031e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031f0:	2300      	movs	r3, #0
 80031f2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 0303 	and.w	r3, r3, #3
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d108      	bne.n	8003214 <ADC_Enable+0x2c>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b01      	cmp	r3, #1
 800320e:	d101      	bne.n	8003214 <ADC_Enable+0x2c>
 8003210:	2301      	movs	r3, #1
 8003212:	e000      	b.n	8003216 <ADC_Enable+0x2e>
 8003214:	2300      	movs	r3, #0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d143      	bne.n	80032a2 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	4b22      	ldr	r3, [pc, #136]	@ (80032ac <ADC_Enable+0xc4>)
 8003222:	4013      	ands	r3, r2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00d      	beq.n	8003244 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322c:	f043 0210 	orr.w	r2, r3, #16
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003238:	f043 0201 	orr.w	r2, r3, #1
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e02f      	b.n	80032a4 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689a      	ldr	r2, [r3, #8]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f042 0201 	orr.w	r2, r2, #1
 8003252:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003254:	f7fe ff66 	bl	8002124 <HAL_GetTick>
 8003258:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800325a:	e01b      	b.n	8003294 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800325c:	f7fe ff62 	bl	8002124 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d914      	bls.n	8003294 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	2b01      	cmp	r3, #1
 8003276:	d00d      	beq.n	8003294 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327c:	f043 0210 	orr.w	r2, r3, #16
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003288:	f043 0201 	orr.w	r2, r3, #1
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e007      	b.n	80032a4 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d1dc      	bne.n	800325c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	8000003f 	.word	0x8000003f

080032b0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032b8:	2300      	movs	r3, #0
 80032ba:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f003 0303 	and.w	r3, r3, #3
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d108      	bne.n	80032dc <ADC_Disable+0x2c>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d101      	bne.n	80032dc <ADC_Disable+0x2c>
 80032d8:	2301      	movs	r3, #1
 80032da:	e000      	b.n	80032de <ADC_Disable+0x2e>
 80032dc:	2300      	movs	r3, #0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d047      	beq.n	8003372 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f003 030d 	and.w	r3, r3, #13
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d10f      	bne.n	8003310 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	689a      	ldr	r2, [r3, #8]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f042 0202 	orr.w	r2, r2, #2
 80032fe:	609a      	str	r2, [r3, #8]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2203      	movs	r2, #3
 8003306:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003308:	f7fe ff0c 	bl	8002124 <HAL_GetTick>
 800330c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800330e:	e029      	b.n	8003364 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003314:	f043 0210 	orr.w	r2, r3, #16
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003320:	f043 0201 	orr.w	r2, r3, #1
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e023      	b.n	8003374 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800332c:	f7fe fefa 	bl	8002124 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b02      	cmp	r3, #2
 8003338:	d914      	bls.n	8003364 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	2b01      	cmp	r3, #1
 8003346:	d10d      	bne.n	8003364 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334c:	f043 0210 	orr.w	r2, r3, #16
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003358:	f043 0201 	orr.w	r2, r3, #1
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e007      	b.n	8003374 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b01      	cmp	r3, #1
 8003370:	d0dc      	beq.n	800332c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b086      	sub	sp, #24
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8003386:	2300      	movs	r3, #0
 8003388:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800338a:	2300      	movs	r3, #0
 800338c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800338e:	2300      	movs	r3, #0
 8003390:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f003 030c 	and.w	r3, r3, #12
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 809b 	beq.w	80034d8 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80033b0:	d12a      	bne.n	8003408 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d126      	bne.n	8003408 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d122      	bne.n	8003408 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 80033c2:	230c      	movs	r3, #12
 80033c4:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80033c6:	e014      	b.n	80033f2 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	4a46      	ldr	r2, [pc, #280]	@ (80034e4 <ADC_ConversionStop+0x168>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d90d      	bls.n	80033ec <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d4:	f043 0210 	orr.w	r2, r3, #16
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033e0:	f043 0201 	orr.w	r2, r3, #1
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	645a      	str	r2, [r3, #68]	@ 0x44
          
          return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e076      	b.n	80034da <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	3301      	adds	r3, #1
 80033f0:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033fc:	2b40      	cmp	r3, #64	@ 0x40
 80033fe:	d1e3      	bne.n	80033c8 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2240      	movs	r2, #64	@ 0x40
 8003406:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	2b60      	cmp	r3, #96	@ 0x60
 800340c:	d015      	beq.n	800343a <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f003 0304 	and.w	r3, r3, #4
 8003418:	2b04      	cmp	r3, #4
 800341a:	d10e      	bne.n	800343a <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003426:	2b00      	cmp	r3, #0
 8003428:	d107      	bne.n	800343a <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	689a      	ldr	r2, [r3, #8]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f042 0210 	orr.w	r2, r2, #16
 8003438:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	2b0c      	cmp	r3, #12
 800343e:	d015      	beq.n	800346c <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f003 0308 	and.w	r3, r3, #8
 800344a:	2b08      	cmp	r3, #8
 800344c:	d10e      	bne.n	800346c <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8003458:	2b00      	cmp	r3, #0
 800345a:	d107      	bne.n	800346c <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689a      	ldr	r2, [r3, #8]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f042 0220 	orr.w	r2, r2, #32
 800346a:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	2b60      	cmp	r3, #96	@ 0x60
 8003470:	d005      	beq.n	800347e <ADC_ConversionStop+0x102>
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	2b6c      	cmp	r3, #108	@ 0x6c
 8003476:	d105      	bne.n	8003484 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003478:	230c      	movs	r3, #12
 800347a:	617b      	str	r3, [r7, #20]
        break;
 800347c:	e005      	b.n	800348a <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800347e:	2308      	movs	r3, #8
 8003480:	617b      	str	r3, [r7, #20]
        break;
 8003482:	e002      	b.n	800348a <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003484:	2304      	movs	r3, #4
 8003486:	617b      	str	r3, [r7, #20]
        break;
 8003488:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800348a:	f7fe fe4b 	bl	8002124 <HAL_GetTick>
 800348e:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003490:	e01b      	b.n	80034ca <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003492:	f7fe fe47 	bl	8002124 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b0b      	cmp	r3, #11
 800349e:	d914      	bls.n	80034ca <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	689a      	ldr	r2, [r3, #8]
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	4013      	ands	r3, r2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00d      	beq.n	80034ca <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b2:	f043 0210 	orr.w	r2, r3, #16
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034be:	f043 0201 	orr.w	r2, r3, #1
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	645a      	str	r2, [r3, #68]	@ 0x44
        
        return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e007      	b.n	80034da <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	4013      	ands	r3, r2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1dc      	bne.n	8003492 <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3718      	adds	r7, #24
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	000993ff 	.word	0x000993ff

080034e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f003 0307 	and.w	r3, r3, #7
 80034f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034f8:	4b0c      	ldr	r3, [pc, #48]	@ (800352c <__NVIC_SetPriorityGrouping+0x44>)
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034fe:	68ba      	ldr	r2, [r7, #8]
 8003500:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003504:	4013      	ands	r3, r2
 8003506:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003510:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003514:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003518:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800351a:	4a04      	ldr	r2, [pc, #16]	@ (800352c <__NVIC_SetPriorityGrouping+0x44>)
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	60d3      	str	r3, [r2, #12]
}
 8003520:	bf00      	nop
 8003522:	3714      	adds	r7, #20
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr
 800352c:	e000ed00 	.word	0xe000ed00

08003530 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003534:	4b04      	ldr	r3, [pc, #16]	@ (8003548 <__NVIC_GetPriorityGrouping+0x18>)
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	0a1b      	lsrs	r3, r3, #8
 800353a:	f003 0307 	and.w	r3, r3, #7
}
 800353e:	4618      	mov	r0, r3
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr
 8003548:	e000ed00 	.word	0xe000ed00

0800354c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	4603      	mov	r3, r0
 8003554:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800355a:	2b00      	cmp	r3, #0
 800355c:	db0b      	blt.n	8003576 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800355e:	79fb      	ldrb	r3, [r7, #7]
 8003560:	f003 021f 	and.w	r2, r3, #31
 8003564:	4907      	ldr	r1, [pc, #28]	@ (8003584 <__NVIC_EnableIRQ+0x38>)
 8003566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800356a:	095b      	lsrs	r3, r3, #5
 800356c:	2001      	movs	r0, #1
 800356e:	fa00 f202 	lsl.w	r2, r0, r2
 8003572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003576:	bf00      	nop
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	e000e100 	.word	0xe000e100

08003588 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	4603      	mov	r3, r0
 8003590:	6039      	str	r1, [r7, #0]
 8003592:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003598:	2b00      	cmp	r3, #0
 800359a:	db0a      	blt.n	80035b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	b2da      	uxtb	r2, r3
 80035a0:	490c      	ldr	r1, [pc, #48]	@ (80035d4 <__NVIC_SetPriority+0x4c>)
 80035a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a6:	0112      	lsls	r2, r2, #4
 80035a8:	b2d2      	uxtb	r2, r2
 80035aa:	440b      	add	r3, r1
 80035ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035b0:	e00a      	b.n	80035c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	4908      	ldr	r1, [pc, #32]	@ (80035d8 <__NVIC_SetPriority+0x50>)
 80035b8:	79fb      	ldrb	r3, [r7, #7]
 80035ba:	f003 030f 	and.w	r3, r3, #15
 80035be:	3b04      	subs	r3, #4
 80035c0:	0112      	lsls	r2, r2, #4
 80035c2:	b2d2      	uxtb	r2, r2
 80035c4:	440b      	add	r3, r1
 80035c6:	761a      	strb	r2, [r3, #24]
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	e000e100 	.word	0xe000e100
 80035d8:	e000ed00 	.word	0xe000ed00

080035dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035dc:	b480      	push	{r7}
 80035de:	b089      	sub	sp, #36	@ 0x24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f003 0307 	and.w	r3, r3, #7
 80035ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	f1c3 0307 	rsb	r3, r3, #7
 80035f6:	2b04      	cmp	r3, #4
 80035f8:	bf28      	it	cs
 80035fa:	2304      	movcs	r3, #4
 80035fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	3304      	adds	r3, #4
 8003602:	2b06      	cmp	r3, #6
 8003604:	d902      	bls.n	800360c <NVIC_EncodePriority+0x30>
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	3b03      	subs	r3, #3
 800360a:	e000      	b.n	800360e <NVIC_EncodePriority+0x32>
 800360c:	2300      	movs	r3, #0
 800360e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003610:	f04f 32ff 	mov.w	r2, #4294967295
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	fa02 f303 	lsl.w	r3, r2, r3
 800361a:	43da      	mvns	r2, r3
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	401a      	ands	r2, r3
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003624:	f04f 31ff 	mov.w	r1, #4294967295
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	fa01 f303 	lsl.w	r3, r1, r3
 800362e:	43d9      	mvns	r1, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003634:	4313      	orrs	r3, r2
         );
}
 8003636:	4618      	mov	r0, r3
 8003638:	3724      	adds	r7, #36	@ 0x24
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
	...

08003644 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	3b01      	subs	r3, #1
 8003650:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003654:	d301      	bcc.n	800365a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003656:	2301      	movs	r3, #1
 8003658:	e00f      	b.n	800367a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800365a:	4a0a      	ldr	r2, [pc, #40]	@ (8003684 <SysTick_Config+0x40>)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	3b01      	subs	r3, #1
 8003660:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003662:	210f      	movs	r1, #15
 8003664:	f04f 30ff 	mov.w	r0, #4294967295
 8003668:	f7ff ff8e 	bl	8003588 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800366c:	4b05      	ldr	r3, [pc, #20]	@ (8003684 <SysTick_Config+0x40>)
 800366e:	2200      	movs	r2, #0
 8003670:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003672:	4b04      	ldr	r3, [pc, #16]	@ (8003684 <SysTick_Config+0x40>)
 8003674:	2207      	movs	r2, #7
 8003676:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3708      	adds	r7, #8
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	e000e010 	.word	0xe000e010

08003688 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f7ff ff29 	bl	80034e8 <__NVIC_SetPriorityGrouping>
}
 8003696:	bf00      	nop
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b086      	sub	sp, #24
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	4603      	mov	r3, r0
 80036a6:	60b9      	str	r1, [r7, #8]
 80036a8:	607a      	str	r2, [r7, #4]
 80036aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036ac:	2300      	movs	r3, #0
 80036ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036b0:	f7ff ff3e 	bl	8003530 <__NVIC_GetPriorityGrouping>
 80036b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	68b9      	ldr	r1, [r7, #8]
 80036ba:	6978      	ldr	r0, [r7, #20]
 80036bc:	f7ff ff8e 	bl	80035dc <NVIC_EncodePriority>
 80036c0:	4602      	mov	r2, r0
 80036c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036c6:	4611      	mov	r1, r2
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7ff ff5d 	bl	8003588 <__NVIC_SetPriority>
}
 80036ce:	bf00      	nop
 80036d0:	3718      	adds	r7, #24
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b082      	sub	sp, #8
 80036da:	af00      	add	r7, sp, #0
 80036dc:	4603      	mov	r3, r0
 80036de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff ff31 	bl	800354c <__NVIC_EnableIRQ>
}
 80036ea:	bf00      	nop
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b082      	sub	sp, #8
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7ff ffa2 	bl	8003644 <SysTick_Config>
 8003700:	4603      	mov	r3, r0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3708      	adds	r7, #8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
	...

0800370c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800370c:	b480      	push	{r7}
 800370e:	b087      	sub	sp, #28
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003716:	2300      	movs	r3, #0
 8003718:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800371a:	e160      	b.n	80039de <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	2101      	movs	r1, #1
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	fa01 f303 	lsl.w	r3, r1, r3
 8003728:	4013      	ands	r3, r2
 800372a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2b00      	cmp	r3, #0
 8003730:	f000 8152 	beq.w	80039d8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f003 0303 	and.w	r3, r3, #3
 800373c:	2b01      	cmp	r3, #1
 800373e:	d005      	beq.n	800374c <HAL_GPIO_Init+0x40>
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f003 0303 	and.w	r3, r3, #3
 8003748:	2b02      	cmp	r3, #2
 800374a:	d130      	bne.n	80037ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	2203      	movs	r2, #3
 8003758:	fa02 f303 	lsl.w	r3, r2, r3
 800375c:	43db      	mvns	r3, r3
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	4013      	ands	r3, r2
 8003762:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	68da      	ldr	r2, [r3, #12]
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	fa02 f303 	lsl.w	r3, r2, r3
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	4313      	orrs	r3, r2
 8003774:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003782:	2201      	movs	r2, #1
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	fa02 f303 	lsl.w	r3, r2, r3
 800378a:	43db      	mvns	r3, r3
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	4013      	ands	r3, r2
 8003790:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	091b      	lsrs	r3, r3, #4
 8003798:	f003 0201 	and.w	r2, r3, #1
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	fa02 f303 	lsl.w	r3, r2, r3
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f003 0303 	and.w	r3, r3, #3
 80037b6:	2b03      	cmp	r3, #3
 80037b8:	d017      	beq.n	80037ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	2203      	movs	r2, #3
 80037c6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ca:	43db      	mvns	r3, r3
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	4013      	ands	r3, r2
 80037d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	689a      	ldr	r2, [r3, #8]
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	fa02 f303 	lsl.w	r3, r2, r3
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f003 0303 	and.w	r3, r3, #3
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d123      	bne.n	800383e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	08da      	lsrs	r2, r3, #3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	3208      	adds	r2, #8
 80037fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003802:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	f003 0307 	and.w	r3, r3, #7
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	220f      	movs	r2, #15
 800380e:	fa02 f303 	lsl.w	r3, r2, r3
 8003812:	43db      	mvns	r3, r3
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	4013      	ands	r3, r2
 8003818:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	691a      	ldr	r2, [r3, #16]
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	f003 0307 	and.w	r3, r3, #7
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	fa02 f303 	lsl.w	r3, r2, r3
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	4313      	orrs	r3, r2
 800382e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	08da      	lsrs	r2, r3, #3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	3208      	adds	r2, #8
 8003838:	6939      	ldr	r1, [r7, #16]
 800383a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	2203      	movs	r2, #3
 800384a:	fa02 f303 	lsl.w	r3, r2, r3
 800384e:	43db      	mvns	r3, r3
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	4013      	ands	r3, r2
 8003854:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f003 0203 	and.w	r2, r3, #3
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	fa02 f303 	lsl.w	r3, r2, r3
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	4313      	orrs	r3, r2
 800386a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800387a:	2b00      	cmp	r3, #0
 800387c:	f000 80ac 	beq.w	80039d8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003880:	4b5e      	ldr	r3, [pc, #376]	@ (80039fc <HAL_GPIO_Init+0x2f0>)
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	4a5d      	ldr	r2, [pc, #372]	@ (80039fc <HAL_GPIO_Init+0x2f0>)
 8003886:	f043 0301 	orr.w	r3, r3, #1
 800388a:	6193      	str	r3, [r2, #24]
 800388c:	4b5b      	ldr	r3, [pc, #364]	@ (80039fc <HAL_GPIO_Init+0x2f0>)
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	f003 0301 	and.w	r3, r3, #1
 8003894:	60bb      	str	r3, [r7, #8]
 8003896:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003898:	4a59      	ldr	r2, [pc, #356]	@ (8003a00 <HAL_GPIO_Init+0x2f4>)
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	089b      	lsrs	r3, r3, #2
 800389e:	3302      	adds	r3, #2
 80038a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	f003 0303 	and.w	r3, r3, #3
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	220f      	movs	r2, #15
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	43db      	mvns	r3, r3
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	4013      	ands	r3, r2
 80038ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80038c2:	d025      	beq.n	8003910 <HAL_GPIO_Init+0x204>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a4f      	ldr	r2, [pc, #316]	@ (8003a04 <HAL_GPIO_Init+0x2f8>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d01f      	beq.n	800390c <HAL_GPIO_Init+0x200>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a4e      	ldr	r2, [pc, #312]	@ (8003a08 <HAL_GPIO_Init+0x2fc>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d019      	beq.n	8003908 <HAL_GPIO_Init+0x1fc>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a4d      	ldr	r2, [pc, #308]	@ (8003a0c <HAL_GPIO_Init+0x300>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d013      	beq.n	8003904 <HAL_GPIO_Init+0x1f8>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a4c      	ldr	r2, [pc, #304]	@ (8003a10 <HAL_GPIO_Init+0x304>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d00d      	beq.n	8003900 <HAL_GPIO_Init+0x1f4>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a4b      	ldr	r2, [pc, #300]	@ (8003a14 <HAL_GPIO_Init+0x308>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d007      	beq.n	80038fc <HAL_GPIO_Init+0x1f0>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a4a      	ldr	r2, [pc, #296]	@ (8003a18 <HAL_GPIO_Init+0x30c>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d101      	bne.n	80038f8 <HAL_GPIO_Init+0x1ec>
 80038f4:	2306      	movs	r3, #6
 80038f6:	e00c      	b.n	8003912 <HAL_GPIO_Init+0x206>
 80038f8:	2307      	movs	r3, #7
 80038fa:	e00a      	b.n	8003912 <HAL_GPIO_Init+0x206>
 80038fc:	2305      	movs	r3, #5
 80038fe:	e008      	b.n	8003912 <HAL_GPIO_Init+0x206>
 8003900:	2304      	movs	r3, #4
 8003902:	e006      	b.n	8003912 <HAL_GPIO_Init+0x206>
 8003904:	2303      	movs	r3, #3
 8003906:	e004      	b.n	8003912 <HAL_GPIO_Init+0x206>
 8003908:	2302      	movs	r3, #2
 800390a:	e002      	b.n	8003912 <HAL_GPIO_Init+0x206>
 800390c:	2301      	movs	r3, #1
 800390e:	e000      	b.n	8003912 <HAL_GPIO_Init+0x206>
 8003910:	2300      	movs	r3, #0
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	f002 0203 	and.w	r2, r2, #3
 8003918:	0092      	lsls	r2, r2, #2
 800391a:	4093      	lsls	r3, r2
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	4313      	orrs	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003922:	4937      	ldr	r1, [pc, #220]	@ (8003a00 <HAL_GPIO_Init+0x2f4>)
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	089b      	lsrs	r3, r3, #2
 8003928:	3302      	adds	r3, #2
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003930:	4b3a      	ldr	r3, [pc, #232]	@ (8003a1c <HAL_GPIO_Init+0x310>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	43db      	mvns	r3, r3
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	4013      	ands	r3, r2
 800393e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d003      	beq.n	8003954 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	4313      	orrs	r3, r2
 8003952:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003954:	4a31      	ldr	r2, [pc, #196]	@ (8003a1c <HAL_GPIO_Init+0x310>)
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800395a:	4b30      	ldr	r3, [pc, #192]	@ (8003a1c <HAL_GPIO_Init+0x310>)
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	43db      	mvns	r3, r3
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	4013      	ands	r3, r2
 8003968:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d003      	beq.n	800397e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	4313      	orrs	r3, r2
 800397c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800397e:	4a27      	ldr	r2, [pc, #156]	@ (8003a1c <HAL_GPIO_Init+0x310>)
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003984:	4b25      	ldr	r3, [pc, #148]	@ (8003a1c <HAL_GPIO_Init+0x310>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	43db      	mvns	r3, r3
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	4013      	ands	r3, r2
 8003992:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d003      	beq.n	80039a8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80039a8:	4a1c      	ldr	r2, [pc, #112]	@ (8003a1c <HAL_GPIO_Init+0x310>)
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039ae:	4b1b      	ldr	r3, [pc, #108]	@ (8003a1c <HAL_GPIO_Init+0x310>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	43db      	mvns	r3, r3
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	4013      	ands	r3, r2
 80039bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d003      	beq.n	80039d2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80039d2:	4a12      	ldr	r2, [pc, #72]	@ (8003a1c <HAL_GPIO_Init+0x310>)
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	3301      	adds	r3, #1
 80039dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	fa22 f303 	lsr.w	r3, r2, r3
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f47f ae97 	bne.w	800371c <HAL_GPIO_Init+0x10>
  }
}
 80039ee:	bf00      	nop
 80039f0:	bf00      	nop
 80039f2:	371c      	adds	r7, #28
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr
 80039fc:	40021000 	.word	0x40021000
 8003a00:	40010000 	.word	0x40010000
 8003a04:	48000400 	.word	0x48000400
 8003a08:	48000800 	.word	0x48000800
 8003a0c:	48000c00 	.word	0x48000c00
 8003a10:	48001000 	.word	0x48001000
 8003a14:	48001400 	.word	0x48001400
 8003a18:	48001800 	.word	0x48001800
 8003a1c:	40010400 	.word	0x40010400

08003a20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	460b      	mov	r3, r1
 8003a2a:	807b      	strh	r3, [r7, #2]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a30:	787b      	ldrb	r3, [r7, #1]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d003      	beq.n	8003a3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a36:	887a      	ldrh	r2, [r7, #2]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a3c:	e002      	b.n	8003a44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a3e:	887a      	ldrh	r2, [r7, #2]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	4603      	mov	r3, r0
 8003a58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003a5a:	4b08      	ldr	r3, [pc, #32]	@ (8003a7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a5c:	695a      	ldr	r2, [r3, #20]
 8003a5e:	88fb      	ldrh	r3, [r7, #6]
 8003a60:	4013      	ands	r3, r2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d006      	beq.n	8003a74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a66:	4a05      	ldr	r2, [pc, #20]	@ (8003a7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a68:	88fb      	ldrh	r3, [r7, #6]
 8003a6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a6c:	88fb      	ldrh	r3, [r7, #6]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7fd fe34 	bl	80016dc <HAL_GPIO_EXTI_Callback>
  }
}
 8003a74:	bf00      	nop
 8003a76:	3708      	adds	r7, #8
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	40010400 	.word	0x40010400

08003a80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e08d      	b.n	8003bae <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d106      	bne.n	8003aac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f7fd fae8 	bl	800107c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2224      	movs	r2, #36	@ 0x24
 8003ab0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 0201 	bic.w	r2, r2, #1
 8003ac2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003ad0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	689a      	ldr	r2, [r3, #8]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ae0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d107      	bne.n	8003afa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	689a      	ldr	r2, [r3, #8]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003af6:	609a      	str	r2, [r3, #8]
 8003af8:	e006      	b.n	8003b08 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	689a      	ldr	r2, [r3, #8]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003b06:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d108      	bne.n	8003b22 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	685a      	ldr	r2, [r3, #4]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b1e:	605a      	str	r2, [r3, #4]
 8003b20:	e007      	b.n	8003b32 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	685a      	ldr	r2, [r3, #4]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b30:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	6812      	ldr	r2, [r2, #0]
 8003b3c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003b40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b44:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68da      	ldr	r2, [r3, #12]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b54:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	691a      	ldr	r2, [r3, #16]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	69d9      	ldr	r1, [r3, #28]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a1a      	ldr	r2, [r3, #32]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f042 0201 	orr.w	r2, r2, #1
 8003b8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2220      	movs	r2, #32
 8003b9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3708      	adds	r7, #8
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
	...

08003bb8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b088      	sub	sp, #32
 8003bbc:	af02      	add	r7, sp, #8
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	607a      	str	r2, [r7, #4]
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	817b      	strh	r3, [r7, #10]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b20      	cmp	r3, #32
 8003bd6:	f040 80fd 	bne.w	8003dd4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d101      	bne.n	8003be8 <HAL_I2C_Master_Transmit+0x30>
 8003be4:	2302      	movs	r3, #2
 8003be6:	e0f6      	b.n	8003dd6 <HAL_I2C_Master_Transmit+0x21e>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003bf0:	f7fe fa98 	bl	8002124 <HAL_GetTick>
 8003bf4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	9300      	str	r3, [sp, #0]
 8003bfa:	2319      	movs	r3, #25
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f000 fa0a 	bl	800401c <I2C_WaitOnFlagUntilTimeout>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e0e1      	b.n	8003dd6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2221      	movs	r2, #33	@ 0x21
 8003c16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2210      	movs	r2, #16
 8003c1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	893a      	ldrh	r2, [r7, #8]
 8003c32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	2bff      	cmp	r3, #255	@ 0xff
 8003c42:	d906      	bls.n	8003c52 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	22ff      	movs	r2, #255	@ 0xff
 8003c48:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003c4a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003c4e:	617b      	str	r3, [r7, #20]
 8003c50:	e007      	b.n	8003c62 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003c5c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c60:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d024      	beq.n	8003cb4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c6e:	781a      	ldrb	r2, [r3, #0]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7a:	1c5a      	adds	r2, r3, #1
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	3b01      	subs	r3, #1
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c92:	3b01      	subs	r3, #1
 8003c94:	b29a      	uxth	r2, r3
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	b2da      	uxtb	r2, r3
 8003ca4:	8979      	ldrh	r1, [r7, #10]
 8003ca6:	4b4e      	ldr	r3, [pc, #312]	@ (8003de0 <HAL_I2C_Master_Transmit+0x228>)
 8003ca8:	9300      	str	r3, [sp, #0]
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f000 fc05 	bl	80044bc <I2C_TransferConfig>
 8003cb2:	e066      	b.n	8003d82 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cb8:	b2da      	uxtb	r2, r3
 8003cba:	8979      	ldrh	r1, [r7, #10]
 8003cbc:	4b48      	ldr	r3, [pc, #288]	@ (8003de0 <HAL_I2C_Master_Transmit+0x228>)
 8003cbe:	9300      	str	r3, [sp, #0]
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f000 fbfa 	bl	80044bc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003cc8:	e05b      	b.n	8003d82 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	6a39      	ldr	r1, [r7, #32]
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f000 f9fd 	bl	80040ce <I2C_WaitOnTXISFlagUntilTimeout>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e07b      	b.n	8003dd6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce2:	781a      	ldrb	r2, [r3, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cee:	1c5a      	adds	r2, r3, #1
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	b29a      	uxth	r2, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d06:	3b01      	subs	r3, #1
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d034      	beq.n	8003d82 <HAL_I2C_Master_Transmit+0x1ca>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d130      	bne.n	8003d82 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	9300      	str	r3, [sp, #0]
 8003d24:	6a3b      	ldr	r3, [r7, #32]
 8003d26:	2200      	movs	r2, #0
 8003d28:	2180      	movs	r1, #128	@ 0x80
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f000 f976 	bl	800401c <I2C_WaitOnFlagUntilTimeout>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e04d      	b.n	8003dd6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	2bff      	cmp	r3, #255	@ 0xff
 8003d42:	d90e      	bls.n	8003d62 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	22ff      	movs	r2, #255	@ 0xff
 8003d48:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d4e:	b2da      	uxtb	r2, r3
 8003d50:	8979      	ldrh	r1, [r7, #10]
 8003d52:	2300      	movs	r3, #0
 8003d54:	9300      	str	r3, [sp, #0]
 8003d56:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003d5a:	68f8      	ldr	r0, [r7, #12]
 8003d5c:	f000 fbae 	bl	80044bc <I2C_TransferConfig>
 8003d60:	e00f      	b.n	8003d82 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d70:	b2da      	uxtb	r2, r3
 8003d72:	8979      	ldrh	r1, [r7, #10]
 8003d74:	2300      	movs	r3, #0
 8003d76:	9300      	str	r3, [sp, #0]
 8003d78:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f000 fb9d 	bl	80044bc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d19e      	bne.n	8003cca <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d8c:	693a      	ldr	r2, [r7, #16]
 8003d8e:	6a39      	ldr	r1, [r7, #32]
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	f000 f9e3 	bl	800415c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d001      	beq.n	8003da0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e01a      	b.n	8003dd6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2220      	movs	r2, #32
 8003da6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6859      	ldr	r1, [r3, #4]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	4b0c      	ldr	r3, [pc, #48]	@ (8003de4 <HAL_I2C_Master_Transmit+0x22c>)
 8003db4:	400b      	ands	r3, r1
 8003db6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2220      	movs	r2, #32
 8003dbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	e000      	b.n	8003dd6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003dd4:	2302      	movs	r3, #2
  }
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3718      	adds	r7, #24
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	80002000 	.word	0x80002000
 8003de4:	fe00e800 	.word	0xfe00e800

08003de8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b088      	sub	sp, #32
 8003dec:	af02      	add	r7, sp, #8
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	607a      	str	r2, [r7, #4]
 8003df2:	461a      	mov	r2, r3
 8003df4:	460b      	mov	r3, r1
 8003df6:	817b      	strh	r3, [r7, #10]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b20      	cmp	r3, #32
 8003e06:	f040 80db 	bne.w	8003fc0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d101      	bne.n	8003e18 <HAL_I2C_Master_Receive+0x30>
 8003e14:	2302      	movs	r3, #2
 8003e16:	e0d4      	b.n	8003fc2 <HAL_I2C_Master_Receive+0x1da>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e20:	f7fe f980 	bl	8002124 <HAL_GetTick>
 8003e24:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	9300      	str	r3, [sp, #0]
 8003e2a:	2319      	movs	r3, #25
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f000 f8f2 	bl	800401c <I2C_WaitOnFlagUntilTimeout>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e0bf      	b.n	8003fc2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2222      	movs	r2, #34	@ 0x22
 8003e46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2210      	movs	r2, #16
 8003e4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	893a      	ldrh	r2, [r7, #8]
 8003e62:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	2bff      	cmp	r3, #255	@ 0xff
 8003e72:	d90e      	bls.n	8003e92 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2201      	movs	r2, #1
 8003e78:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e7e:	b2da      	uxtb	r2, r3
 8003e80:	8979      	ldrh	r1, [r7, #10]
 8003e82:	4b52      	ldr	r3, [pc, #328]	@ (8003fcc <HAL_I2C_Master_Receive+0x1e4>)
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f000 fb16 	bl	80044bc <I2C_TransferConfig>
 8003e90:	e06d      	b.n	8003f6e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ea0:	b2da      	uxtb	r2, r3
 8003ea2:	8979      	ldrh	r1, [r7, #10]
 8003ea4:	4b49      	ldr	r3, [pc, #292]	@ (8003fcc <HAL_I2C_Master_Receive+0x1e4>)
 8003ea6:	9300      	str	r3, [sp, #0]
 8003ea8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f000 fb05 	bl	80044bc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003eb2:	e05c      	b.n	8003f6e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	6a39      	ldr	r1, [r7, #32]
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f000 f993 	bl	80041e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e07c      	b.n	8003fc2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed2:	b2d2      	uxtb	r2, r2
 8003ed4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eda:	1c5a      	adds	r2, r3, #1
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	b29a      	uxth	r2, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d034      	beq.n	8003f6e <HAL_I2C_Master_Receive+0x186>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d130      	bne.n	8003f6e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	9300      	str	r3, [sp, #0]
 8003f10:	6a3b      	ldr	r3, [r7, #32]
 8003f12:	2200      	movs	r2, #0
 8003f14:	2180      	movs	r1, #128	@ 0x80
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f000 f880 	bl	800401c <I2C_WaitOnFlagUntilTimeout>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d001      	beq.n	8003f26 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e04d      	b.n	8003fc2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	2bff      	cmp	r3, #255	@ 0xff
 8003f2e:	d90e      	bls.n	8003f4e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	22ff      	movs	r2, #255	@ 0xff
 8003f34:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f3a:	b2da      	uxtb	r2, r3
 8003f3c:	8979      	ldrh	r1, [r7, #10]
 8003f3e:	2300      	movs	r3, #0
 8003f40:	9300      	str	r3, [sp, #0]
 8003f42:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f000 fab8 	bl	80044bc <I2C_TransferConfig>
 8003f4c:	e00f      	b.n	8003f6e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f5c:	b2da      	uxtb	r2, r3
 8003f5e:	8979      	ldrh	r1, [r7, #10]
 8003f60:	2300      	movs	r3, #0
 8003f62:	9300      	str	r3, [sp, #0]
 8003f64:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 faa7 	bl	80044bc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d19d      	bne.n	8003eb4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	6a39      	ldr	r1, [r7, #32]
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f000 f8ed 	bl	800415c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e01a      	b.n	8003fc2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2220      	movs	r2, #32
 8003f92:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6859      	ldr	r1, [r3, #4]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	4b0c      	ldr	r3, [pc, #48]	@ (8003fd0 <HAL_I2C_Master_Receive+0x1e8>)
 8003fa0:	400b      	ands	r3, r1
 8003fa2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	e000      	b.n	8003fc2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003fc0:	2302      	movs	r3, #2
  }
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3718      	adds	r7, #24
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	80002400 	.word	0x80002400
 8003fd0:	fe00e800 	.word	0xfe00e800

08003fd4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d103      	bne.n	8003ff2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d007      	beq.n	8004010 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	699a      	ldr	r2, [r3, #24]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f042 0201 	orr.w	r2, r2, #1
 800400e:	619a      	str	r2, [r3, #24]
  }
}
 8004010:	bf00      	nop
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	603b      	str	r3, [r7, #0]
 8004028:	4613      	mov	r3, r2
 800402a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800402c:	e03b      	b.n	80040a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800402e:	69ba      	ldr	r2, [r7, #24]
 8004030:	6839      	ldr	r1, [r7, #0]
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f000 f962 	bl	80042fc <I2C_IsErrorOccurred>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d001      	beq.n	8004042 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e041      	b.n	80040c6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004048:	d02d      	beq.n	80040a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800404a:	f7fe f86b 	bl	8002124 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	683a      	ldr	r2, [r7, #0]
 8004056:	429a      	cmp	r2, r3
 8004058:	d302      	bcc.n	8004060 <I2C_WaitOnFlagUntilTimeout+0x44>
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d122      	bne.n	80040a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	699a      	ldr	r2, [r3, #24]
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	4013      	ands	r3, r2
 800406a:	68ba      	ldr	r2, [r7, #8]
 800406c:	429a      	cmp	r2, r3
 800406e:	bf0c      	ite	eq
 8004070:	2301      	moveq	r3, #1
 8004072:	2300      	movne	r3, #0
 8004074:	b2db      	uxtb	r3, r3
 8004076:	461a      	mov	r2, r3
 8004078:	79fb      	ldrb	r3, [r7, #7]
 800407a:	429a      	cmp	r2, r3
 800407c:	d113      	bne.n	80040a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004082:	f043 0220 	orr.w	r2, r3, #32
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2220      	movs	r2, #32
 800408e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e00f      	b.n	80040c6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	699a      	ldr	r2, [r3, #24]
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	4013      	ands	r3, r2
 80040b0:	68ba      	ldr	r2, [r7, #8]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	bf0c      	ite	eq
 80040b6:	2301      	moveq	r3, #1
 80040b8:	2300      	movne	r3, #0
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	461a      	mov	r2, r3
 80040be:	79fb      	ldrb	r3, [r7, #7]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d0b4      	beq.n	800402e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3710      	adds	r7, #16
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b084      	sub	sp, #16
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	60f8      	str	r0, [r7, #12]
 80040d6:	60b9      	str	r1, [r7, #8]
 80040d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80040da:	e033      	b.n	8004144 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	68b9      	ldr	r1, [r7, #8]
 80040e0:	68f8      	ldr	r0, [r7, #12]
 80040e2:	f000 f90b 	bl	80042fc <I2C_IsErrorOccurred>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d001      	beq.n	80040f0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e031      	b.n	8004154 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f6:	d025      	beq.n	8004144 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040f8:	f7fe f814 	bl	8002124 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	68ba      	ldr	r2, [r7, #8]
 8004104:	429a      	cmp	r2, r3
 8004106:	d302      	bcc.n	800410e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d11a      	bne.n	8004144 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	f003 0302 	and.w	r3, r3, #2
 8004118:	2b02      	cmp	r3, #2
 800411a:	d013      	beq.n	8004144 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004120:	f043 0220 	orr.w	r2, r3, #32
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2220      	movs	r2, #32
 800412c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e007      	b.n	8004154 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b02      	cmp	r3, #2
 8004150:	d1c4      	bne.n	80040dc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004168:	e02f      	b.n	80041ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	68b9      	ldr	r1, [r7, #8]
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f000 f8c4 	bl	80042fc <I2C_IsErrorOccurred>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d001      	beq.n	800417e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e02d      	b.n	80041da <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800417e:	f7fd ffd1 	bl	8002124 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	68ba      	ldr	r2, [r7, #8]
 800418a:	429a      	cmp	r2, r3
 800418c:	d302      	bcc.n	8004194 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d11a      	bne.n	80041ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	f003 0320 	and.w	r3, r3, #32
 800419e:	2b20      	cmp	r3, #32
 80041a0:	d013      	beq.n	80041ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041a6:	f043 0220 	orr.w	r2, r3, #32
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2220      	movs	r2, #32
 80041b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e007      	b.n	80041da <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	f003 0320 	and.w	r3, r3, #32
 80041d4:	2b20      	cmp	r3, #32
 80041d6:	d1c8      	bne.n	800416a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
	...

080041e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041f0:	2300      	movs	r3, #0
 80041f2:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80041f4:	e071      	b.n	80042da <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	68b9      	ldr	r1, [r7, #8]
 80041fa:	68f8      	ldr	r0, [r7, #12]
 80041fc:	f000 f87e 	bl	80042fc <I2C_IsErrorOccurred>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	f003 0320 	and.w	r3, r3, #32
 8004214:	2b20      	cmp	r3, #32
 8004216:	d13b      	bne.n	8004290 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8004218:	7dfb      	ldrb	r3, [r7, #23]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d138      	bne.n	8004290 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	f003 0304 	and.w	r3, r3, #4
 8004228:	2b04      	cmp	r3, #4
 800422a:	d105      	bne.n	8004238 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004230:	2b00      	cmp	r3, #0
 8004232:	d001      	beq.n	8004238 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8004234:	2300      	movs	r3, #0
 8004236:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	f003 0310 	and.w	r3, r3, #16
 8004242:	2b10      	cmp	r3, #16
 8004244:	d121      	bne.n	800428a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2210      	movs	r2, #16
 800424c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2204      	movs	r2, #4
 8004252:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2220      	movs	r2, #32
 800425a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6859      	ldr	r1, [r3, #4]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	4b24      	ldr	r3, [pc, #144]	@ (80042f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8004268:	400b      	ands	r3, r1
 800426a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2220      	movs	r2, #32
 8004270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	75fb      	strb	r3, [r7, #23]
 8004288:	e002      	b.n	8004290 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8004290:	f7fd ff48 	bl	8002124 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	68ba      	ldr	r2, [r7, #8]
 800429c:	429a      	cmp	r2, r3
 800429e:	d302      	bcc.n	80042a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d119      	bne.n	80042da <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80042a6:	7dfb      	ldrb	r3, [r7, #23]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d116      	bne.n	80042da <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	f003 0304 	and.w	r3, r3, #4
 80042b6:	2b04      	cmp	r3, #4
 80042b8:	d00f      	beq.n	80042da <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042be:	f043 0220 	orr.w	r2, r3, #32
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2220      	movs	r2, #32
 80042ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	f003 0304 	and.w	r3, r3, #4
 80042e4:	2b04      	cmp	r3, #4
 80042e6:	d002      	beq.n	80042ee <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80042e8:	7dfb      	ldrb	r3, [r7, #23]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d083      	beq.n	80041f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80042ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3718      	adds	r7, #24
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	fe00e800 	.word	0xfe00e800

080042fc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b08a      	sub	sp, #40	@ 0x28
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004308:	2300      	movs	r3, #0
 800430a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004316:	2300      	movs	r3, #0
 8004318:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	f003 0310 	and.w	r3, r3, #16
 8004324:	2b00      	cmp	r3, #0
 8004326:	d068      	beq.n	80043fa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2210      	movs	r2, #16
 800432e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004330:	e049      	b.n	80043c6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004338:	d045      	beq.n	80043c6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800433a:	f7fd fef3 	bl	8002124 <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	68ba      	ldr	r2, [r7, #8]
 8004346:	429a      	cmp	r2, r3
 8004348:	d302      	bcc.n	8004350 <I2C_IsErrorOccurred+0x54>
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d13a      	bne.n	80043c6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800435a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004362:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800436e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004372:	d121      	bne.n	80043b8 <I2C_IsErrorOccurred+0xbc>
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800437a:	d01d      	beq.n	80043b8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800437c:	7cfb      	ldrb	r3, [r7, #19]
 800437e:	2b20      	cmp	r3, #32
 8004380:	d01a      	beq.n	80043b8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	685a      	ldr	r2, [r3, #4]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004390:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004392:	f7fd fec7 	bl	8002124 <HAL_GetTick>
 8004396:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004398:	e00e      	b.n	80043b8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800439a:	f7fd fec3 	bl	8002124 <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	2b19      	cmp	r3, #25
 80043a6:	d907      	bls.n	80043b8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80043a8:	6a3b      	ldr	r3, [r7, #32]
 80043aa:	f043 0320 	orr.w	r3, r3, #32
 80043ae:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80043b6:	e006      	b.n	80043c6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	f003 0320 	and.w	r3, r3, #32
 80043c2:	2b20      	cmp	r3, #32
 80043c4:	d1e9      	bne.n	800439a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	f003 0320 	and.w	r3, r3, #32
 80043d0:	2b20      	cmp	r3, #32
 80043d2:	d003      	beq.n	80043dc <I2C_IsErrorOccurred+0xe0>
 80043d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d0aa      	beq.n	8004332 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80043dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d103      	bne.n	80043ec <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2220      	movs	r2, #32
 80043ea:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80043ec:	6a3b      	ldr	r3, [r7, #32]
 80043ee:	f043 0304 	orr.w	r3, r3, #4
 80043f2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004408:	2b00      	cmp	r3, #0
 800440a:	d00b      	beq.n	8004424 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800440c:	6a3b      	ldr	r3, [r7, #32]
 800440e:	f043 0301 	orr.w	r3, r3, #1
 8004412:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800441c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00b      	beq.n	8004446 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800442e:	6a3b      	ldr	r3, [r7, #32]
 8004430:	f043 0308 	orr.w	r3, r3, #8
 8004434:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800443e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00b      	beq.n	8004468 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004450:	6a3b      	ldr	r3, [r7, #32]
 8004452:	f043 0302 	orr.w	r3, r3, #2
 8004456:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004460:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004468:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800446c:	2b00      	cmp	r3, #0
 800446e:	d01c      	beq.n	80044aa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f7ff fdaf 	bl	8003fd4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	6859      	ldr	r1, [r3, #4]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	4b0d      	ldr	r3, [pc, #52]	@ (80044b8 <I2C_IsErrorOccurred+0x1bc>)
 8004482:	400b      	ands	r3, r1
 8004484:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800448a:	6a3b      	ldr	r3, [r7, #32]
 800448c:	431a      	orrs	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2220      	movs	r2, #32
 8004496:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80044aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3728      	adds	r7, #40	@ 0x28
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	fe00e800 	.word	0xfe00e800

080044bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80044bc:	b480      	push	{r7}
 80044be:	b087      	sub	sp, #28
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	607b      	str	r3, [r7, #4]
 80044c6:	460b      	mov	r3, r1
 80044c8:	817b      	strh	r3, [r7, #10]
 80044ca:	4613      	mov	r3, r2
 80044cc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80044ce:	897b      	ldrh	r3, [r7, #10]
 80044d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80044d4:	7a7b      	ldrb	r3, [r7, #9]
 80044d6:	041b      	lsls	r3, r3, #16
 80044d8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80044dc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80044e2:	6a3b      	ldr	r3, [r7, #32]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80044ea:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	685a      	ldr	r2, [r3, #4]
 80044f2:	6a3b      	ldr	r3, [r7, #32]
 80044f4:	0d5b      	lsrs	r3, r3, #21
 80044f6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80044fa:	4b08      	ldr	r3, [pc, #32]	@ (800451c <I2C_TransferConfig+0x60>)
 80044fc:	430b      	orrs	r3, r1
 80044fe:	43db      	mvns	r3, r3
 8004500:	ea02 0103 	and.w	r1, r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	697a      	ldr	r2, [r7, #20]
 800450a:	430a      	orrs	r2, r1
 800450c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800450e:	bf00      	nop
 8004510:	371c      	adds	r7, #28
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	03ff63ff 	.word	0x03ff63ff

08004520 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b20      	cmp	r3, #32
 8004534:	d138      	bne.n	80045a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800453c:	2b01      	cmp	r3, #1
 800453e:	d101      	bne.n	8004544 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004540:	2302      	movs	r3, #2
 8004542:	e032      	b.n	80045aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2224      	movs	r2, #36	@ 0x24
 8004550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f022 0201 	bic.w	r2, r2, #1
 8004562:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004572:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	6819      	ldr	r1, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	430a      	orrs	r2, r1
 8004582:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f042 0201 	orr.w	r2, r2, #1
 8004592:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2220      	movs	r2, #32
 8004598:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80045a4:	2300      	movs	r3, #0
 80045a6:	e000      	b.n	80045aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80045a8:	2302      	movs	r3, #2
  }
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr

080045b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80045b6:	b480      	push	{r7}
 80045b8:	b085      	sub	sp, #20
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
 80045be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	2b20      	cmp	r3, #32
 80045ca:	d139      	bne.n	8004640 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d101      	bne.n	80045da <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80045d6:	2302      	movs	r3, #2
 80045d8:	e033      	b.n	8004642 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2224      	movs	r2, #36	@ 0x24
 80045e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f022 0201 	bic.w	r2, r2, #1
 80045f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004608:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	021b      	lsls	r3, r3, #8
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	4313      	orrs	r3, r2
 8004612:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f042 0201 	orr.w	r2, r2, #1
 800462a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2220      	movs	r2, #32
 8004630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800463c:	2300      	movs	r3, #0
 800463e:	e000      	b.n	8004642 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004640:	2302      	movs	r3, #2
  }
}
 8004642:	4618      	mov	r0, r3
 8004644:	3714      	adds	r7, #20
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr

0800464e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800464e:	b580      	push	{r7, lr}
 8004650:	b084      	sub	sp, #16
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4618      	mov	r0, r3
 800465c:	f004 ffa1 	bl	80095a2 <USB_ReadInterrupts>
 8004660:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d003      	beq.n	8004674 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 f930 	bl	80048d2 <PCD_EP_ISR_Handler>

    return;
 8004672:	e0bd      	b.n	80047f0 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800467a:	2b00      	cmp	r3, #0
 800467c:	d013      	beq.n	80046a6 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004686:	b29a      	uxth	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004690:	b292      	uxth	r2, r2
 8004692:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 f8d9 	bl	800484e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800469c:	2100      	movs	r1, #0
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 f8f3 	bl	800488a <HAL_PCD_SetAddress>

    return;
 80046a4:	e0a4      	b.n	80047f0 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00c      	beq.n	80046ca <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80046c2:	b292      	uxth	r2, r2
 80046c4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80046c8:	e092      	b.n	80047f0 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00c      	beq.n	80046ee <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80046dc:	b29a      	uxth	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80046e6:	b292      	uxth	r2, r2
 80046e8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80046ec:	e080      	b.n	80047f0 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d027      	beq.n	8004748 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004700:	b29a      	uxth	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 0204 	bic.w	r2, r2, #4
 800470a:	b292      	uxth	r2, r2
 800470c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004718:	b29a      	uxth	r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f022 0208 	bic.w	r2, r2, #8
 8004722:	b292      	uxth	r2, r2
 8004724:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 f8a4 	bl	8004876 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004736:	b29a      	uxth	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004740:	b292      	uxth	r2, r2
 8004742:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004746:	e053      	b.n	80047f0 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800474e:	2b00      	cmp	r3, #0
 8004750:	d027      	beq.n	80047a2 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800475a:	b29a      	uxth	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f042 0208 	orr.w	r2, r2, #8
 8004764:	b292      	uxth	r2, r2
 8004766:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004772:	b29a      	uxth	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800477c:	b292      	uxth	r2, r2
 800477e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800478a:	b29a      	uxth	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f042 0204 	orr.w	r2, r2, #4
 8004794:	b292      	uxth	r2, r2
 8004796:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 f861 	bl	8004862 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80047a0:	e026      	b.n	80047f0 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00f      	beq.n	80047cc <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80047be:	b292      	uxth	r2, r2
 80047c0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 f838 	bl	800483a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80047ca:	e011      	b.n	80047f0 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00c      	beq.n	80047f0 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80047de:	b29a      	uxth	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80047e8:	b292      	uxth	r2, r2
 80047ea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80047ee:	bf00      	nop
  }
}
 80047f0:	3710      	adds	r7, #16
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}

080047f6 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80047f6:	b480      	push	{r7}
 80047f8:	b083      	sub	sp, #12
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
 80047fe:	460b      	mov	r3, r1
 8004800:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8004802:	bf00      	nop
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr

0800480e <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800480e:	b480      	push	{r7}
 8004810:	b083      	sub	sp, #12
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
 8004816:	460b      	mov	r3, r1
 8004818:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 800481a:	bf00      	nop
 800481c:	370c      	adds	r7, #12
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr

08004826 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8004826:	b480      	push	{r7}
 8004828:	b083      	sub	sp, #12
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 800482e:	bf00      	nop
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr

0800483a <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800483a:	b480      	push	{r7}
 800483c:	b083      	sub	sp, #12
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8004842:	bf00      	nop
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr

0800484e <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 800484e:	b480      	push	{r7}
 8004850:	b083      	sub	sp, #12
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8004856:	bf00      	nop
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8004862:	b480      	push	{r7}
 8004864:	b083      	sub	sp, #12
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 800486a:	bf00      	nop
 800486c:	370c      	adds	r7, #12
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr

08004876 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8004876:	b480      	push	{r7}
 8004878:	b083      	sub	sp, #12
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 800487e:	bf00      	nop
 8004880:	370c      	adds	r7, #12
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr

0800488a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800488a:	b580      	push	{r7, lr}
 800488c:	b082      	sub	sp, #8
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
 8004892:	460b      	mov	r3, r1
 8004894:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800489c:	2b01      	cmp	r3, #1
 800489e:	d101      	bne.n	80048a4 <HAL_PCD_SetAddress+0x1a>
 80048a0:	2302      	movs	r3, #2
 80048a2:	e012      	b.n	80048ca <HAL_PCD_SetAddress+0x40>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	78fa      	ldrb	r2, [r7, #3]
 80048b0:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	78fa      	ldrb	r2, [r7, #3]
 80048b8:	4611      	mov	r1, r2
 80048ba:	4618      	mov	r0, r3
 80048bc:	f004 fe5d 	bl	800957a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3708      	adds	r7, #8
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b096      	sub	sp, #88	@ 0x58
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80048da:	e3ad      	b.n	8005038 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80048e4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80048e8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	f003 030f 	and.w	r3, r3, #15
 80048f2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 80048f6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	f040 816f 	bne.w	8004bde <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004900:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004904:	f003 0310 	and.w	r3, r3, #16
 8004908:	2b00      	cmp	r3, #0
 800490a:	d14c      	bne.n	80049a6 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	881b      	ldrh	r3, [r3, #0]
 8004912:	b29b      	uxth	r3, r3
 8004914:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004918:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800491c:	81fb      	strh	r3, [r7, #14]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	89fb      	ldrh	r3, [r7, #14]
 8004924:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004928:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800492c:	b29b      	uxth	r3, r3
 800492e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	3310      	adds	r3, #16
 8004934:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800493e:	b29b      	uxth	r3, r3
 8004940:	461a      	mov	r2, r3
 8004942:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	00db      	lsls	r3, r3, #3
 8004948:	4413      	add	r3, r2
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	6812      	ldr	r2, [r2, #0]
 800494e:	4413      	add	r3, r2
 8004950:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004954:	881b      	ldrh	r3, [r3, #0]
 8004956:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800495a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800495c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800495e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004960:	695a      	ldr	r2, [r3, #20]
 8004962:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004964:	69db      	ldr	r3, [r3, #28]
 8004966:	441a      	add	r2, r3
 8004968:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800496a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800496c:	2100      	movs	r1, #0
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f7ff ff4d 	bl	800480e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	7b1b      	ldrb	r3, [r3, #12]
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b00      	cmp	r3, #0
 800497c:	f000 835c 	beq.w	8005038 <PCD_EP_ISR_Handler+0x766>
 8004980:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004982:	699b      	ldr	r3, [r3, #24]
 8004984:	2b00      	cmp	r3, #0
 8004986:	f040 8357 	bne.w	8005038 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	7b1b      	ldrb	r3, [r3, #12]
 800498e:	b2db      	uxtb	r3, r3
 8004990:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004994:	b2da      	uxtb	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	731a      	strb	r2, [r3, #12]
 80049a4:	e348      	b.n	8005038 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80049ac:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	881b      	ldrh	r3, [r3, #0]
 80049b4:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80049b8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80049bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d032      	beq.n	8004a2a <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	461a      	mov	r2, r3
 80049d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	00db      	lsls	r3, r3, #3
 80049d6:	4413      	add	r3, r2
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	6812      	ldr	r2, [r2, #0]
 80049dc:	4413      	add	r3, r2
 80049de:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80049e2:	881b      	ldrh	r3, [r3, #0]
 80049e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80049e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049ea:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6818      	ldr	r0, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80049f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049f8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80049fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049fc:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	f004 fe22 	bl	8009648 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	881b      	ldrh	r3, [r3, #0]
 8004a0a:	b29a      	uxth	r2, r3
 8004a0c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004a10:	4013      	ands	r3, r2
 8004a12:	823b      	strh	r3, [r7, #16]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	8a3a      	ldrh	r2, [r7, #16]
 8004a1a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004a1e:	b292      	uxth	r2, r2
 8004a20:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f7ff feff 	bl	8004826 <HAL_PCD_SetupStageCallback>
 8004a28:	e306      	b.n	8005038 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004a2a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	f280 8302 	bge.w	8005038 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	881b      	ldrh	r3, [r3, #0]
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004a40:	4013      	ands	r3, r2
 8004a42:	83fb      	strh	r3, [r7, #30]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	8bfa      	ldrh	r2, [r7, #30]
 8004a4a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004a4e:	b292      	uxth	r2, r2
 8004a50:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	00db      	lsls	r3, r3, #3
 8004a64:	4413      	add	r3, r2
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	6812      	ldr	r2, [r2, #0]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004a70:	881b      	ldrh	r3, [r3, #0]
 8004a72:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004a76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a78:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004a7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a7c:	69db      	ldr	r3, [r3, #28]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d019      	beq.n	8004ab6 <PCD_EP_ISR_Handler+0x1e4>
 8004a82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d015      	beq.n	8004ab6 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6818      	ldr	r0, [r3, #0]
 8004a8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a90:	6959      	ldr	r1, [r3, #20]
 8004a92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a94:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004a96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a98:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	f004 fdd4 	bl	8009648 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004aa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004aa2:	695a      	ldr	r2, [r3, #20]
 8004aa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004aa6:	69db      	ldr	r3, [r3, #28]
 8004aa8:	441a      	add	r2, r3
 8004aaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004aac:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004aae:	2100      	movs	r1, #0
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f7ff fea0 	bl	80047f6 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	881b      	ldrh	r3, [r3, #0]
 8004abc:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004ac0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004ac4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f040 82b5 	bne.w	8005038 <PCD_EP_ISR_Handler+0x766>
 8004ace:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004ad2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004ad6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004ada:	f000 82ad 	beq.w	8005038 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	61bb      	str	r3, [r7, #24]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	461a      	mov	r2, r3
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	4413      	add	r3, r2
 8004af4:	61bb      	str	r3, [r7, #24]
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004afc:	617b      	str	r3, [r7, #20]
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	881b      	ldrh	r3, [r3, #0]
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b08:	b29a      	uxth	r2, r3
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	801a      	strh	r2, [r3, #0]
 8004b0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d10a      	bne.n	8004b2c <PCD_EP_ISR_Handler+0x25a>
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	881b      	ldrh	r3, [r3, #0]
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b24:	b29a      	uxth	r2, r3
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	801a      	strh	r2, [r3, #0]
 8004b2a:	e039      	b.n	8004ba0 <PCD_EP_ISR_Handler+0x2ce>
 8004b2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	2b3e      	cmp	r3, #62	@ 0x3e
 8004b32:	d818      	bhi.n	8004b66 <PCD_EP_ISR_Handler+0x294>
 8004b34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	085b      	lsrs	r3, r3, #1
 8004b3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	f003 0301 	and.w	r3, r3, #1
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d002      	beq.n	8004b4e <PCD_EP_ISR_Handler+0x27c>
 8004b48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	881b      	ldrh	r3, [r3, #0]
 8004b52:	b29a      	uxth	r2, r3
 8004b54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	029b      	lsls	r3, r3, #10
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	b29a      	uxth	r2, r3
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	801a      	strh	r2, [r3, #0]
 8004b64:	e01c      	b.n	8004ba0 <PCD_EP_ISR_Handler+0x2ce>
 8004b66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	095b      	lsrs	r3, r3, #5
 8004b6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	f003 031f 	and.w	r3, r3, #31
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d102      	bne.n	8004b80 <PCD_EP_ISR_Handler+0x2ae>
 8004b7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	881b      	ldrh	r3, [r3, #0]
 8004b84:	b29a      	uxth	r2, r3
 8004b86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	029b      	lsls	r3, r3, #10
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	881b      	ldrh	r3, [r3, #0]
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004bac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bb0:	827b      	strh	r3, [r7, #18]
 8004bb2:	8a7b      	ldrh	r3, [r7, #18]
 8004bb4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004bb8:	827b      	strh	r3, [r7, #18]
 8004bba:	8a7b      	ldrh	r3, [r7, #18]
 8004bbc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004bc0:	827b      	strh	r3, [r7, #18]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	8a7b      	ldrh	r3, [r7, #18]
 8004bc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bcc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	8013      	strh	r3, [r2, #0]
 8004bdc:	e22c      	b.n	8005038 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	461a      	mov	r2, r3
 8004be4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	4413      	add	r3, r2
 8004bec:	881b      	ldrh	r3, [r3, #0]
 8004bee:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004bf2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f280 80f6 	bge.w	8004de8 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	461a      	mov	r2, r3
 8004c02:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	4413      	add	r3, r2
 8004c0a:	881b      	ldrh	r3, [r3, #0]
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004c12:	4013      	ands	r3, r2
 8004c14:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	4413      	add	r3, r2
 8004c26:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8004c2a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004c2e:	b292      	uxth	r2, r2
 8004c30:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004c32:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8004c36:	4613      	mov	r3, r2
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4413      	add	r3, r2
 8004c3c:	00db      	lsls	r3, r3, #3
 8004c3e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	4413      	add	r3, r2
 8004c46:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004c48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c4a:	7b1b      	ldrb	r3, [r3, #12]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d123      	bne.n	8004c98 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	00db      	lsls	r3, r3, #3
 8004c62:	4413      	add	r3, r2
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	6812      	ldr	r2, [r2, #0]
 8004c68:	4413      	add	r3, r2
 8004c6a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004c6e:	881b      	ldrh	r3, [r3, #0]
 8004c70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c74:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8004c78:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f000 808e 	beq.w	8004d9e <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6818      	ldr	r0, [r3, #0]
 8004c86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c88:	6959      	ldr	r1, [r3, #20]
 8004c8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c8c:	88da      	ldrh	r2, [r3, #6]
 8004c8e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004c92:	f004 fcd9 	bl	8009648 <USB_ReadPMA>
 8004c96:	e082      	b.n	8004d9e <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004c98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c9a:	78db      	ldrb	r3, [r3, #3]
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d10a      	bne.n	8004cb6 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004ca0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f000 f9d3 	bl	8005054 <HAL_PCD_EP_DB_Receive>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8004cb4:	e073      	b.n	8004d9e <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	461a      	mov	r2, r3
 8004cbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	4413      	add	r3, r2
 8004cc4:	881b      	ldrh	r3, [r3, #0]
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ccc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cd0:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	461a      	mov	r2, r3
 8004cda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	441a      	add	r2, r3
 8004ce2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8004ce6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cf2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	461a      	mov	r2, r3
 8004d00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	4413      	add	r3, r2
 8004d08:	881b      	ldrh	r3, [r3, #0]
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d022      	beq.n	8004d5a <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	461a      	mov	r2, r3
 8004d20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	00db      	lsls	r3, r3, #3
 8004d26:	4413      	add	r3, r2
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	6812      	ldr	r2, [r2, #0]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004d32:	881b      	ldrh	r3, [r3, #0]
 8004d34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d38:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004d3c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d02c      	beq.n	8004d9e <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6818      	ldr	r0, [r3, #0]
 8004d48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d4a:	6959      	ldr	r1, [r3, #20]
 8004d4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d4e:	891a      	ldrh	r2, [r3, #8]
 8004d50:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004d54:	f004 fc78 	bl	8009648 <USB_ReadPMA>
 8004d58:	e021      	b.n	8004d9e <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	461a      	mov	r2, r3
 8004d66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	00db      	lsls	r3, r3, #3
 8004d6c:	4413      	add	r3, r2
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	6812      	ldr	r2, [r2, #0]
 8004d72:	4413      	add	r3, r2
 8004d74:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004d78:	881b      	ldrh	r3, [r3, #0]
 8004d7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d7e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004d82:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d009      	beq.n	8004d9e <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6818      	ldr	r0, [r3, #0]
 8004d8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d90:	6959      	ldr	r1, [r3, #20]
 8004d92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d94:	895a      	ldrh	r2, [r3, #10]
 8004d96:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004d9a:	f004 fc55 	bl	8009648 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004d9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004da0:	69da      	ldr	r2, [r3, #28]
 8004da2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004da6:	441a      	add	r2, r3
 8004da8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004daa:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004dac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dae:	695a      	ldr	r2, [r3, #20]
 8004db0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004db4:	441a      	add	r2, r3
 8004db6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004db8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004dba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dbc:	699b      	ldr	r3, [r3, #24]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d005      	beq.n	8004dce <PCD_EP_ISR_Handler+0x4fc>
 8004dc2:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8004dc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d206      	bcs.n	8004ddc <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004dce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f7ff fd0e 	bl	80047f6 <HAL_PCD_DataOutStageCallback>
 8004dda:	e005      	b.n	8004de8 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004de2:	4618      	mov	r0, r3
 8004de4:	f003 f817 	bl	8007e16 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004de8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004dec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f000 8121 	beq.w	8005038 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8004df6:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	4413      	add	r3, r2
 8004e00:	00db      	lsls	r3, r3, #3
 8004e02:	3310      	adds	r3, #16
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	4413      	add	r3, r2
 8004e08:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	461a      	mov	r2, r3
 8004e10:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	4413      	add	r3, r2
 8004e18:	881b      	ldrh	r3, [r3, #0]
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004e20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e24:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	441a      	add	r2, r3
 8004e36:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004e3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004e46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e48:	78db      	ldrb	r3, [r3, #3]
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	f040 80a2 	bne.w	8004f94 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8004e50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e52:	2200      	movs	r2, #0
 8004e54:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004e56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e58:	7b1b      	ldrb	r3, [r3, #12]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	f000 8093 	beq.w	8004f86 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004e60:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004e64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d046      	beq.n	8004efa <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004e6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e6e:	785b      	ldrb	r3, [r3, #1]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d126      	bne.n	8004ec2 <PCD_EP_ISR_Handler+0x5f0>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	461a      	mov	r2, r3
 8004e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e88:	4413      	add	r3, r2
 8004e8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	00da      	lsls	r2, r3, #3
 8004e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e94:	4413      	add	r3, r2
 8004e96:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004e9a:	623b      	str	r3, [r7, #32]
 8004e9c:	6a3b      	ldr	r3, [r7, #32]
 8004e9e:	881b      	ldrh	r3, [r3, #0]
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	6a3b      	ldr	r3, [r7, #32]
 8004eaa:	801a      	strh	r2, [r3, #0]
 8004eac:	6a3b      	ldr	r3, [r7, #32]
 8004eae:	881b      	ldrh	r3, [r3, #0]
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	6a3b      	ldr	r3, [r7, #32]
 8004ebe:	801a      	strh	r2, [r3, #0]
 8004ec0:	e061      	b.n	8004f86 <PCD_EP_ISR_Handler+0x6b4>
 8004ec2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ec4:	785b      	ldrb	r3, [r3, #1]
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d15d      	bne.n	8004f86 <PCD_EP_ISR_Handler+0x6b4>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	461a      	mov	r2, r3
 8004edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ede:	4413      	add	r3, r2
 8004ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ee2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	00da      	lsls	r2, r3, #3
 8004ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eea:	4413      	add	r3, r2
 8004eec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	801a      	strh	r2, [r3, #0]
 8004ef8:	e045      	b.n	8004f86 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f02:	785b      	ldrb	r3, [r3, #1]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d126      	bne.n	8004f56 <PCD_EP_ISR_Handler+0x684>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	461a      	mov	r2, r3
 8004f1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f1c:	4413      	add	r3, r2
 8004f1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	00da      	lsls	r2, r3, #3
 8004f26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f28:	4413      	add	r3, r2
 8004f2a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004f2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f32:	881b      	ldrh	r3, [r3, #0]
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f3a:	b29a      	uxth	r2, r3
 8004f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f3e:	801a      	strh	r2, [r3, #0]
 8004f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f42:	881b      	ldrh	r3, [r3, #0]
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f4e:	b29a      	uxth	r2, r3
 8004f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f52:	801a      	strh	r2, [r3, #0]
 8004f54:	e017      	b.n	8004f86 <PCD_EP_ISR_Handler+0x6b4>
 8004f56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f58:	785b      	ldrb	r3, [r3, #1]
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d113      	bne.n	8004f86 <PCD_EP_ISR_Handler+0x6b4>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	461a      	mov	r2, r3
 8004f6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f6c:	4413      	add	r3, r2
 8004f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	00da      	lsls	r2, r3, #3
 8004f76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f78:	4413      	add	r3, r2
 8004f7a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004f7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f82:	2200      	movs	r2, #0
 8004f84:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004f86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f7ff fc3e 	bl	800480e <HAL_PCD_DataInStageCallback>
 8004f92:	e051      	b.n	8005038 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004f94:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004f98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d144      	bne.n	800502a <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	461a      	mov	r2, r3
 8004fac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	00db      	lsls	r3, r3, #3
 8004fb2:	4413      	add	r3, r2
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	6812      	ldr	r2, [r2, #0]
 8004fb8:	4413      	add	r3, r2
 8004fba:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004fbe:	881b      	ldrh	r3, [r3, #0]
 8004fc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fc4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8004fc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fca:	699a      	ldr	r2, [r3, #24]
 8004fcc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d907      	bls.n	8004fe4 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 8004fd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fd6:	699a      	ldr	r2, [r3, #24]
 8004fd8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004fdc:	1ad2      	subs	r2, r2, r3
 8004fde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fe0:	619a      	str	r2, [r3, #24]
 8004fe2:	e002      	b.n	8004fea <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8004fe4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004fea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d106      	bne.n	8005000 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004ff2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f7ff fc08 	bl	800480e <HAL_PCD_DataInStageCallback>
 8004ffe:	e01b      	b.n	8005038 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005000:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005002:	695a      	ldr	r2, [r3, #20]
 8005004:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005008:	441a      	add	r2, r3
 800500a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800500c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800500e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005010:	69da      	ldr	r2, [r3, #28]
 8005012:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005016:	441a      	add	r2, r3
 8005018:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800501a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005022:	4618      	mov	r0, r3
 8005024:	f002 fef7 	bl	8007e16 <USB_EPStartXfer>
 8005028:	e006      	b.n	8005038 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800502a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800502e:	461a      	mov	r2, r3
 8005030:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 f917 	bl	8005266 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005040:	b29b      	uxth	r3, r3
 8005042:	b21b      	sxth	r3, r3
 8005044:	2b00      	cmp	r3, #0
 8005046:	f6ff ac49 	blt.w	80048dc <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3758      	adds	r7, #88	@ 0x58
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b088      	sub	sp, #32
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	4613      	mov	r3, r2
 8005060:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005062:	88fb      	ldrh	r3, [r7, #6]
 8005064:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d07c      	beq.n	8005166 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005074:	b29b      	uxth	r3, r3
 8005076:	461a      	mov	r2, r3
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	00db      	lsls	r3, r3, #3
 800507e:	4413      	add	r3, r2
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	6812      	ldr	r2, [r2, #0]
 8005084:	4413      	add	r3, r2
 8005086:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800508a:	881b      	ldrh	r3, [r3, #0]
 800508c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005090:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	699a      	ldr	r2, [r3, #24]
 8005096:	8b7b      	ldrh	r3, [r7, #26]
 8005098:	429a      	cmp	r2, r3
 800509a:	d306      	bcc.n	80050aa <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	699a      	ldr	r2, [r3, #24]
 80050a0:	8b7b      	ldrh	r3, [r7, #26]
 80050a2:	1ad2      	subs	r2, r2, r3
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	619a      	str	r2, [r3, #24]
 80050a8:	e002      	b.n	80050b0 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	2200      	movs	r2, #0
 80050ae:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d123      	bne.n	8005100 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	461a      	mov	r2, r3
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4413      	add	r3, r2
 80050c6:	881b      	ldrh	r3, [r3, #0]
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80050ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050d2:	833b      	strh	r3, [r7, #24]
 80050d4:	8b3b      	ldrh	r3, [r7, #24]
 80050d6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80050da:	833b      	strh	r3, [r7, #24]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	461a      	mov	r2, r3
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	441a      	add	r2, r3
 80050ea:	8b3b      	ldrh	r3, [r7, #24]
 80050ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005100:	88fb      	ldrh	r3, [r7, #6]
 8005102:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005106:	2b00      	cmp	r3, #0
 8005108:	d01f      	beq.n	800514a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	461a      	mov	r2, r3
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	4413      	add	r3, r2
 8005118:	881b      	ldrh	r3, [r3, #0]
 800511a:	b29b      	uxth	r3, r3
 800511c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005120:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005124:	82fb      	strh	r3, [r7, #22]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	461a      	mov	r2, r3
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	441a      	add	r2, r3
 8005134:	8afb      	ldrh	r3, [r7, #22]
 8005136:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800513a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800513e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005142:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005146:	b29b      	uxth	r3, r3
 8005148:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800514a:	8b7b      	ldrh	r3, [r7, #26]
 800514c:	2b00      	cmp	r3, #0
 800514e:	f000 8085 	beq.w	800525c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6818      	ldr	r0, [r3, #0]
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	6959      	ldr	r1, [r3, #20]
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	891a      	ldrh	r2, [r3, #8]
 800515e:	8b7b      	ldrh	r3, [r7, #26]
 8005160:	f004 fa72 	bl	8009648 <USB_ReadPMA>
 8005164:	e07a      	b.n	800525c <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800516e:	b29b      	uxth	r3, r3
 8005170:	461a      	mov	r2, r3
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	00db      	lsls	r3, r3, #3
 8005178:	4413      	add	r3, r2
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	6812      	ldr	r2, [r2, #0]
 800517e:	4413      	add	r3, r2
 8005180:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005184:	881b      	ldrh	r3, [r3, #0]
 8005186:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800518a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	699a      	ldr	r2, [r3, #24]
 8005190:	8b7b      	ldrh	r3, [r7, #26]
 8005192:	429a      	cmp	r2, r3
 8005194:	d306      	bcc.n	80051a4 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	699a      	ldr	r2, [r3, #24]
 800519a:	8b7b      	ldrh	r3, [r7, #26]
 800519c:	1ad2      	subs	r2, r2, r3
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	619a      	str	r2, [r3, #24]
 80051a2:	e002      	b.n	80051aa <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	2200      	movs	r2, #0
 80051a8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d123      	bne.n	80051fa <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	461a      	mov	r2, r3
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	4413      	add	r3, r2
 80051c0:	881b      	ldrh	r3, [r3, #0]
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80051c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051cc:	83fb      	strh	r3, [r7, #30]
 80051ce:	8bfb      	ldrh	r3, [r7, #30]
 80051d0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80051d4:	83fb      	strh	r3, [r7, #30]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	461a      	mov	r2, r3
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	441a      	add	r2, r3
 80051e4:	8bfb      	ldrh	r3, [r7, #30]
 80051e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80051fa:	88fb      	ldrh	r3, [r7, #6]
 80051fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005200:	2b00      	cmp	r3, #0
 8005202:	d11f      	bne.n	8005244 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	461a      	mov	r2, r3
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	4413      	add	r3, r2
 8005212:	881b      	ldrh	r3, [r3, #0]
 8005214:	b29b      	uxth	r3, r3
 8005216:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800521a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800521e:	83bb      	strh	r3, [r7, #28]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	461a      	mov	r2, r3
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	441a      	add	r2, r3
 800522e:	8bbb      	ldrh	r3, [r7, #28]
 8005230:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005234:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005238:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800523c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005240:	b29b      	uxth	r3, r3
 8005242:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005244:	8b7b      	ldrh	r3, [r7, #26]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d008      	beq.n	800525c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6818      	ldr	r0, [r3, #0]
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	6959      	ldr	r1, [r3, #20]
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	895a      	ldrh	r2, [r3, #10]
 8005256:	8b7b      	ldrh	r3, [r7, #26]
 8005258:	f004 f9f6 	bl	8009648 <USB_ReadPMA>
    }
  }

  return count;
 800525c:	8b7b      	ldrh	r3, [r7, #26]
}
 800525e:	4618      	mov	r0, r3
 8005260:	3720      	adds	r7, #32
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b0a4      	sub	sp, #144	@ 0x90
 800526a:	af00      	add	r7, sp, #0
 800526c:	60f8      	str	r0, [r7, #12]
 800526e:	60b9      	str	r1, [r7, #8]
 8005270:	4613      	mov	r3, r2
 8005272:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005274:	88fb      	ldrh	r3, [r7, #6]
 8005276:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800527a:	2b00      	cmp	r3, #0
 800527c:	f000 81db 	beq.w	8005636 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005288:	b29b      	uxth	r3, r3
 800528a:	461a      	mov	r2, r3
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	00db      	lsls	r3, r3, #3
 8005292:	4413      	add	r3, r2
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	6812      	ldr	r2, [r2, #0]
 8005298:	4413      	add	r3, r2
 800529a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800529e:	881b      	ldrh	r3, [r3, #0]
 80052a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052a4:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	699a      	ldr	r2, [r3, #24]
 80052ac:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d907      	bls.n	80052c4 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	699a      	ldr	r2, [r3, #24]
 80052b8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80052bc:	1ad2      	subs	r2, r2, r3
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	619a      	str	r2, [r3, #24]
 80052c2:	e002      	b.n	80052ca <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	2200      	movs	r2, #0
 80052c8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	f040 80b9 	bne.w	8005446 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	785b      	ldrb	r3, [r3, #1]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d126      	bne.n	800532a <HAL_PCD_EP_DB_Transmit+0xc4>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	461a      	mov	r2, r3
 80052ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052f0:	4413      	add	r3, r2
 80052f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	00da      	lsls	r2, r3, #3
 80052fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052fc:	4413      	add	r3, r2
 80052fe:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005302:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005306:	881b      	ldrh	r3, [r3, #0]
 8005308:	b29b      	uxth	r3, r3
 800530a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800530e:	b29a      	uxth	r2, r3
 8005310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005312:	801a      	strh	r2, [r3, #0]
 8005314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005316:	881b      	ldrh	r3, [r3, #0]
 8005318:	b29b      	uxth	r3, r3
 800531a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800531e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005322:	b29a      	uxth	r2, r3
 8005324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005326:	801a      	strh	r2, [r3, #0]
 8005328:	e01a      	b.n	8005360 <HAL_PCD_EP_DB_Transmit+0xfa>
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	785b      	ldrb	r3, [r3, #1]
 800532e:	2b01      	cmp	r3, #1
 8005330:	d116      	bne.n	8005360 <HAL_PCD_EP_DB_Transmit+0xfa>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	637b      	str	r3, [r7, #52]	@ 0x34
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005340:	b29b      	uxth	r3, r3
 8005342:	461a      	mov	r2, r3
 8005344:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005346:	4413      	add	r3, r2
 8005348:	637b      	str	r3, [r7, #52]	@ 0x34
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	00da      	lsls	r2, r3, #3
 8005350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005352:	4413      	add	r3, r2
 8005354:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005358:	633b      	str	r3, [r7, #48]	@ 0x30
 800535a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800535c:	2200      	movs	r2, #0
 800535e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	627b      	str	r3, [r7, #36]	@ 0x24
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	785b      	ldrb	r3, [r3, #1]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d126      	bne.n	80053bc <HAL_PCD_EP_DB_Transmit+0x156>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	61fb      	str	r3, [r7, #28]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800537c:	b29b      	uxth	r3, r3
 800537e:	461a      	mov	r2, r3
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	4413      	add	r3, r2
 8005384:	61fb      	str	r3, [r7, #28]
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	00da      	lsls	r2, r3, #3
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	4413      	add	r3, r2
 8005390:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005394:	61bb      	str	r3, [r7, #24]
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	881b      	ldrh	r3, [r3, #0]
 800539a:	b29b      	uxth	r3, r3
 800539c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	801a      	strh	r2, [r3, #0]
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	881b      	ldrh	r3, [r3, #0]
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	801a      	strh	r2, [r3, #0]
 80053ba:	e017      	b.n	80053ec <HAL_PCD_EP_DB_Transmit+0x186>
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	785b      	ldrb	r3, [r3, #1]
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d113      	bne.n	80053ec <HAL_PCD_EP_DB_Transmit+0x186>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	461a      	mov	r2, r3
 80053d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d2:	4413      	add	r3, r2
 80053d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	00da      	lsls	r2, r3, #3
 80053dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053de:	4413      	add	r3, r2
 80053e0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80053e4:	623b      	str	r3, [r7, #32]
 80053e6:	6a3b      	ldr	r3, [r7, #32]
 80053e8:	2200      	movs	r2, #0
 80053ea:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	4619      	mov	r1, r3
 80053f2:	68f8      	ldr	r0, [r7, #12]
 80053f4:	f7ff fa0b 	bl	800480e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80053f8:	88fb      	ldrh	r3, [r7, #6]
 80053fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	f000 82fa 	beq.w	80059f8 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	461a      	mov	r2, r3
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	4413      	add	r3, r2
 8005412:	881b      	ldrh	r3, [r3, #0]
 8005414:	b29b      	uxth	r3, r3
 8005416:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800541a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800541e:	82fb      	strh	r3, [r7, #22]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	461a      	mov	r2, r3
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	441a      	add	r2, r3
 800542e:	8afb      	ldrh	r3, [r7, #22]
 8005430:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005434:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005438:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800543c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005440:	b29b      	uxth	r3, r3
 8005442:	8013      	strh	r3, [r2, #0]
 8005444:	e2d8      	b.n	80059f8 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005446:	88fb      	ldrh	r3, [r7, #6]
 8005448:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800544c:	2b00      	cmp	r3, #0
 800544e:	d021      	beq.n	8005494 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	461a      	mov	r2, r3
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	4413      	add	r3, r2
 800545e:	881b      	ldrh	r3, [r3, #0]
 8005460:	b29b      	uxth	r3, r3
 8005462:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005466:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800546a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	461a      	mov	r2, r3
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	441a      	add	r2, r3
 800547c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005480:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005484:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005488:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800548c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005490:	b29b      	uxth	r3, r3
 8005492:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800549a:	2b01      	cmp	r3, #1
 800549c:	f040 82ac 	bne.w	80059f8 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	695a      	ldr	r2, [r3, #20]
 80054a4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80054a8:	441a      	add	r2, r3
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	69da      	ldr	r2, [r3, #28]
 80054b2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80054b6:	441a      	add	r2, r3
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	6a1a      	ldr	r2, [r3, #32]
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d30b      	bcc.n	80054e0 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	6a1a      	ldr	r2, [r3, #32]
 80054d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054d8:	1ad2      	subs	r2, r2, r3
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	621a      	str	r2, [r3, #32]
 80054de:	e017      	b.n	8005510 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	6a1b      	ldr	r3, [r3, #32]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d108      	bne.n	80054fa <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 80054e8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80054ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80054f8:	e00a      	b.n	8005510 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	6a1b      	ldr	r3, [r3, #32]
 8005506:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	2200      	movs	r2, #0
 800550e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	785b      	ldrb	r3, [r3, #1]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d165      	bne.n	80055e4 <HAL_PCD_EP_DB_Transmit+0x37e>
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005526:	b29b      	uxth	r3, r3
 8005528:	461a      	mov	r2, r3
 800552a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800552c:	4413      	add	r3, r2
 800552e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	00da      	lsls	r2, r3, #3
 8005536:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005538:	4413      	add	r3, r2
 800553a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800553e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005542:	881b      	ldrh	r3, [r3, #0]
 8005544:	b29b      	uxth	r3, r3
 8005546:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800554a:	b29a      	uxth	r2, r3
 800554c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800554e:	801a      	strh	r2, [r3, #0]
 8005550:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005554:	2b00      	cmp	r3, #0
 8005556:	d10a      	bne.n	800556e <HAL_PCD_EP_DB_Transmit+0x308>
 8005558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800555a:	881b      	ldrh	r3, [r3, #0]
 800555c:	b29b      	uxth	r3, r3
 800555e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005562:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005566:	b29a      	uxth	r2, r3
 8005568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800556a:	801a      	strh	r2, [r3, #0]
 800556c:	e057      	b.n	800561e <HAL_PCD_EP_DB_Transmit+0x3b8>
 800556e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005572:	2b3e      	cmp	r3, #62	@ 0x3e
 8005574:	d818      	bhi.n	80055a8 <HAL_PCD_EP_DB_Transmit+0x342>
 8005576:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800557a:	085b      	lsrs	r3, r3, #1
 800557c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800557e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005582:	f003 0301 	and.w	r3, r3, #1
 8005586:	2b00      	cmp	r3, #0
 8005588:	d002      	beq.n	8005590 <HAL_PCD_EP_DB_Transmit+0x32a>
 800558a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800558c:	3301      	adds	r3, #1
 800558e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005592:	881b      	ldrh	r3, [r3, #0]
 8005594:	b29a      	uxth	r2, r3
 8005596:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005598:	b29b      	uxth	r3, r3
 800559a:	029b      	lsls	r3, r3, #10
 800559c:	b29b      	uxth	r3, r3
 800559e:	4313      	orrs	r3, r2
 80055a0:	b29a      	uxth	r2, r3
 80055a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055a4:	801a      	strh	r2, [r3, #0]
 80055a6:	e03a      	b.n	800561e <HAL_PCD_EP_DB_Transmit+0x3b8>
 80055a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80055ac:	095b      	lsrs	r3, r3, #5
 80055ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80055b4:	f003 031f 	and.w	r3, r3, #31
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d102      	bne.n	80055c2 <HAL_PCD_EP_DB_Transmit+0x35c>
 80055bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055be:	3b01      	subs	r3, #1
 80055c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055c4:	881b      	ldrh	r3, [r3, #0]
 80055c6:	b29a      	uxth	r2, r3
 80055c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	029b      	lsls	r3, r3, #10
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	4313      	orrs	r3, r2
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055dc:	b29a      	uxth	r2, r3
 80055de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055e0:	801a      	strh	r2, [r3, #0]
 80055e2:	e01c      	b.n	800561e <HAL_PCD_EP_DB_Transmit+0x3b8>
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	785b      	ldrb	r3, [r3, #1]
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d118      	bne.n	800561e <HAL_PCD_EP_DB_Transmit+0x3b8>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	461a      	mov	r2, r3
 80055fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005600:	4413      	add	r3, r2
 8005602:	647b      	str	r3, [r7, #68]	@ 0x44
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	00da      	lsls	r2, r3, #3
 800560a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800560c:	4413      	add	r3, r2
 800560e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005612:	643b      	str	r3, [r7, #64]	@ 0x40
 8005614:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005618:	b29a      	uxth	r2, r3
 800561a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800561c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6818      	ldr	r0, [r3, #0]
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	6959      	ldr	r1, [r3, #20]
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	891a      	ldrh	r2, [r3, #8]
 800562a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800562e:	b29b      	uxth	r3, r3
 8005630:	f003 ffc7 	bl	80095c2 <USB_WritePMA>
 8005634:	e1e0      	b.n	80059f8 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800563e:	b29b      	uxth	r3, r3
 8005640:	461a      	mov	r2, r3
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	00db      	lsls	r3, r3, #3
 8005648:	4413      	add	r3, r2
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	6812      	ldr	r2, [r2, #0]
 800564e:	4413      	add	r3, r2
 8005650:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005654:	881b      	ldrh	r3, [r3, #0]
 8005656:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800565a:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	699a      	ldr	r2, [r3, #24]
 8005662:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005666:	429a      	cmp	r2, r3
 8005668:	d307      	bcc.n	800567a <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	699a      	ldr	r2, [r3, #24]
 800566e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005672:	1ad2      	subs	r2, r2, r3
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	619a      	str	r2, [r3, #24]
 8005678:	e002      	b.n	8005680 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	2200      	movs	r2, #0
 800567e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	699b      	ldr	r3, [r3, #24]
 8005684:	2b00      	cmp	r3, #0
 8005686:	f040 80c0 	bne.w	800580a <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	785b      	ldrb	r3, [r3, #1]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d126      	bne.n	80056e0 <HAL_PCD_EP_DB_Transmit+0x47a>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	461a      	mov	r2, r3
 80056a4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80056a6:	4413      	add	r3, r2
 80056a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	00da      	lsls	r2, r3, #3
 80056b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80056b2:	4413      	add	r3, r2
 80056b4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80056b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80056ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80056bc:	881b      	ldrh	r3, [r3, #0]
 80056be:	b29b      	uxth	r3, r3
 80056c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056c4:	b29a      	uxth	r2, r3
 80056c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80056c8:	801a      	strh	r2, [r3, #0]
 80056ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80056cc:	881b      	ldrh	r3, [r3, #0]
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056d8:	b29a      	uxth	r2, r3
 80056da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80056dc:	801a      	strh	r2, [r3, #0]
 80056de:	e01a      	b.n	8005716 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	785b      	ldrb	r3, [r3, #1]
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d116      	bne.n	8005716 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	667b      	str	r3, [r7, #100]	@ 0x64
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	461a      	mov	r2, r3
 80056fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056fc:	4413      	add	r3, r2
 80056fe:	667b      	str	r3, [r7, #100]	@ 0x64
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	00da      	lsls	r2, r3, #3
 8005706:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005708:	4413      	add	r3, r2
 800570a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800570e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005710:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005712:	2200      	movs	r2, #0
 8005714:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	677b      	str	r3, [r7, #116]	@ 0x74
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	785b      	ldrb	r3, [r3, #1]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d12b      	bne.n	800577c <HAL_PCD_EP_DB_Transmit+0x516>
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005732:	b29b      	uxth	r3, r3
 8005734:	461a      	mov	r2, r3
 8005736:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005738:	4413      	add	r3, r2
 800573a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	00da      	lsls	r2, r3, #3
 8005742:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005744:	4413      	add	r3, r2
 8005746:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800574a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800574e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005752:	881b      	ldrh	r3, [r3, #0]
 8005754:	b29b      	uxth	r3, r3
 8005756:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800575a:	b29a      	uxth	r2, r3
 800575c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005760:	801a      	strh	r2, [r3, #0]
 8005762:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005766:	881b      	ldrh	r3, [r3, #0]
 8005768:	b29b      	uxth	r3, r3
 800576a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800576e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005772:	b29a      	uxth	r2, r3
 8005774:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005778:	801a      	strh	r2, [r3, #0]
 800577a:	e017      	b.n	80057ac <HAL_PCD_EP_DB_Transmit+0x546>
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	785b      	ldrb	r3, [r3, #1]
 8005780:	2b01      	cmp	r3, #1
 8005782:	d113      	bne.n	80057ac <HAL_PCD_EP_DB_Transmit+0x546>
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800578c:	b29b      	uxth	r3, r3
 800578e:	461a      	mov	r2, r3
 8005790:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005792:	4413      	add	r3, r2
 8005794:	677b      	str	r3, [r7, #116]	@ 0x74
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	00da      	lsls	r2, r3, #3
 800579c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800579e:	4413      	add	r3, r2
 80057a0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80057a4:	673b      	str	r3, [r7, #112]	@ 0x70
 80057a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80057a8:	2200      	movs	r2, #0
 80057aa:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	4619      	mov	r1, r3
 80057b2:	68f8      	ldr	r0, [r7, #12]
 80057b4:	f7ff f82b 	bl	800480e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80057b8:	88fb      	ldrh	r3, [r7, #6]
 80057ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	f040 811a 	bne.w	80059f8 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	461a      	mov	r2, r3
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	4413      	add	r3, r2
 80057d2:	881b      	ldrh	r3, [r3, #0]
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057de:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	461a      	mov	r2, r3
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	441a      	add	r2, r3
 80057f0:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 80057f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005800:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005804:	b29b      	uxth	r3, r3
 8005806:	8013      	strh	r3, [r2, #0]
 8005808:	e0f6      	b.n	80059f8 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800580a:	88fb      	ldrh	r3, [r7, #6]
 800580c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d121      	bne.n	8005858 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	461a      	mov	r2, r3
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	4413      	add	r3, r2
 8005822:	881b      	ldrh	r3, [r3, #0]
 8005824:	b29b      	uxth	r3, r3
 8005826:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800582a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800582e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	461a      	mov	r2, r3
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	441a      	add	r2, r3
 8005840:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005844:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005848:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800584c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005850:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005854:	b29b      	uxth	r3, r3
 8005856:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800585e:	2b01      	cmp	r3, #1
 8005860:	f040 80ca 	bne.w	80059f8 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	695a      	ldr	r2, [r3, #20]
 8005868:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800586c:	441a      	add	r2, r3
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	69da      	ldr	r2, [r3, #28]
 8005876:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800587a:	441a      	add	r2, r3
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	6a1a      	ldr	r2, [r3, #32]
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	429a      	cmp	r2, r3
 800588a:	d30b      	bcc.n	80058a4 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	6a1a      	ldr	r2, [r3, #32]
 8005898:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800589c:	1ad2      	subs	r2, r2, r3
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	621a      	str	r2, [r3, #32]
 80058a2:	e017      	b.n	80058d4 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	6a1b      	ldr	r3, [r3, #32]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d108      	bne.n	80058be <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80058ac:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80058b0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80058bc:	e00a      	b.n	80058d4 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	6a1b      	ldr	r3, [r3, #32]
 80058c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	2200      	movs	r2, #0
 80058ca:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	657b      	str	r3, [r7, #84]	@ 0x54
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	785b      	ldrb	r3, [r3, #1]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d165      	bne.n	80059ae <HAL_PCD_EP_DB_Transmit+0x748>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	461a      	mov	r2, r3
 80058f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80058f6:	4413      	add	r3, r2
 80058f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	00da      	lsls	r2, r3, #3
 8005900:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005902:	4413      	add	r3, r2
 8005904:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005908:	65bb      	str	r3, [r7, #88]	@ 0x58
 800590a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800590c:	881b      	ldrh	r3, [r3, #0]
 800590e:	b29b      	uxth	r3, r3
 8005910:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005914:	b29a      	uxth	r2, r3
 8005916:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005918:	801a      	strh	r2, [r3, #0]
 800591a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800591e:	2b00      	cmp	r3, #0
 8005920:	d10a      	bne.n	8005938 <HAL_PCD_EP_DB_Transmit+0x6d2>
 8005922:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005924:	881b      	ldrh	r3, [r3, #0]
 8005926:	b29b      	uxth	r3, r3
 8005928:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800592c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005930:	b29a      	uxth	r2, r3
 8005932:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005934:	801a      	strh	r2, [r3, #0]
 8005936:	e054      	b.n	80059e2 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005938:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800593c:	2b3e      	cmp	r3, #62	@ 0x3e
 800593e:	d818      	bhi.n	8005972 <HAL_PCD_EP_DB_Transmit+0x70c>
 8005940:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005944:	085b      	lsrs	r3, r3, #1
 8005946:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005948:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800594c:	f003 0301 	and.w	r3, r3, #1
 8005950:	2b00      	cmp	r3, #0
 8005952:	d002      	beq.n	800595a <HAL_PCD_EP_DB_Transmit+0x6f4>
 8005954:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005956:	3301      	adds	r3, #1
 8005958:	66bb      	str	r3, [r7, #104]	@ 0x68
 800595a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800595c:	881b      	ldrh	r3, [r3, #0]
 800595e:	b29a      	uxth	r2, r3
 8005960:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005962:	b29b      	uxth	r3, r3
 8005964:	029b      	lsls	r3, r3, #10
 8005966:	b29b      	uxth	r3, r3
 8005968:	4313      	orrs	r3, r2
 800596a:	b29a      	uxth	r2, r3
 800596c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800596e:	801a      	strh	r2, [r3, #0]
 8005970:	e037      	b.n	80059e2 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005972:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005976:	095b      	lsrs	r3, r3, #5
 8005978:	66bb      	str	r3, [r7, #104]	@ 0x68
 800597a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800597e:	f003 031f 	and.w	r3, r3, #31
 8005982:	2b00      	cmp	r3, #0
 8005984:	d102      	bne.n	800598c <HAL_PCD_EP_DB_Transmit+0x726>
 8005986:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005988:	3b01      	subs	r3, #1
 800598a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800598c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800598e:	881b      	ldrh	r3, [r3, #0]
 8005990:	b29a      	uxth	r2, r3
 8005992:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005994:	b29b      	uxth	r3, r3
 8005996:	029b      	lsls	r3, r3, #10
 8005998:	b29b      	uxth	r3, r3
 800599a:	4313      	orrs	r3, r2
 800599c:	b29b      	uxth	r3, r3
 800599e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059a6:	b29a      	uxth	r2, r3
 80059a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80059aa:	801a      	strh	r2, [r3, #0]
 80059ac:	e019      	b.n	80059e2 <HAL_PCD_EP_DB_Transmit+0x77c>
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	785b      	ldrb	r3, [r3, #1]
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d115      	bne.n	80059e2 <HAL_PCD_EP_DB_Transmit+0x77c>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059be:	b29b      	uxth	r3, r3
 80059c0:	461a      	mov	r2, r3
 80059c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059c4:	4413      	add	r3, r2
 80059c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	00da      	lsls	r2, r3, #3
 80059ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059d0:	4413      	add	r3, r2
 80059d2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80059d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80059d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80059dc:	b29a      	uxth	r2, r3
 80059de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80059e0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6818      	ldr	r0, [r3, #0]
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	6959      	ldr	r1, [r3, #20]
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	895a      	ldrh	r2, [r3, #10]
 80059ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	f003 fde5 	bl	80095c2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	461a      	mov	r2, r3
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	4413      	add	r3, r2
 8005a06:	881b      	ldrh	r3, [r3, #0]
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a12:	82bb      	strh	r3, [r7, #20]
 8005a14:	8abb      	ldrh	r3, [r7, #20]
 8005a16:	f083 0310 	eor.w	r3, r3, #16
 8005a1a:	82bb      	strh	r3, [r7, #20]
 8005a1c:	8abb      	ldrh	r3, [r7, #20]
 8005a1e:	f083 0320 	eor.w	r3, r3, #32
 8005a22:	82bb      	strh	r3, [r7, #20]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	461a      	mov	r2, r3
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	441a      	add	r2, r3
 8005a32:	8abb      	ldrh	r3, [r7, #20]
 8005a34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3790      	adds	r7, #144	@ 0x90
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
	...

08005a54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005a60:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005a64:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005a6a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d102      	bne.n	8005a7a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	f001 b80a 	b.w	8006a8e <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005a7e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 0301 	and.w	r3, r3, #1
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	f000 8161 	beq.w	8005d52 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005a90:	4bae      	ldr	r3, [pc, #696]	@ (8005d4c <HAL_RCC_OscConfig+0x2f8>)
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	f003 030c 	and.w	r3, r3, #12
 8005a98:	2b04      	cmp	r3, #4
 8005a9a:	d00c      	beq.n	8005ab6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005a9c:	4bab      	ldr	r3, [pc, #684]	@ (8005d4c <HAL_RCC_OscConfig+0x2f8>)
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f003 030c 	and.w	r3, r3, #12
 8005aa4:	2b08      	cmp	r3, #8
 8005aa6:	d157      	bne.n	8005b58 <HAL_RCC_OscConfig+0x104>
 8005aa8:	4ba8      	ldr	r3, [pc, #672]	@ (8005d4c <HAL_RCC_OscConfig+0x2f8>)
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8005ab0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ab4:	d150      	bne.n	8005b58 <HAL_RCC_OscConfig+0x104>
 8005ab6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005aba:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005abe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8005ac2:	fa93 f3a3 	rbit	r3, r3
 8005ac6:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005aca:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ace:	fab3 f383 	clz	r3, r3
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	2b3f      	cmp	r3, #63	@ 0x3f
 8005ad6:	d802      	bhi.n	8005ade <HAL_RCC_OscConfig+0x8a>
 8005ad8:	4b9c      	ldr	r3, [pc, #624]	@ (8005d4c <HAL_RCC_OscConfig+0x2f8>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	e015      	b.n	8005b0a <HAL_RCC_OscConfig+0xb6>
 8005ade:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005ae2:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ae6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8005aea:	fa93 f3a3 	rbit	r3, r3
 8005aee:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8005af2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005af6:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8005afa:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8005afe:	fa93 f3a3 	rbit	r3, r3
 8005b02:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8005b06:	4b91      	ldr	r3, [pc, #580]	@ (8005d4c <HAL_RCC_OscConfig+0x2f8>)
 8005b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b0a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005b0e:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8005b12:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8005b16:	fa92 f2a2 	rbit	r2, r2
 8005b1a:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8005b1e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8005b22:	fab2 f282 	clz	r2, r2
 8005b26:	b2d2      	uxtb	r2, r2
 8005b28:	f042 0220 	orr.w	r2, r2, #32
 8005b2c:	b2d2      	uxtb	r2, r2
 8005b2e:	f002 021f 	and.w	r2, r2, #31
 8005b32:	2101      	movs	r1, #1
 8005b34:	fa01 f202 	lsl.w	r2, r1, r2
 8005b38:	4013      	ands	r3, r2
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	f000 8108 	beq.w	8005d50 <HAL_RCC_OscConfig+0x2fc>
 8005b40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005b44:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	f040 80ff 	bne.w	8005d50 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	f000 bf9b 	b.w	8006a8e <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005b5c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b68:	d106      	bne.n	8005b78 <HAL_RCC_OscConfig+0x124>
 8005b6a:	4b78      	ldr	r3, [pc, #480]	@ (8005d4c <HAL_RCC_OscConfig+0x2f8>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a77      	ldr	r2, [pc, #476]	@ (8005d4c <HAL_RCC_OscConfig+0x2f8>)
 8005b70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b74:	6013      	str	r3, [r2, #0]
 8005b76:	e036      	b.n	8005be6 <HAL_RCC_OscConfig+0x192>
 8005b78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005b7c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d10c      	bne.n	8005ba2 <HAL_RCC_OscConfig+0x14e>
 8005b88:	4b70      	ldr	r3, [pc, #448]	@ (8005d4c <HAL_RCC_OscConfig+0x2f8>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a6f      	ldr	r2, [pc, #444]	@ (8005d4c <HAL_RCC_OscConfig+0x2f8>)
 8005b8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b92:	6013      	str	r3, [r2, #0]
 8005b94:	4b6d      	ldr	r3, [pc, #436]	@ (8005d4c <HAL_RCC_OscConfig+0x2f8>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a6c      	ldr	r2, [pc, #432]	@ (8005d4c <HAL_RCC_OscConfig+0x2f8>)
 8005b9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b9e:	6013      	str	r3, [r2, #0]
 8005ba0:	e021      	b.n	8005be6 <HAL_RCC_OscConfig+0x192>
 8005ba2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005ba6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005bb2:	d10c      	bne.n	8005bce <HAL_RCC_OscConfig+0x17a>
 8005bb4:	4b65      	ldr	r3, [pc, #404]	@ (8005d4c <HAL_RCC_OscConfig+0x2f8>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a64      	ldr	r2, [pc, #400]	@ (8005d4c <HAL_RCC_OscConfig+0x2f8>)
 8005bba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005bbe:	6013      	str	r3, [r2, #0]
 8005bc0:	4b62      	ldr	r3, [pc, #392]	@ (8005d4c <HAL_RCC_OscConfig+0x2f8>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a61      	ldr	r2, [pc, #388]	@ (8005d4c <HAL_RCC_OscConfig+0x2f8>)
 8005bc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bca:	6013      	str	r3, [r2, #0]
 8005bcc:	e00b      	b.n	8005be6 <HAL_RCC_OscConfig+0x192>
 8005bce:	4b5f      	ldr	r3, [pc, #380]	@ (8005d4c <HAL_RCC_OscConfig+0x2f8>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a5e      	ldr	r2, [pc, #376]	@ (8005d4c <HAL_RCC_OscConfig+0x2f8>)
 8005bd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bd8:	6013      	str	r3, [r2, #0]
 8005bda:	4b5c      	ldr	r3, [pc, #368]	@ (8005d4c <HAL_RCC_OscConfig+0x2f8>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a5b      	ldr	r2, [pc, #364]	@ (8005d4c <HAL_RCC_OscConfig+0x2f8>)
 8005be0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005be4:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005be6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005bea:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d054      	beq.n	8005ca0 <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bf6:	f7fc fa95 	bl	8002124 <HAL_GetTick>
 8005bfa:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bfe:	e00a      	b.n	8005c16 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c00:	f7fc fa90 	bl	8002124 <HAL_GetTick>
 8005c04:	4602      	mov	r2, r0
 8005c06:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8005c0a:	1ad3      	subs	r3, r2, r3
 8005c0c:	2b64      	cmp	r3, #100	@ 0x64
 8005c0e:	d902      	bls.n	8005c16 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8005c10:	2303      	movs	r3, #3
 8005c12:	f000 bf3c 	b.w	8006a8e <HAL_RCC_OscConfig+0x103a>
 8005c16:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005c1a:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c1e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8005c22:	fa93 f3a3 	rbit	r3, r3
 8005c26:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8005c2a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c2e:	fab3 f383 	clz	r3, r3
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	2b3f      	cmp	r3, #63	@ 0x3f
 8005c36:	d802      	bhi.n	8005c3e <HAL_RCC_OscConfig+0x1ea>
 8005c38:	4b44      	ldr	r3, [pc, #272]	@ (8005d4c <HAL_RCC_OscConfig+0x2f8>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	e015      	b.n	8005c6a <HAL_RCC_OscConfig+0x216>
 8005c3e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005c42:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c46:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005c4a:	fa93 f3a3 	rbit	r3, r3
 8005c4e:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8005c52:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005c56:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8005c5a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8005c5e:	fa93 f3a3 	rbit	r3, r3
 8005c62:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8005c66:	4b39      	ldr	r3, [pc, #228]	@ (8005d4c <HAL_RCC_OscConfig+0x2f8>)
 8005c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c6a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005c6e:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8005c72:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8005c76:	fa92 f2a2 	rbit	r2, r2
 8005c7a:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8005c7e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8005c82:	fab2 f282 	clz	r2, r2
 8005c86:	b2d2      	uxtb	r2, r2
 8005c88:	f042 0220 	orr.w	r2, r2, #32
 8005c8c:	b2d2      	uxtb	r2, r2
 8005c8e:	f002 021f 	and.w	r2, r2, #31
 8005c92:	2101      	movs	r1, #1
 8005c94:	fa01 f202 	lsl.w	r2, r1, r2
 8005c98:	4013      	ands	r3, r2
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d0b0      	beq.n	8005c00 <HAL_RCC_OscConfig+0x1ac>
 8005c9e:	e058      	b.n	8005d52 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ca0:	f7fc fa40 	bl	8002124 <HAL_GetTick>
 8005ca4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ca8:	e00a      	b.n	8005cc0 <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005caa:	f7fc fa3b 	bl	8002124 <HAL_GetTick>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	2b64      	cmp	r3, #100	@ 0x64
 8005cb8:	d902      	bls.n	8005cc0 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	f000 bee7 	b.w	8006a8e <HAL_RCC_OscConfig+0x103a>
 8005cc0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005cc4:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cc8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8005ccc:	fa93 f3a3 	rbit	r3, r3
 8005cd0:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8005cd4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cd8:	fab3 f383 	clz	r3, r3
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	2b3f      	cmp	r3, #63	@ 0x3f
 8005ce0:	d802      	bhi.n	8005ce8 <HAL_RCC_OscConfig+0x294>
 8005ce2:	4b1a      	ldr	r3, [pc, #104]	@ (8005d4c <HAL_RCC_OscConfig+0x2f8>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	e015      	b.n	8005d14 <HAL_RCC_OscConfig+0x2c0>
 8005ce8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005cec:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cf0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005cf4:	fa93 f3a3 	rbit	r3, r3
 8005cf8:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8005cfc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005d00:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8005d04:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8005d08:	fa93 f3a3 	rbit	r3, r3
 8005d0c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8005d10:	4b0e      	ldr	r3, [pc, #56]	@ (8005d4c <HAL_RCC_OscConfig+0x2f8>)
 8005d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d14:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005d18:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8005d1c:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8005d20:	fa92 f2a2 	rbit	r2, r2
 8005d24:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8005d28:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8005d2c:	fab2 f282 	clz	r2, r2
 8005d30:	b2d2      	uxtb	r2, r2
 8005d32:	f042 0220 	orr.w	r2, r2, #32
 8005d36:	b2d2      	uxtb	r2, r2
 8005d38:	f002 021f 	and.w	r2, r2, #31
 8005d3c:	2101      	movs	r1, #1
 8005d3e:	fa01 f202 	lsl.w	r2, r1, r2
 8005d42:	4013      	ands	r3, r2
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1b0      	bne.n	8005caa <HAL_RCC_OscConfig+0x256>
 8005d48:	e003      	b.n	8005d52 <HAL_RCC_OscConfig+0x2fe>
 8005d4a:	bf00      	nop
 8005d4c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005d56:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0302 	and.w	r3, r3, #2
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	f000 816d 	beq.w	8006042 <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005d68:	4bcd      	ldr	r3, [pc, #820]	@ (80060a0 <HAL_RCC_OscConfig+0x64c>)
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	f003 030c 	and.w	r3, r3, #12
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00c      	beq.n	8005d8e <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005d74:	4bca      	ldr	r3, [pc, #808]	@ (80060a0 <HAL_RCC_OscConfig+0x64c>)
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	f003 030c 	and.w	r3, r3, #12
 8005d7c:	2b08      	cmp	r3, #8
 8005d7e:	d16e      	bne.n	8005e5e <HAL_RCC_OscConfig+0x40a>
 8005d80:	4bc7      	ldr	r3, [pc, #796]	@ (80060a0 <HAL_RCC_OscConfig+0x64c>)
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8005d88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d8c:	d167      	bne.n	8005e5e <HAL_RCC_OscConfig+0x40a>
 8005d8e:	2302      	movs	r3, #2
 8005d90:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d94:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8005d98:	fa93 f3a3 	rbit	r3, r3
 8005d9c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8005da0:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005da4:	fab3 f383 	clz	r3, r3
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	2b3f      	cmp	r3, #63	@ 0x3f
 8005dac:	d802      	bhi.n	8005db4 <HAL_RCC_OscConfig+0x360>
 8005dae:	4bbc      	ldr	r3, [pc, #752]	@ (80060a0 <HAL_RCC_OscConfig+0x64c>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	e013      	b.n	8005ddc <HAL_RCC_OscConfig+0x388>
 8005db4:	2302      	movs	r3, #2
 8005db6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dba:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8005dbe:	fa93 f3a3 	rbit	r3, r3
 8005dc2:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8005dc6:	2302      	movs	r3, #2
 8005dc8:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8005dcc:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005dd0:	fa93 f3a3 	rbit	r3, r3
 8005dd4:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8005dd8:	4bb1      	ldr	r3, [pc, #708]	@ (80060a0 <HAL_RCC_OscConfig+0x64c>)
 8005dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ddc:	2202      	movs	r2, #2
 8005dde:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8005de2:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8005de6:	fa92 f2a2 	rbit	r2, r2
 8005dea:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8005dee:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8005df2:	fab2 f282 	clz	r2, r2
 8005df6:	b2d2      	uxtb	r2, r2
 8005df8:	f042 0220 	orr.w	r2, r2, #32
 8005dfc:	b2d2      	uxtb	r2, r2
 8005dfe:	f002 021f 	and.w	r2, r2, #31
 8005e02:	2101      	movs	r1, #1
 8005e04:	fa01 f202 	lsl.w	r2, r1, r2
 8005e08:	4013      	ands	r3, r2
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00a      	beq.n	8005e24 <HAL_RCC_OscConfig+0x3d0>
 8005e0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005e12:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d002      	beq.n	8005e24 <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	f000 be35 	b.w	8006a8e <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e24:	4b9e      	ldr	r3, [pc, #632]	@ (80060a0 <HAL_RCC_OscConfig+0x64c>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005e2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005e30:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	21f8      	movs	r1, #248	@ 0xf8
 8005e3a:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e3e:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8005e42:	fa91 f1a1 	rbit	r1, r1
 8005e46:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8005e4a:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8005e4e:	fab1 f181 	clz	r1, r1
 8005e52:	b2c9      	uxtb	r1, r1
 8005e54:	408b      	lsls	r3, r1
 8005e56:	4992      	ldr	r1, [pc, #584]	@ (80060a0 <HAL_RCC_OscConfig+0x64c>)
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e5c:	e0f1      	b.n	8006042 <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005e5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005e62:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	f000 8083 	beq.w	8005f76 <HAL_RCC_OscConfig+0x522>
 8005e70:	2301      	movs	r3, #1
 8005e72:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e76:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8005e7a:	fa93 f3a3 	rbit	r3, r3
 8005e7e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8005e82:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e86:	fab3 f383 	clz	r3, r3
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005e90:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	461a      	mov	r2, r3
 8005e98:	2301      	movs	r3, #1
 8005e9a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e9c:	f7fc f942 	bl	8002124 <HAL_GetTick>
 8005ea0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ea4:	e00a      	b.n	8005ebc <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ea6:	f7fc f93d 	bl	8002124 <HAL_GetTick>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	d902      	bls.n	8005ebc <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	f000 bde9 	b.w	8006a8e <HAL_RCC_OscConfig+0x103a>
 8005ebc:	2302      	movs	r3, #2
 8005ebe:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ec2:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8005ec6:	fa93 f3a3 	rbit	r3, r3
 8005eca:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8005ece:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ed2:	fab3 f383 	clz	r3, r3
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	2b3f      	cmp	r3, #63	@ 0x3f
 8005eda:	d802      	bhi.n	8005ee2 <HAL_RCC_OscConfig+0x48e>
 8005edc:	4b70      	ldr	r3, [pc, #448]	@ (80060a0 <HAL_RCC_OscConfig+0x64c>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	e013      	b.n	8005f0a <HAL_RCC_OscConfig+0x4b6>
 8005ee2:	2302      	movs	r3, #2
 8005ee4:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ee8:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8005eec:	fa93 f3a3 	rbit	r3, r3
 8005ef0:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8005efa:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8005efe:	fa93 f3a3 	rbit	r3, r3
 8005f02:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8005f06:	4b66      	ldr	r3, [pc, #408]	@ (80060a0 <HAL_RCC_OscConfig+0x64c>)
 8005f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f0a:	2202      	movs	r2, #2
 8005f0c:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8005f10:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8005f14:	fa92 f2a2 	rbit	r2, r2
 8005f18:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8005f1c:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8005f20:	fab2 f282 	clz	r2, r2
 8005f24:	b2d2      	uxtb	r2, r2
 8005f26:	f042 0220 	orr.w	r2, r2, #32
 8005f2a:	b2d2      	uxtb	r2, r2
 8005f2c:	f002 021f 	and.w	r2, r2, #31
 8005f30:	2101      	movs	r1, #1
 8005f32:	fa01 f202 	lsl.w	r2, r1, r2
 8005f36:	4013      	ands	r3, r2
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d0b4      	beq.n	8005ea6 <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f3c:	4b58      	ldr	r3, [pc, #352]	@ (80060a0 <HAL_RCC_OscConfig+0x64c>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005f48:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	21f8      	movs	r1, #248	@ 0xf8
 8005f52:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f56:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8005f5a:	fa91 f1a1 	rbit	r1, r1
 8005f5e:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8005f62:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8005f66:	fab1 f181 	clz	r1, r1
 8005f6a:	b2c9      	uxtb	r1, r1
 8005f6c:	408b      	lsls	r3, r1
 8005f6e:	494c      	ldr	r1, [pc, #304]	@ (80060a0 <HAL_RCC_OscConfig+0x64c>)
 8005f70:	4313      	orrs	r3, r2
 8005f72:	600b      	str	r3, [r1, #0]
 8005f74:	e065      	b.n	8006042 <HAL_RCC_OscConfig+0x5ee>
 8005f76:	2301      	movs	r3, #1
 8005f78:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f7c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8005f80:	fa93 f3a3 	rbit	r3, r3
 8005f84:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8005f88:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f8c:	fab3 f383 	clz	r3, r3
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005f96:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fa2:	f7fc f8bf 	bl	8002124 <HAL_GetTick>
 8005fa6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005faa:	e00a      	b.n	8005fc2 <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fac:	f7fc f8ba 	bl	8002124 <HAL_GetTick>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	2b02      	cmp	r3, #2
 8005fba:	d902      	bls.n	8005fc2 <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	f000 bd66 	b.w	8006a8e <HAL_RCC_OscConfig+0x103a>
 8005fc2:	2302      	movs	r3, #2
 8005fc4:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fc8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005fcc:	fa93 f3a3 	rbit	r3, r3
 8005fd0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8005fd4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fd8:	fab3 f383 	clz	r3, r3
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	2b3f      	cmp	r3, #63	@ 0x3f
 8005fe0:	d802      	bhi.n	8005fe8 <HAL_RCC_OscConfig+0x594>
 8005fe2:	4b2f      	ldr	r3, [pc, #188]	@ (80060a0 <HAL_RCC_OscConfig+0x64c>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	e013      	b.n	8006010 <HAL_RCC_OscConfig+0x5bc>
 8005fe8:	2302      	movs	r3, #2
 8005fea:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005ff2:	fa93 f3a3 	rbit	r3, r3
 8005ff6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8005ffa:	2302      	movs	r3, #2
 8005ffc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8006000:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8006004:	fa93 f3a3 	rbit	r3, r3
 8006008:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800600c:	4b24      	ldr	r3, [pc, #144]	@ (80060a0 <HAL_RCC_OscConfig+0x64c>)
 800600e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006010:	2202      	movs	r2, #2
 8006012:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8006016:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800601a:	fa92 f2a2 	rbit	r2, r2
 800601e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8006022:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8006026:	fab2 f282 	clz	r2, r2
 800602a:	b2d2      	uxtb	r2, r2
 800602c:	f042 0220 	orr.w	r2, r2, #32
 8006030:	b2d2      	uxtb	r2, r2
 8006032:	f002 021f 	and.w	r2, r2, #31
 8006036:	2101      	movs	r1, #1
 8006038:	fa01 f202 	lsl.w	r2, r1, r2
 800603c:	4013      	ands	r3, r2
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1b4      	bne.n	8005fac <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006042:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006046:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 0308 	and.w	r3, r3, #8
 8006052:	2b00      	cmp	r3, #0
 8006054:	f000 8119 	beq.w	800628a <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006058:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800605c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	695b      	ldr	r3, [r3, #20]
 8006064:	2b00      	cmp	r3, #0
 8006066:	f000 8082 	beq.w	800616e <HAL_RCC_OscConfig+0x71a>
 800606a:	2301      	movs	r3, #1
 800606c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006070:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006074:	fa93 f3a3 	rbit	r3, r3
 8006078:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 800607c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006080:	fab3 f383 	clz	r3, r3
 8006084:	b2db      	uxtb	r3, r3
 8006086:	461a      	mov	r2, r3
 8006088:	4b06      	ldr	r3, [pc, #24]	@ (80060a4 <HAL_RCC_OscConfig+0x650>)
 800608a:	4413      	add	r3, r2
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	461a      	mov	r2, r3
 8006090:	2301      	movs	r3, #1
 8006092:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006094:	f7fc f846 	bl	8002124 <HAL_GetTick>
 8006098:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800609c:	e00f      	b.n	80060be <HAL_RCC_OscConfig+0x66a>
 800609e:	bf00      	nop
 80060a0:	40021000 	.word	0x40021000
 80060a4:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060a8:	f7fc f83c 	bl	8002124 <HAL_GetTick>
 80060ac:	4602      	mov	r2, r0
 80060ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	2b02      	cmp	r3, #2
 80060b6:	d902      	bls.n	80060be <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 80060b8:	2303      	movs	r3, #3
 80060ba:	f000 bce8 	b.w	8006a8e <HAL_RCC_OscConfig+0x103a>
 80060be:	2302      	movs	r3, #2
 80060c0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060c8:	fa93 f2a3 	rbit	r2, r3
 80060cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80060d0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80060d4:	601a      	str	r2, [r3, #0]
 80060d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80060da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060de:	2202      	movs	r2, #2
 80060e0:	601a      	str	r2, [r3, #0]
 80060e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80060e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	fa93 f2a3 	rbit	r2, r3
 80060f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80060f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060f8:	601a      	str	r2, [r3, #0]
 80060fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80060fe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006102:	2202      	movs	r2, #2
 8006104:	601a      	str	r2, [r3, #0]
 8006106:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800610a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	fa93 f2a3 	rbit	r2, r3
 8006114:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006118:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800611c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800611e:	4bb0      	ldr	r3, [pc, #704]	@ (80063e0 <HAL_RCC_OscConfig+0x98c>)
 8006120:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006122:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006126:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800612a:	2102      	movs	r1, #2
 800612c:	6019      	str	r1, [r3, #0]
 800612e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006132:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	fa93 f1a3 	rbit	r1, r3
 800613c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006140:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006144:	6019      	str	r1, [r3, #0]
  return result;
 8006146:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800614a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	fab3 f383 	clz	r3, r3
 8006154:	b2db      	uxtb	r3, r3
 8006156:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800615a:	b2db      	uxtb	r3, r3
 800615c:	f003 031f 	and.w	r3, r3, #31
 8006160:	2101      	movs	r1, #1
 8006162:	fa01 f303 	lsl.w	r3, r1, r3
 8006166:	4013      	ands	r3, r2
 8006168:	2b00      	cmp	r3, #0
 800616a:	d09d      	beq.n	80060a8 <HAL_RCC_OscConfig+0x654>
 800616c:	e08d      	b.n	800628a <HAL_RCC_OscConfig+0x836>
 800616e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006172:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8006176:	2201      	movs	r2, #1
 8006178:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800617a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800617e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	fa93 f2a3 	rbit	r2, r3
 8006188:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800618c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8006190:	601a      	str	r2, [r3, #0]
  return result;
 8006192:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006196:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800619a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800619c:	fab3 f383 	clz	r3, r3
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	461a      	mov	r2, r3
 80061a4:	4b8f      	ldr	r3, [pc, #572]	@ (80063e4 <HAL_RCC_OscConfig+0x990>)
 80061a6:	4413      	add	r3, r2
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	461a      	mov	r2, r3
 80061ac:	2300      	movs	r3, #0
 80061ae:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061b0:	f7fb ffb8 	bl	8002124 <HAL_GetTick>
 80061b4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061b8:	e00a      	b.n	80061d0 <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061ba:	f7fb ffb3 	bl	8002124 <HAL_GetTick>
 80061be:	4602      	mov	r2, r0
 80061c0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	2b02      	cmp	r3, #2
 80061c8:	d902      	bls.n	80061d0 <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	f000 bc5f 	b.w	8006a8e <HAL_RCC_OscConfig+0x103a>
 80061d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80061d4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80061d8:	2202      	movs	r2, #2
 80061da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80061e0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	fa93 f2a3 	rbit	r2, r3
 80061ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80061ee:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80061f2:	601a      	str	r2, [r3, #0]
 80061f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80061f8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80061fc:	2202      	movs	r2, #2
 80061fe:	601a      	str	r2, [r3, #0]
 8006200:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006204:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	fa93 f2a3 	rbit	r2, r3
 800620e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006212:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006216:	601a      	str	r2, [r3, #0]
 8006218:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800621c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8006220:	2202      	movs	r2, #2
 8006222:	601a      	str	r2, [r3, #0]
 8006224:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006228:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	fa93 f2a3 	rbit	r2, r3
 8006232:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006236:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800623a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800623c:	4b68      	ldr	r3, [pc, #416]	@ (80063e0 <HAL_RCC_OscConfig+0x98c>)
 800623e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006240:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006244:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8006248:	2102      	movs	r1, #2
 800624a:	6019      	str	r1, [r3, #0]
 800624c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006250:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	fa93 f1a3 	rbit	r1, r3
 800625a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800625e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8006262:	6019      	str	r1, [r3, #0]
  return result;
 8006264:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006268:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	fab3 f383 	clz	r3, r3
 8006272:	b2db      	uxtb	r3, r3
 8006274:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006278:	b2db      	uxtb	r3, r3
 800627a:	f003 031f 	and.w	r3, r3, #31
 800627e:	2101      	movs	r1, #1
 8006280:	fa01 f303 	lsl.w	r3, r1, r3
 8006284:	4013      	ands	r3, r2
 8006286:	2b00      	cmp	r3, #0
 8006288:	d197      	bne.n	80061ba <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800628a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800628e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 0304 	and.w	r3, r3, #4
 800629a:	2b00      	cmp	r3, #0
 800629c:	f000 819c 	beq.w	80065d8 <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062a0:	2300      	movs	r3, #0
 80062a2:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062a6:	4b4e      	ldr	r3, [pc, #312]	@ (80063e0 <HAL_RCC_OscConfig+0x98c>)
 80062a8:	69db      	ldr	r3, [r3, #28]
 80062aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d116      	bne.n	80062e0 <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062b2:	4b4b      	ldr	r3, [pc, #300]	@ (80063e0 <HAL_RCC_OscConfig+0x98c>)
 80062b4:	69db      	ldr	r3, [r3, #28]
 80062b6:	4a4a      	ldr	r2, [pc, #296]	@ (80063e0 <HAL_RCC_OscConfig+0x98c>)
 80062b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062bc:	61d3      	str	r3, [r2, #28]
 80062be:	4b48      	ldr	r3, [pc, #288]	@ (80063e0 <HAL_RCC_OscConfig+0x98c>)
 80062c0:	69db      	ldr	r3, [r3, #28]
 80062c2:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80062c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80062ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80062ce:	601a      	str	r2, [r3, #0]
 80062d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80062d4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80062d8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80062da:	2301      	movs	r3, #1
 80062dc:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062e0:	4b41      	ldr	r3, [pc, #260]	@ (80063e8 <HAL_RCC_OscConfig+0x994>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d11a      	bne.n	8006322 <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80062ec:	4b3e      	ldr	r3, [pc, #248]	@ (80063e8 <HAL_RCC_OscConfig+0x994>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a3d      	ldr	r2, [pc, #244]	@ (80063e8 <HAL_RCC_OscConfig+0x994>)
 80062f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062f6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062f8:	f7fb ff14 	bl	8002124 <HAL_GetTick>
 80062fc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006300:	e009      	b.n	8006316 <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006302:	f7fb ff0f 	bl	8002124 <HAL_GetTick>
 8006306:	4602      	mov	r2, r0
 8006308:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	2b64      	cmp	r3, #100	@ 0x64
 8006310:	d901      	bls.n	8006316 <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e3bb      	b.n	8006a8e <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006316:	4b34      	ldr	r3, [pc, #208]	@ (80063e8 <HAL_RCC_OscConfig+0x994>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800631e:	2b00      	cmp	r3, #0
 8006320:	d0ef      	beq.n	8006302 <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006322:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006326:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	2b01      	cmp	r3, #1
 8006330:	d106      	bne.n	8006340 <HAL_RCC_OscConfig+0x8ec>
 8006332:	4b2b      	ldr	r3, [pc, #172]	@ (80063e0 <HAL_RCC_OscConfig+0x98c>)
 8006334:	6a1b      	ldr	r3, [r3, #32]
 8006336:	4a2a      	ldr	r2, [pc, #168]	@ (80063e0 <HAL_RCC_OscConfig+0x98c>)
 8006338:	f043 0301 	orr.w	r3, r3, #1
 800633c:	6213      	str	r3, [r2, #32]
 800633e:	e035      	b.n	80063ac <HAL_RCC_OscConfig+0x958>
 8006340:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006344:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d10c      	bne.n	800636a <HAL_RCC_OscConfig+0x916>
 8006350:	4b23      	ldr	r3, [pc, #140]	@ (80063e0 <HAL_RCC_OscConfig+0x98c>)
 8006352:	6a1b      	ldr	r3, [r3, #32]
 8006354:	4a22      	ldr	r2, [pc, #136]	@ (80063e0 <HAL_RCC_OscConfig+0x98c>)
 8006356:	f023 0301 	bic.w	r3, r3, #1
 800635a:	6213      	str	r3, [r2, #32]
 800635c:	4b20      	ldr	r3, [pc, #128]	@ (80063e0 <HAL_RCC_OscConfig+0x98c>)
 800635e:	6a1b      	ldr	r3, [r3, #32]
 8006360:	4a1f      	ldr	r2, [pc, #124]	@ (80063e0 <HAL_RCC_OscConfig+0x98c>)
 8006362:	f023 0304 	bic.w	r3, r3, #4
 8006366:	6213      	str	r3, [r2, #32]
 8006368:	e020      	b.n	80063ac <HAL_RCC_OscConfig+0x958>
 800636a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800636e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	2b05      	cmp	r3, #5
 8006378:	d10c      	bne.n	8006394 <HAL_RCC_OscConfig+0x940>
 800637a:	4b19      	ldr	r3, [pc, #100]	@ (80063e0 <HAL_RCC_OscConfig+0x98c>)
 800637c:	6a1b      	ldr	r3, [r3, #32]
 800637e:	4a18      	ldr	r2, [pc, #96]	@ (80063e0 <HAL_RCC_OscConfig+0x98c>)
 8006380:	f043 0304 	orr.w	r3, r3, #4
 8006384:	6213      	str	r3, [r2, #32]
 8006386:	4b16      	ldr	r3, [pc, #88]	@ (80063e0 <HAL_RCC_OscConfig+0x98c>)
 8006388:	6a1b      	ldr	r3, [r3, #32]
 800638a:	4a15      	ldr	r2, [pc, #84]	@ (80063e0 <HAL_RCC_OscConfig+0x98c>)
 800638c:	f043 0301 	orr.w	r3, r3, #1
 8006390:	6213      	str	r3, [r2, #32]
 8006392:	e00b      	b.n	80063ac <HAL_RCC_OscConfig+0x958>
 8006394:	4b12      	ldr	r3, [pc, #72]	@ (80063e0 <HAL_RCC_OscConfig+0x98c>)
 8006396:	6a1b      	ldr	r3, [r3, #32]
 8006398:	4a11      	ldr	r2, [pc, #68]	@ (80063e0 <HAL_RCC_OscConfig+0x98c>)
 800639a:	f023 0301 	bic.w	r3, r3, #1
 800639e:	6213      	str	r3, [r2, #32]
 80063a0:	4b0f      	ldr	r3, [pc, #60]	@ (80063e0 <HAL_RCC_OscConfig+0x98c>)
 80063a2:	6a1b      	ldr	r3, [r3, #32]
 80063a4:	4a0e      	ldr	r2, [pc, #56]	@ (80063e0 <HAL_RCC_OscConfig+0x98c>)
 80063a6:	f023 0304 	bic.w	r3, r3, #4
 80063aa:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80063ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80063b0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f000 8085 	beq.w	80064c8 <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063be:	f7fb feb1 	bl	8002124 <HAL_GetTick>
 80063c2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063c6:	e011      	b.n	80063ec <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063c8:	f7fb feac 	bl	8002124 <HAL_GetTick>
 80063cc:	4602      	mov	r2, r0
 80063ce:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80063d2:	1ad3      	subs	r3, r2, r3
 80063d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063d8:	4293      	cmp	r3, r2
 80063da:	d907      	bls.n	80063ec <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 80063dc:	2303      	movs	r3, #3
 80063de:	e356      	b.n	8006a8e <HAL_RCC_OscConfig+0x103a>
 80063e0:	40021000 	.word	0x40021000
 80063e4:	10908120 	.word	0x10908120
 80063e8:	40007000 	.word	0x40007000
 80063ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80063f0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80063f4:	2202      	movs	r2, #2
 80063f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80063fc:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	fa93 f2a3 	rbit	r2, r3
 8006406:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800640a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800640e:	601a      	str	r2, [r3, #0]
 8006410:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006414:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8006418:	2202      	movs	r2, #2
 800641a:	601a      	str	r2, [r3, #0]
 800641c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006420:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	fa93 f2a3 	rbit	r2, r3
 800642a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800642e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8006432:	601a      	str	r2, [r3, #0]
  return result;
 8006434:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006438:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800643c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800643e:	fab3 f383 	clz	r3, r3
 8006442:	b2db      	uxtb	r3, r3
 8006444:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8006448:	b2db      	uxtb	r3, r3
 800644a:	2b00      	cmp	r3, #0
 800644c:	d102      	bne.n	8006454 <HAL_RCC_OscConfig+0xa00>
 800644e:	4b98      	ldr	r3, [pc, #608]	@ (80066b0 <HAL_RCC_OscConfig+0xc5c>)
 8006450:	6a1b      	ldr	r3, [r3, #32]
 8006452:	e013      	b.n	800647c <HAL_RCC_OscConfig+0xa28>
 8006454:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006458:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800645c:	2202      	movs	r2, #2
 800645e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006460:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006464:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	fa93 f2a3 	rbit	r2, r3
 800646e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006472:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8006476:	601a      	str	r2, [r3, #0]
 8006478:	4b8d      	ldr	r3, [pc, #564]	@ (80066b0 <HAL_RCC_OscConfig+0xc5c>)
 800647a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800647c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8006480:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8006484:	2102      	movs	r1, #2
 8006486:	6011      	str	r1, [r2, #0]
 8006488:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800648c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8006490:	6812      	ldr	r2, [r2, #0]
 8006492:	fa92 f1a2 	rbit	r1, r2
 8006496:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800649a:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800649e:	6011      	str	r1, [r2, #0]
  return result;
 80064a0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80064a4:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80064a8:	6812      	ldr	r2, [r2, #0]
 80064aa:	fab2 f282 	clz	r2, r2
 80064ae:	b2d2      	uxtb	r2, r2
 80064b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80064b4:	b2d2      	uxtb	r2, r2
 80064b6:	f002 021f 	and.w	r2, r2, #31
 80064ba:	2101      	movs	r1, #1
 80064bc:	fa01 f202 	lsl.w	r2, r1, r2
 80064c0:	4013      	ands	r3, r2
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d080      	beq.n	80063c8 <HAL_RCC_OscConfig+0x974>
 80064c6:	e07d      	b.n	80065c4 <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064c8:	f7fb fe2c 	bl	8002124 <HAL_GetTick>
 80064cc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064d0:	e00b      	b.n	80064ea <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064d2:	f7fb fe27 	bl	8002124 <HAL_GetTick>
 80064d6:	4602      	mov	r2, r0
 80064d8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d901      	bls.n	80064ea <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	e2d1      	b.n	8006a8e <HAL_RCC_OscConfig+0x103a>
 80064ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80064ee:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80064f2:	2202      	movs	r2, #2
 80064f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80064fa:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	fa93 f2a3 	rbit	r2, r3
 8006504:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006508:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800650c:	601a      	str	r2, [r3, #0]
 800650e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006512:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8006516:	2202      	movs	r2, #2
 8006518:	601a      	str	r2, [r3, #0]
 800651a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800651e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	fa93 f2a3 	rbit	r2, r3
 8006528:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800652c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8006530:	601a      	str	r2, [r3, #0]
  return result;
 8006532:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006536:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800653a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800653c:	fab3 f383 	clz	r3, r3
 8006540:	b2db      	uxtb	r3, r3
 8006542:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8006546:	b2db      	uxtb	r3, r3
 8006548:	2b00      	cmp	r3, #0
 800654a:	d102      	bne.n	8006552 <HAL_RCC_OscConfig+0xafe>
 800654c:	4b58      	ldr	r3, [pc, #352]	@ (80066b0 <HAL_RCC_OscConfig+0xc5c>)
 800654e:	6a1b      	ldr	r3, [r3, #32]
 8006550:	e013      	b.n	800657a <HAL_RCC_OscConfig+0xb26>
 8006552:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006556:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800655a:	2202      	movs	r2, #2
 800655c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800655e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006562:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	fa93 f2a3 	rbit	r2, r3
 800656c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006570:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8006574:	601a      	str	r2, [r3, #0]
 8006576:	4b4e      	ldr	r3, [pc, #312]	@ (80066b0 <HAL_RCC_OscConfig+0xc5c>)
 8006578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800657a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800657e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8006582:	2102      	movs	r1, #2
 8006584:	6011      	str	r1, [r2, #0]
 8006586:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800658a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800658e:	6812      	ldr	r2, [r2, #0]
 8006590:	fa92 f1a2 	rbit	r1, r2
 8006594:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8006598:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 800659c:	6011      	str	r1, [r2, #0]
  return result;
 800659e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80065a2:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80065a6:	6812      	ldr	r2, [r2, #0]
 80065a8:	fab2 f282 	clz	r2, r2
 80065ac:	b2d2      	uxtb	r2, r2
 80065ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80065b2:	b2d2      	uxtb	r2, r2
 80065b4:	f002 021f 	and.w	r2, r2, #31
 80065b8:	2101      	movs	r1, #1
 80065ba:	fa01 f202 	lsl.w	r2, r1, r2
 80065be:	4013      	ands	r3, r2
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d186      	bne.n	80064d2 <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80065c4:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d105      	bne.n	80065d8 <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065cc:	4b38      	ldr	r3, [pc, #224]	@ (80066b0 <HAL_RCC_OscConfig+0xc5c>)
 80065ce:	69db      	ldr	r3, [r3, #28]
 80065d0:	4a37      	ldr	r2, [pc, #220]	@ (80066b0 <HAL_RCC_OscConfig+0xc5c>)
 80065d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80065d6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80065d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80065dc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	699b      	ldr	r3, [r3, #24]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f000 8251 	beq.w	8006a8c <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80065ea:	4b31      	ldr	r3, [pc, #196]	@ (80066b0 <HAL_RCC_OscConfig+0xc5c>)
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	f003 030c 	and.w	r3, r3, #12
 80065f2:	2b08      	cmp	r3, #8
 80065f4:	f000 820f 	beq.w	8006a16 <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80065fc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	699b      	ldr	r3, [r3, #24]
 8006604:	2b02      	cmp	r3, #2
 8006606:	f040 8165 	bne.w	80068d4 <HAL_RCC_OscConfig+0xe80>
 800660a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800660e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8006612:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006616:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006618:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800661c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	fa93 f2a3 	rbit	r2, r3
 8006626:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800662a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800662e:	601a      	str	r2, [r3, #0]
  return result;
 8006630:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006634:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8006638:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800663a:	fab3 f383 	clz	r3, r3
 800663e:	b2db      	uxtb	r3, r3
 8006640:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006644:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	461a      	mov	r2, r3
 800664c:	2300      	movs	r3, #0
 800664e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006650:	f7fb fd68 	bl	8002124 <HAL_GetTick>
 8006654:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006658:	e009      	b.n	800666e <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800665a:	f7fb fd63 	bl	8002124 <HAL_GetTick>
 800665e:	4602      	mov	r2, r0
 8006660:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8006664:	1ad3      	subs	r3, r2, r3
 8006666:	2b02      	cmp	r3, #2
 8006668:	d901      	bls.n	800666e <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 800666a:	2303      	movs	r3, #3
 800666c:	e20f      	b.n	8006a8e <HAL_RCC_OscConfig+0x103a>
 800666e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006672:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8006676:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800667a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800667c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006680:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	fa93 f2a3 	rbit	r2, r3
 800668a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800668e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8006692:	601a      	str	r2, [r3, #0]
  return result;
 8006694:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006698:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800669c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800669e:	fab3 f383 	clz	r3, r3
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	2b3f      	cmp	r3, #63	@ 0x3f
 80066a6:	d805      	bhi.n	80066b4 <HAL_RCC_OscConfig+0xc60>
 80066a8:	4b01      	ldr	r3, [pc, #4]	@ (80066b0 <HAL_RCC_OscConfig+0xc5c>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	e02a      	b.n	8006704 <HAL_RCC_OscConfig+0xcb0>
 80066ae:	bf00      	nop
 80066b0:	40021000 	.word	0x40021000
 80066b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80066b8:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80066bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80066c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80066c6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	fa93 f2a3 	rbit	r2, r3
 80066d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80066d4:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80066d8:	601a      	str	r2, [r3, #0]
 80066da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80066de:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80066e2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80066e6:	601a      	str	r2, [r3, #0]
 80066e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80066ec:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	fa93 f2a3 	rbit	r2, r3
 80066f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80066fa:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80066fe:	601a      	str	r2, [r3, #0]
 8006700:	4bca      	ldr	r3, [pc, #808]	@ (8006a2c <HAL_RCC_OscConfig+0xfd8>)
 8006702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006704:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8006708:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800670c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8006710:	6011      	str	r1, [r2, #0]
 8006712:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8006716:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800671a:	6812      	ldr	r2, [r2, #0]
 800671c:	fa92 f1a2 	rbit	r1, r2
 8006720:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8006724:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8006728:	6011      	str	r1, [r2, #0]
  return result;
 800672a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800672e:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8006732:	6812      	ldr	r2, [r2, #0]
 8006734:	fab2 f282 	clz	r2, r2
 8006738:	b2d2      	uxtb	r2, r2
 800673a:	f042 0220 	orr.w	r2, r2, #32
 800673e:	b2d2      	uxtb	r2, r2
 8006740:	f002 021f 	and.w	r2, r2, #31
 8006744:	2101      	movs	r1, #1
 8006746:	fa01 f202 	lsl.w	r2, r1, r2
 800674a:	4013      	ands	r3, r2
 800674c:	2b00      	cmp	r3, #0
 800674e:	d184      	bne.n	800665a <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006750:	4bb6      	ldr	r3, [pc, #728]	@ (8006a2c <HAL_RCC_OscConfig+0xfd8>)
 8006752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006754:	f023 020f 	bic.w	r2, r3, #15
 8006758:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800675c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006764:	49b1      	ldr	r1, [pc, #708]	@ (8006a2c <HAL_RCC_OscConfig+0xfd8>)
 8006766:	4313      	orrs	r3, r2
 8006768:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800676a:	4bb0      	ldr	r3, [pc, #704]	@ (8006a2c <HAL_RCC_OscConfig+0xfd8>)
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8006772:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006776:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	6a19      	ldr	r1, [r3, #32]
 800677e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006782:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	69db      	ldr	r3, [r3, #28]
 800678a:	430b      	orrs	r3, r1
 800678c:	49a7      	ldr	r1, [pc, #668]	@ (8006a2c <HAL_RCC_OscConfig+0xfd8>)
 800678e:	4313      	orrs	r3, r2
 8006790:	604b      	str	r3, [r1, #4]
 8006792:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006796:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800679a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800679e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80067a4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	fa93 f2a3 	rbit	r2, r3
 80067ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80067b2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80067b6:	601a      	str	r2, [r3, #0]
  return result;
 80067b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80067bc:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80067c0:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067c2:	fab3 f383 	clz	r3, r3
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80067cc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	461a      	mov	r2, r3
 80067d4:	2301      	movs	r3, #1
 80067d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067d8:	f7fb fca4 	bl	8002124 <HAL_GetTick>
 80067dc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80067e0:	e009      	b.n	80067f6 <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067e2:	f7fb fc9f 	bl	8002124 <HAL_GetTick>
 80067e6:	4602      	mov	r2, r0
 80067e8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	2b02      	cmp	r3, #2
 80067f0:	d901      	bls.n	80067f6 <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e14b      	b.n	8006a8e <HAL_RCC_OscConfig+0x103a>
 80067f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80067fa:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80067fe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006802:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006804:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006808:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	fa93 f2a3 	rbit	r2, r3
 8006812:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006816:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800681a:	601a      	str	r2, [r3, #0]
  return result;
 800681c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006820:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8006824:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006826:	fab3 f383 	clz	r3, r3
 800682a:	b2db      	uxtb	r3, r3
 800682c:	2b3f      	cmp	r3, #63	@ 0x3f
 800682e:	d802      	bhi.n	8006836 <HAL_RCC_OscConfig+0xde2>
 8006830:	4b7e      	ldr	r3, [pc, #504]	@ (8006a2c <HAL_RCC_OscConfig+0xfd8>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	e027      	b.n	8006886 <HAL_RCC_OscConfig+0xe32>
 8006836:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800683a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800683e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006842:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006844:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006848:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	fa93 f2a3 	rbit	r2, r3
 8006852:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006856:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800685a:	601a      	str	r2, [r3, #0]
 800685c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006860:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8006864:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006868:	601a      	str	r2, [r3, #0]
 800686a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800686e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	fa93 f2a3 	rbit	r2, r3
 8006878:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800687c:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8006880:	601a      	str	r2, [r3, #0]
 8006882:	4b6a      	ldr	r3, [pc, #424]	@ (8006a2c <HAL_RCC_OscConfig+0xfd8>)
 8006884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006886:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800688a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800688e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8006892:	6011      	str	r1, [r2, #0]
 8006894:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8006898:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800689c:	6812      	ldr	r2, [r2, #0]
 800689e:	fa92 f1a2 	rbit	r1, r2
 80068a2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80068a6:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80068aa:	6011      	str	r1, [r2, #0]
  return result;
 80068ac:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80068b0:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80068b4:	6812      	ldr	r2, [r2, #0]
 80068b6:	fab2 f282 	clz	r2, r2
 80068ba:	b2d2      	uxtb	r2, r2
 80068bc:	f042 0220 	orr.w	r2, r2, #32
 80068c0:	b2d2      	uxtb	r2, r2
 80068c2:	f002 021f 	and.w	r2, r2, #31
 80068c6:	2101      	movs	r1, #1
 80068c8:	fa01 f202 	lsl.w	r2, r1, r2
 80068cc:	4013      	ands	r3, r2
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d087      	beq.n	80067e2 <HAL_RCC_OscConfig+0xd8e>
 80068d2:	e0db      	b.n	8006a8c <HAL_RCC_OscConfig+0x1038>
 80068d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80068d8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80068dc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80068e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80068e6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	fa93 f2a3 	rbit	r2, r3
 80068f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80068f4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80068f8:	601a      	str	r2, [r3, #0]
  return result;
 80068fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80068fe:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8006902:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006904:	fab3 f383 	clz	r3, r3
 8006908:	b2db      	uxtb	r3, r3
 800690a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800690e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	461a      	mov	r2, r3
 8006916:	2300      	movs	r3, #0
 8006918:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800691a:	f7fb fc03 	bl	8002124 <HAL_GetTick>
 800691e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006922:	e009      	b.n	8006938 <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006924:	f7fb fbfe 	bl	8002124 <HAL_GetTick>
 8006928:	4602      	mov	r2, r0
 800692a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	2b02      	cmp	r3, #2
 8006932:	d901      	bls.n	8006938 <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 8006934:	2303      	movs	r3, #3
 8006936:	e0aa      	b.n	8006a8e <HAL_RCC_OscConfig+0x103a>
 8006938:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800693c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8006940:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006944:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006946:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800694a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	fa93 f2a3 	rbit	r2, r3
 8006954:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006958:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800695c:	601a      	str	r2, [r3, #0]
  return result;
 800695e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006962:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8006966:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006968:	fab3 f383 	clz	r3, r3
 800696c:	b2db      	uxtb	r3, r3
 800696e:	2b3f      	cmp	r3, #63	@ 0x3f
 8006970:	d802      	bhi.n	8006978 <HAL_RCC_OscConfig+0xf24>
 8006972:	4b2e      	ldr	r3, [pc, #184]	@ (8006a2c <HAL_RCC_OscConfig+0xfd8>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	e027      	b.n	80069c8 <HAL_RCC_OscConfig+0xf74>
 8006978:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800697c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8006980:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006984:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006986:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800698a:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	fa93 f2a3 	rbit	r2, r3
 8006994:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006998:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800699c:	601a      	str	r2, [r3, #0]
 800699e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80069a2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80069a6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80069aa:	601a      	str	r2, [r3, #0]
 80069ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80069b0:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	fa93 f2a3 	rbit	r2, r3
 80069ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80069be:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80069c2:	601a      	str	r2, [r3, #0]
 80069c4:	4b19      	ldr	r3, [pc, #100]	@ (8006a2c <HAL_RCC_OscConfig+0xfd8>)
 80069c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80069cc:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80069d0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80069d4:	6011      	str	r1, [r2, #0]
 80069d6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80069da:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80069de:	6812      	ldr	r2, [r2, #0]
 80069e0:	fa92 f1a2 	rbit	r1, r2
 80069e4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80069e8:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80069ec:	6011      	str	r1, [r2, #0]
  return result;
 80069ee:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80069f2:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80069f6:	6812      	ldr	r2, [r2, #0]
 80069f8:	fab2 f282 	clz	r2, r2
 80069fc:	b2d2      	uxtb	r2, r2
 80069fe:	f042 0220 	orr.w	r2, r2, #32
 8006a02:	b2d2      	uxtb	r2, r2
 8006a04:	f002 021f 	and.w	r2, r2, #31
 8006a08:	2101      	movs	r1, #1
 8006a0a:	fa01 f202 	lsl.w	r2, r1, r2
 8006a0e:	4013      	ands	r3, r2
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d187      	bne.n	8006924 <HAL_RCC_OscConfig+0xed0>
 8006a14:	e03a      	b.n	8006a8c <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006a1a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	699b      	ldr	r3, [r3, #24]
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d104      	bne.n	8006a30 <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e031      	b.n	8006a8e <HAL_RCC_OscConfig+0x103a>
 8006a2a:	bf00      	nop
 8006a2c:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006a30:	4b19      	ldr	r3, [pc, #100]	@ (8006a98 <HAL_RCC_OscConfig+0x1044>)
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8006a38:	4b17      	ldr	r3, [pc, #92]	@ (8006a98 <HAL_RCC_OscConfig+0x1044>)
 8006a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a3c:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006a40:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8006a44:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8006a48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006a4c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	69db      	ldr	r3, [r3, #28]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d117      	bne.n	8006a88 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8006a58:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8006a5c:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006a60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006a64:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d10b      	bne.n	8006a88 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8006a70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006a74:	f003 020f 	and.w	r2, r3, #15
 8006a78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006a7c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d001      	beq.n	8006a8c <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e000      	b.n	8006a8e <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	40021000 	.word	0x40021000

08006a9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b09e      	sub	sp, #120	@ 0x78
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d101      	bne.n	8006ab4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e154      	b.n	8006d5e <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ab4:	4b89      	ldr	r3, [pc, #548]	@ (8006cdc <HAL_RCC_ClockConfig+0x240>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 0307 	and.w	r3, r3, #7
 8006abc:	683a      	ldr	r2, [r7, #0]
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d910      	bls.n	8006ae4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ac2:	4b86      	ldr	r3, [pc, #536]	@ (8006cdc <HAL_RCC_ClockConfig+0x240>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f023 0207 	bic.w	r2, r3, #7
 8006aca:	4984      	ldr	r1, [pc, #528]	@ (8006cdc <HAL_RCC_ClockConfig+0x240>)
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ad2:	4b82      	ldr	r3, [pc, #520]	@ (8006cdc <HAL_RCC_ClockConfig+0x240>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f003 0307 	and.w	r3, r3, #7
 8006ada:	683a      	ldr	r2, [r7, #0]
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d001      	beq.n	8006ae4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e13c      	b.n	8006d5e <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 0302 	and.w	r3, r3, #2
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d008      	beq.n	8006b02 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006af0:	4b7b      	ldr	r3, [pc, #492]	@ (8006ce0 <HAL_RCC_ClockConfig+0x244>)
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	4978      	ldr	r1, [pc, #480]	@ (8006ce0 <HAL_RCC_ClockConfig+0x244>)
 8006afe:	4313      	orrs	r3, r2
 8006b00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f003 0301 	and.w	r3, r3, #1
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	f000 80cd 	beq.w	8006caa <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d137      	bne.n	8006b88 <HAL_RCC_ClockConfig+0xec>
 8006b18:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006b1c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b20:	fa93 f3a3 	rbit	r3, r3
 8006b24:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8006b26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b28:	fab3 f383 	clz	r3, r3
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	2b3f      	cmp	r3, #63	@ 0x3f
 8006b30:	d802      	bhi.n	8006b38 <HAL_RCC_ClockConfig+0x9c>
 8006b32:	4b6b      	ldr	r3, [pc, #428]	@ (8006ce0 <HAL_RCC_ClockConfig+0x244>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	e00f      	b.n	8006b58 <HAL_RCC_ClockConfig+0xbc>
 8006b38:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006b3c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b3e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006b40:	fa93 f3a3 	rbit	r3, r3
 8006b44:	667b      	str	r3, [r7, #100]	@ 0x64
 8006b46:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006b4a:	663b      	str	r3, [r7, #96]	@ 0x60
 8006b4c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b4e:	fa93 f3a3 	rbit	r3, r3
 8006b52:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b54:	4b62      	ldr	r3, [pc, #392]	@ (8006ce0 <HAL_RCC_ClockConfig+0x244>)
 8006b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b58:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006b5c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006b5e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006b60:	fa92 f2a2 	rbit	r2, r2
 8006b64:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8006b66:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006b68:	fab2 f282 	clz	r2, r2
 8006b6c:	b2d2      	uxtb	r2, r2
 8006b6e:	f042 0220 	orr.w	r2, r2, #32
 8006b72:	b2d2      	uxtb	r2, r2
 8006b74:	f002 021f 	and.w	r2, r2, #31
 8006b78:	2101      	movs	r1, #1
 8006b7a:	fa01 f202 	lsl.w	r2, r1, r2
 8006b7e:	4013      	ands	r3, r2
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d171      	bne.n	8006c68 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	e0ea      	b.n	8006d5e <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	2b02      	cmp	r3, #2
 8006b8e:	d137      	bne.n	8006c00 <HAL_RCC_ClockConfig+0x164>
 8006b90:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006b94:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b98:	fa93 f3a3 	rbit	r3, r3
 8006b9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8006b9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ba0:	fab3 f383 	clz	r3, r3
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	2b3f      	cmp	r3, #63	@ 0x3f
 8006ba8:	d802      	bhi.n	8006bb0 <HAL_RCC_ClockConfig+0x114>
 8006baa:	4b4d      	ldr	r3, [pc, #308]	@ (8006ce0 <HAL_RCC_ClockConfig+0x244>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	e00f      	b.n	8006bd0 <HAL_RCC_ClockConfig+0x134>
 8006bb0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006bb4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bb8:	fa93 f3a3 	rbit	r3, r3
 8006bbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bbe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006bc2:	643b      	str	r3, [r7, #64]	@ 0x40
 8006bc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bc6:	fa93 f3a3 	rbit	r3, r3
 8006bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bcc:	4b44      	ldr	r3, [pc, #272]	@ (8006ce0 <HAL_RCC_ClockConfig+0x244>)
 8006bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bd0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006bd4:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006bd6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006bd8:	fa92 f2a2 	rbit	r2, r2
 8006bdc:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8006bde:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006be0:	fab2 f282 	clz	r2, r2
 8006be4:	b2d2      	uxtb	r2, r2
 8006be6:	f042 0220 	orr.w	r2, r2, #32
 8006bea:	b2d2      	uxtb	r2, r2
 8006bec:	f002 021f 	and.w	r2, r2, #31
 8006bf0:	2101      	movs	r1, #1
 8006bf2:	fa01 f202 	lsl.w	r2, r1, r2
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d135      	bne.n	8006c68 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	e0ae      	b.n	8006d5e <HAL_RCC_ClockConfig+0x2c2>
 8006c00:	2302      	movs	r3, #2
 8006c02:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c06:	fa93 f3a3 	rbit	r3, r3
 8006c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8006c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c0e:	fab3 f383 	clz	r3, r3
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	2b3f      	cmp	r3, #63	@ 0x3f
 8006c16:	d802      	bhi.n	8006c1e <HAL_RCC_ClockConfig+0x182>
 8006c18:	4b31      	ldr	r3, [pc, #196]	@ (8006ce0 <HAL_RCC_ClockConfig+0x244>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	e00d      	b.n	8006c3a <HAL_RCC_ClockConfig+0x19e>
 8006c1e:	2302      	movs	r3, #2
 8006c20:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c24:	fa93 f3a3 	rbit	r3, r3
 8006c28:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c2a:	2302      	movs	r3, #2
 8006c2c:	623b      	str	r3, [r7, #32]
 8006c2e:	6a3b      	ldr	r3, [r7, #32]
 8006c30:	fa93 f3a3 	rbit	r3, r3
 8006c34:	61fb      	str	r3, [r7, #28]
 8006c36:	4b2a      	ldr	r3, [pc, #168]	@ (8006ce0 <HAL_RCC_ClockConfig+0x244>)
 8006c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c3a:	2202      	movs	r2, #2
 8006c3c:	61ba      	str	r2, [r7, #24]
 8006c3e:	69ba      	ldr	r2, [r7, #24]
 8006c40:	fa92 f2a2 	rbit	r2, r2
 8006c44:	617a      	str	r2, [r7, #20]
  return result;
 8006c46:	697a      	ldr	r2, [r7, #20]
 8006c48:	fab2 f282 	clz	r2, r2
 8006c4c:	b2d2      	uxtb	r2, r2
 8006c4e:	f042 0220 	orr.w	r2, r2, #32
 8006c52:	b2d2      	uxtb	r2, r2
 8006c54:	f002 021f 	and.w	r2, r2, #31
 8006c58:	2101      	movs	r1, #1
 8006c5a:	fa01 f202 	lsl.w	r2, r1, r2
 8006c5e:	4013      	ands	r3, r2
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d101      	bne.n	8006c68 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	e07a      	b.n	8006d5e <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c68:	4b1d      	ldr	r3, [pc, #116]	@ (8006ce0 <HAL_RCC_ClockConfig+0x244>)
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	f023 0203 	bic.w	r2, r3, #3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	491a      	ldr	r1, [pc, #104]	@ (8006ce0 <HAL_RCC_ClockConfig+0x244>)
 8006c76:	4313      	orrs	r3, r2
 8006c78:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c7a:	f7fb fa53 	bl	8002124 <HAL_GetTick>
 8006c7e:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c80:	e00a      	b.n	8006c98 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c82:	f7fb fa4f 	bl	8002124 <HAL_GetTick>
 8006c86:	4602      	mov	r2, r0
 8006c88:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006c8a:	1ad3      	subs	r3, r2, r3
 8006c8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d901      	bls.n	8006c98 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8006c94:	2303      	movs	r3, #3
 8006c96:	e062      	b.n	8006d5e <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c98:	4b11      	ldr	r3, [pc, #68]	@ (8006ce0 <HAL_RCC_ClockConfig+0x244>)
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	f003 020c 	and.w	r2, r3, #12
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d1eb      	bne.n	8006c82 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006caa:	4b0c      	ldr	r3, [pc, #48]	@ (8006cdc <HAL_RCC_ClockConfig+0x240>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f003 0307 	and.w	r3, r3, #7
 8006cb2:	683a      	ldr	r2, [r7, #0]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d215      	bcs.n	8006ce4 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cb8:	4b08      	ldr	r3, [pc, #32]	@ (8006cdc <HAL_RCC_ClockConfig+0x240>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f023 0207 	bic.w	r2, r3, #7
 8006cc0:	4906      	ldr	r1, [pc, #24]	@ (8006cdc <HAL_RCC_ClockConfig+0x240>)
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cc8:	4b04      	ldr	r3, [pc, #16]	@ (8006cdc <HAL_RCC_ClockConfig+0x240>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 0307 	and.w	r3, r3, #7
 8006cd0:	683a      	ldr	r2, [r7, #0]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d006      	beq.n	8006ce4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e041      	b.n	8006d5e <HAL_RCC_ClockConfig+0x2c2>
 8006cda:	bf00      	nop
 8006cdc:	40022000 	.word	0x40022000
 8006ce0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f003 0304 	and.w	r3, r3, #4
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d008      	beq.n	8006d02 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006cf0:	4b1d      	ldr	r3, [pc, #116]	@ (8006d68 <HAL_RCC_ClockConfig+0x2cc>)
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	491a      	ldr	r1, [pc, #104]	@ (8006d68 <HAL_RCC_ClockConfig+0x2cc>)
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 0308 	and.w	r3, r3, #8
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d009      	beq.n	8006d22 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d0e:	4b16      	ldr	r3, [pc, #88]	@ (8006d68 <HAL_RCC_ClockConfig+0x2cc>)
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	691b      	ldr	r3, [r3, #16]
 8006d1a:	00db      	lsls	r3, r3, #3
 8006d1c:	4912      	ldr	r1, [pc, #72]	@ (8006d68 <HAL_RCC_ClockConfig+0x2cc>)
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006d22:	f000 f829 	bl	8006d78 <HAL_RCC_GetSysClockFreq>
 8006d26:	4601      	mov	r1, r0
 8006d28:	4b0f      	ldr	r3, [pc, #60]	@ (8006d68 <HAL_RCC_ClockConfig+0x2cc>)
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006d30:	22f0      	movs	r2, #240	@ 0xf0
 8006d32:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d34:	693a      	ldr	r2, [r7, #16]
 8006d36:	fa92 f2a2 	rbit	r2, r2
 8006d3a:	60fa      	str	r2, [r7, #12]
  return result;
 8006d3c:	68fa      	ldr	r2, [r7, #12]
 8006d3e:	fab2 f282 	clz	r2, r2
 8006d42:	b2d2      	uxtb	r2, r2
 8006d44:	40d3      	lsrs	r3, r2
 8006d46:	4a09      	ldr	r2, [pc, #36]	@ (8006d6c <HAL_RCC_ClockConfig+0x2d0>)
 8006d48:	5cd3      	ldrb	r3, [r2, r3]
 8006d4a:	fa21 f303 	lsr.w	r3, r1, r3
 8006d4e:	4a08      	ldr	r2, [pc, #32]	@ (8006d70 <HAL_RCC_ClockConfig+0x2d4>)
 8006d50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006d52:	4b08      	ldr	r3, [pc, #32]	@ (8006d74 <HAL_RCC_ClockConfig+0x2d8>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7fb f9a0 	bl	800209c <HAL_InitTick>
  
  return HAL_OK;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3778      	adds	r7, #120	@ 0x78
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	40021000 	.word	0x40021000
 8006d6c:	0800c214 	.word	0x0800c214
 8006d70:	20000000 	.word	0x20000000
 8006d74:	20000004 	.word	0x20000004

08006d78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b087      	sub	sp, #28
 8006d7c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	60fb      	str	r3, [r7, #12]
 8006d82:	2300      	movs	r3, #0
 8006d84:	60bb      	str	r3, [r7, #8]
 8006d86:	2300      	movs	r3, #0
 8006d88:	617b      	str	r3, [r7, #20]
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8006d92:	4b1f      	ldr	r3, [pc, #124]	@ (8006e10 <HAL_RCC_GetSysClockFreq+0x98>)
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f003 030c 	and.w	r3, r3, #12
 8006d9e:	2b04      	cmp	r3, #4
 8006da0:	d002      	beq.n	8006da8 <HAL_RCC_GetSysClockFreq+0x30>
 8006da2:	2b08      	cmp	r3, #8
 8006da4:	d003      	beq.n	8006dae <HAL_RCC_GetSysClockFreq+0x36>
 8006da6:	e029      	b.n	8006dfc <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006da8:	4b1a      	ldr	r3, [pc, #104]	@ (8006e14 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006daa:	613b      	str	r3, [r7, #16]
      break;
 8006dac:	e029      	b.n	8006e02 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	0c9b      	lsrs	r3, r3, #18
 8006db2:	f003 030f 	and.w	r3, r3, #15
 8006db6:	4a18      	ldr	r2, [pc, #96]	@ (8006e18 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006db8:	5cd3      	ldrb	r3, [r2, r3]
 8006dba:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8006dbc:	4b14      	ldr	r3, [pc, #80]	@ (8006e10 <HAL_RCC_GetSysClockFreq+0x98>)
 8006dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dc0:	f003 030f 	and.w	r3, r3, #15
 8006dc4:	4a15      	ldr	r2, [pc, #84]	@ (8006e1c <HAL_RCC_GetSysClockFreq+0xa4>)
 8006dc6:	5cd3      	ldrb	r3, [r2, r3]
 8006dc8:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d008      	beq.n	8006de6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006dd4:	4a0f      	ldr	r2, [pc, #60]	@ (8006e14 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	fb02 f303 	mul.w	r3, r2, r3
 8006de2:	617b      	str	r3, [r7, #20]
 8006de4:	e007      	b.n	8006df6 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006de6:	4a0b      	ldr	r2, [pc, #44]	@ (8006e14 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	fbb2 f2f3 	udiv	r2, r2, r3
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	fb02 f303 	mul.w	r3, r2, r3
 8006df4:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	613b      	str	r3, [r7, #16]
      break;
 8006dfa:	e002      	b.n	8006e02 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006dfc:	4b05      	ldr	r3, [pc, #20]	@ (8006e14 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006dfe:	613b      	str	r3, [r7, #16]
      break;
 8006e00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e02:	693b      	ldr	r3, [r7, #16]
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	371c      	adds	r7, #28
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr
 8006e10:	40021000 	.word	0x40021000
 8006e14:	007a1200 	.word	0x007a1200
 8006e18:	0800c22c 	.word	0x0800c22c
 8006e1c:	0800c23c 	.word	0x0800c23c

08006e20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e20:	b480      	push	{r7}
 8006e22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e24:	4b03      	ldr	r3, [pc, #12]	@ (8006e34 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e26:	681b      	ldr	r3, [r3, #0]
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr
 8006e32:	bf00      	nop
 8006e34:	20000000 	.word	0x20000000

08006e38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8006e3e:	f7ff ffef 	bl	8006e20 <HAL_RCC_GetHCLKFreq>
 8006e42:	4601      	mov	r1, r0
 8006e44:	4b0b      	ldr	r3, [pc, #44]	@ (8006e74 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006e4c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8006e50:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	fa92 f2a2 	rbit	r2, r2
 8006e58:	603a      	str	r2, [r7, #0]
  return result;
 8006e5a:	683a      	ldr	r2, [r7, #0]
 8006e5c:	fab2 f282 	clz	r2, r2
 8006e60:	b2d2      	uxtb	r2, r2
 8006e62:	40d3      	lsrs	r3, r2
 8006e64:	4a04      	ldr	r2, [pc, #16]	@ (8006e78 <HAL_RCC_GetPCLK1Freq+0x40>)
 8006e66:	5cd3      	ldrb	r3, [r2, r3]
 8006e68:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3708      	adds	r7, #8
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}
 8006e74:	40021000 	.word	0x40021000
 8006e78:	0800c224 	.word	0x0800c224

08006e7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8006e82:	f7ff ffcd 	bl	8006e20 <HAL_RCC_GetHCLKFreq>
 8006e86:	4601      	mov	r1, r0
 8006e88:	4b0b      	ldr	r3, [pc, #44]	@ (8006eb8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8006e90:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8006e94:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	fa92 f2a2 	rbit	r2, r2
 8006e9c:	603a      	str	r2, [r7, #0]
  return result;
 8006e9e:	683a      	ldr	r2, [r7, #0]
 8006ea0:	fab2 f282 	clz	r2, r2
 8006ea4:	b2d2      	uxtb	r2, r2
 8006ea6:	40d3      	lsrs	r3, r2
 8006ea8:	4a04      	ldr	r2, [pc, #16]	@ (8006ebc <HAL_RCC_GetPCLK2Freq+0x40>)
 8006eaa:	5cd3      	ldrb	r3, [r2, r3]
 8006eac:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3708      	adds	r7, #8
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	40021000 	.word	0x40021000
 8006ebc:	0800c224 	.word	0x0800c224

08006ec0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b092      	sub	sp, #72	@ 0x48
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	f000 80d2 	beq.w	8007088 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ee4:	4b4d      	ldr	r3, [pc, #308]	@ (800701c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8006ee6:	69db      	ldr	r3, [r3, #28]
 8006ee8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d10e      	bne.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ef0:	4b4a      	ldr	r3, [pc, #296]	@ (800701c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8006ef2:	69db      	ldr	r3, [r3, #28]
 8006ef4:	4a49      	ldr	r2, [pc, #292]	@ (800701c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8006ef6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006efa:	61d3      	str	r3, [r2, #28]
 8006efc:	4b47      	ldr	r3, [pc, #284]	@ (800701c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8006efe:	69db      	ldr	r3, [r3, #28]
 8006f00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f04:	60bb      	str	r3, [r7, #8]
 8006f06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f0e:	4b44      	ldr	r3, [pc, #272]	@ (8007020 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d118      	bne.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f1a:	4b41      	ldr	r3, [pc, #260]	@ (8007020 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a40      	ldr	r2, [pc, #256]	@ (8007020 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f24:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f26:	f7fb f8fd 	bl	8002124 <HAL_GetTick>
 8006f2a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f2c:	e008      	b.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f2e:	f7fb f8f9 	bl	8002124 <HAL_GetTick>
 8006f32:	4602      	mov	r2, r0
 8006f34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f36:	1ad3      	subs	r3, r2, r3
 8006f38:	2b64      	cmp	r3, #100	@ 0x64
 8006f3a:	d901      	bls.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006f3c:	2303      	movs	r3, #3
 8006f3e:	e1d4      	b.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f40:	4b37      	ldr	r3, [pc, #220]	@ (8007020 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d0f0      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006f4c:	4b33      	ldr	r3, [pc, #204]	@ (800701c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8006f4e:	6a1b      	ldr	r3, [r3, #32]
 8006f50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006f56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	f000 8082 	beq.w	8007062 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f66:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d07a      	beq.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006f6c:	4b2b      	ldr	r3, [pc, #172]	@ (800701c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8006f6e:	6a1b      	ldr	r3, [r3, #32]
 8006f70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f76:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006f7a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f7e:	fa93 f3a3 	rbit	r3, r3
 8006f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8006f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006f86:	fab3 f383 	clz	r3, r3
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	4b25      	ldr	r3, [pc, #148]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006f90:	4413      	add	r3, r2
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	461a      	mov	r2, r3
 8006f96:	2301      	movs	r3, #1
 8006f98:	6013      	str	r3, [r2, #0]
 8006f9a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006f9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fa2:	fa93 f3a3 	rbit	r3, r3
 8006fa6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8006fa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006faa:	fab3 f383 	clz	r3, r3
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	4b1c      	ldr	r3, [pc, #112]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006fb4:	4413      	add	r3, r2
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	461a      	mov	r2, r3
 8006fba:	2300      	movs	r3, #0
 8006fbc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006fbe:	4a17      	ldr	r2, [pc, #92]	@ (800701c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8006fc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fc2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006fc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fc6:	f003 0301 	and.w	r3, r3, #1
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d049      	beq.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fce:	f7fb f8a9 	bl	8002124 <HAL_GetTick>
 8006fd2:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fd4:	e00a      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fd6:	f7fb f8a5 	bl	8002124 <HAL_GetTick>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fde:	1ad3      	subs	r3, r2, r3
 8006fe0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d901      	bls.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006fe8:	2303      	movs	r3, #3
 8006fea:	e17e      	b.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8006fec:	2302      	movs	r3, #2
 8006fee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ff2:	fa93 f3a3 	rbit	r3, r3
 8006ff6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ff8:	2302      	movs	r3, #2
 8006ffa:	623b      	str	r3, [r7, #32]
 8006ffc:	6a3b      	ldr	r3, [r7, #32]
 8006ffe:	fa93 f3a3 	rbit	r3, r3
 8007002:	61fb      	str	r3, [r7, #28]
  return result;
 8007004:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007006:	fab3 f383 	clz	r3, r3
 800700a:	b2db      	uxtb	r3, r3
 800700c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8007010:	b2db      	uxtb	r3, r3
 8007012:	2b00      	cmp	r3, #0
 8007014:	d108      	bne.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007016:	4b01      	ldr	r3, [pc, #4]	@ (800701c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8007018:	6a1b      	ldr	r3, [r3, #32]
 800701a:	e00d      	b.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x178>
 800701c:	40021000 	.word	0x40021000
 8007020:	40007000 	.word	0x40007000
 8007024:	10908100 	.word	0x10908100
 8007028:	2302      	movs	r3, #2
 800702a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800702c:	69bb      	ldr	r3, [r7, #24]
 800702e:	fa93 f3a3 	rbit	r3, r3
 8007032:	617b      	str	r3, [r7, #20]
 8007034:	4b9a      	ldr	r3, [pc, #616]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007038:	2202      	movs	r2, #2
 800703a:	613a      	str	r2, [r7, #16]
 800703c:	693a      	ldr	r2, [r7, #16]
 800703e:	fa92 f2a2 	rbit	r2, r2
 8007042:	60fa      	str	r2, [r7, #12]
  return result;
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	fab2 f282 	clz	r2, r2
 800704a:	b2d2      	uxtb	r2, r2
 800704c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007050:	b2d2      	uxtb	r2, r2
 8007052:	f002 021f 	and.w	r2, r2, #31
 8007056:	2101      	movs	r1, #1
 8007058:	fa01 f202 	lsl.w	r2, r1, r2
 800705c:	4013      	ands	r3, r2
 800705e:	2b00      	cmp	r3, #0
 8007060:	d0b9      	beq.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8007062:	4b8f      	ldr	r3, [pc, #572]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007064:	6a1b      	ldr	r3, [r3, #32]
 8007066:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	498c      	ldr	r1, [pc, #560]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007070:	4313      	orrs	r3, r2
 8007072:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007074:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007078:	2b01      	cmp	r3, #1
 800707a:	d105      	bne.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800707c:	4b88      	ldr	r3, [pc, #544]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800707e:	69db      	ldr	r3, [r3, #28]
 8007080:	4a87      	ldr	r2, [pc, #540]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007082:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007086:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 0301 	and.w	r3, r3, #1
 8007090:	2b00      	cmp	r3, #0
 8007092:	d008      	beq.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007094:	4b82      	ldr	r3, [pc, #520]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007098:	f023 0203 	bic.w	r2, r3, #3
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	497f      	ldr	r1, [pc, #508]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070a2:	4313      	orrs	r3, r2
 80070a4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f003 0302 	and.w	r3, r3, #2
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d008      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80070b2:	4b7b      	ldr	r3, [pc, #492]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070b6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	68db      	ldr	r3, [r3, #12]
 80070be:	4978      	ldr	r1, [pc, #480]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070c0:	4313      	orrs	r3, r2
 80070c2:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f003 0304 	and.w	r3, r3, #4
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d008      	beq.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80070d0:	4b73      	ldr	r3, [pc, #460]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070d4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	4970      	ldr	r1, [pc, #448]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070de:	4313      	orrs	r3, r2
 80070e0:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 0320 	and.w	r3, r3, #32
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d008      	beq.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80070ee:	4b6c      	ldr	r3, [pc, #432]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070f2:	f023 0210 	bic.w	r2, r3, #16
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	69db      	ldr	r3, [r3, #28]
 80070fa:	4969      	ldr	r1, [pc, #420]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070fc:	4313      	orrs	r3, r2
 80070fe:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007108:	2b00      	cmp	r3, #0
 800710a:	d008      	beq.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800710c:	4b64      	ldr	r3, [pc, #400]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007118:	4961      	ldr	r1, [pc, #388]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800711a:	4313      	orrs	r3, r2
 800711c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007126:	2b00      	cmp	r3, #0
 8007128:	d008      	beq.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800712a:	4b5d      	ldr	r3, [pc, #372]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800712c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800712e:	f023 0220 	bic.w	r2, r3, #32
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a1b      	ldr	r3, [r3, #32]
 8007136:	495a      	ldr	r1, [pc, #360]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007138:	4313      	orrs	r3, r2
 800713a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007144:	2b00      	cmp	r3, #0
 8007146:	d008      	beq.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007148:	4b55      	ldr	r3, [pc, #340]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800714a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800714c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007154:	4952      	ldr	r1, [pc, #328]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007156:	4313      	orrs	r3, r2
 8007158:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f003 0308 	and.w	r3, r3, #8
 8007162:	2b00      	cmp	r3, #0
 8007164:	d008      	beq.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007166:	4b4e      	ldr	r3, [pc, #312]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800716a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	695b      	ldr	r3, [r3, #20]
 8007172:	494b      	ldr	r1, [pc, #300]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007174:	4313      	orrs	r3, r2
 8007176:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f003 0310 	and.w	r3, r3, #16
 8007180:	2b00      	cmp	r3, #0
 8007182:	d008      	beq.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007184:	4b46      	ldr	r3, [pc, #280]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007188:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	699b      	ldr	r3, [r3, #24]
 8007190:	4943      	ldr	r1, [pc, #268]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007192:	4313      	orrs	r3, r2
 8007194:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d008      	beq.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80071a2:	4b3f      	ldr	r3, [pc, #252]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071ae:	493c      	ldr	r1, [pc, #240]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071b0:	4313      	orrs	r3, r2
 80071b2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d008      	beq.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80071c0:	4b37      	ldr	r3, [pc, #220]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071c4:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071cc:	4934      	ldr	r1, [pc, #208]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071ce:	4313      	orrs	r3, r2
 80071d0:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d008      	beq.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80071de:	4b30      	ldr	r3, [pc, #192]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071e2:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ea:	492d      	ldr	r1, [pc, #180]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071ec:	4313      	orrs	r3, r2
 80071ee:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d008      	beq.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80071fc:	4b28      	ldr	r3, [pc, #160]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007200:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007208:	4925      	ldr	r1, [pc, #148]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800720a:	4313      	orrs	r3, r2
 800720c:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007216:	2b00      	cmp	r3, #0
 8007218:	d008      	beq.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800721a:	4b21      	ldr	r3, [pc, #132]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800721c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800721e:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007226:	491e      	ldr	r1, [pc, #120]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007228:	4313      	orrs	r3, r2
 800722a:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007234:	2b00      	cmp	r3, #0
 8007236:	d008      	beq.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8007238:	4b19      	ldr	r3, [pc, #100]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800723a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800723c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007244:	4916      	ldr	r1, [pc, #88]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007246:	4313      	orrs	r3, r2
 8007248:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007252:	2b00      	cmp	r3, #0
 8007254:	d008      	beq.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8007256:	4b12      	ldr	r3, [pc, #72]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800725a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007262:	490f      	ldr	r1, [pc, #60]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007264:	4313      	orrs	r3, r2
 8007266:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007270:	2b00      	cmp	r3, #0
 8007272:	d008      	beq.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8007274:	4b0a      	ldr	r3, [pc, #40]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007278:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007280:	4907      	ldr	r1, [pc, #28]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007282:	4313      	orrs	r3, r2
 8007284:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800728e:	2b00      	cmp	r3, #0
 8007290:	d00c      	beq.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8007292:	4b03      	ldr	r3, [pc, #12]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007296:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	e002      	b.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800729e:	bf00      	nop
 80072a0:	40021000 	.word	0x40021000
 80072a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072a6:	4913      	ldr	r1, [pc, #76]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80072a8:	4313      	orrs	r3, r2
 80072aa:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d008      	beq.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80072b8:	4b0e      	ldr	r3, [pc, #56]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80072ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072bc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072c4:	490b      	ldr	r1, [pc, #44]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80072c6:	4313      	orrs	r3, r2
 80072c8:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d008      	beq.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80072d6:	4b07      	ldr	r3, [pc, #28]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80072d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072da:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072e2:	4904      	ldr	r1, [pc, #16]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80072e4:	4313      	orrs	r3, r2
 80072e6:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80072e8:	2300      	movs	r3, #0
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3748      	adds	r7, #72	@ 0x48
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	40021000 	.word	0x40021000

080072f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d101      	bne.n	800730a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	e040      	b.n	800738c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800730e:	2b00      	cmp	r3, #0
 8007310:	d106      	bne.n	8007320 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f7fa fdd6 	bl	8001ecc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2224      	movs	r2, #36	@ 0x24
 8007324:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f022 0201 	bic.w	r2, r2, #1
 8007334:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800733a:	2b00      	cmp	r3, #0
 800733c:	d002      	beq.n	8007344 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 fb4e 	bl	80079e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 f977 	bl	8007638 <UART_SetConfig>
 800734a:	4603      	mov	r3, r0
 800734c:	2b01      	cmp	r3, #1
 800734e:	d101      	bne.n	8007354 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007350:	2301      	movs	r3, #1
 8007352:	e01b      	b.n	800738c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	685a      	ldr	r2, [r3, #4]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007362:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	689a      	ldr	r2, [r3, #8]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007372:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f042 0201 	orr.w	r2, r2, #1
 8007382:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 fbcd 	bl	8007b24 <UART_CheckIdleState>
 800738a:	4603      	mov	r3, r0
}
 800738c:	4618      	mov	r0, r3
 800738e:	3708      	adds	r7, #8
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b08a      	sub	sp, #40	@ 0x28
 8007398:	af02      	add	r7, sp, #8
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	603b      	str	r3, [r7, #0]
 80073a0:	4613      	mov	r3, r2
 80073a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80073a8:	2b20      	cmp	r3, #32
 80073aa:	d177      	bne.n	800749c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d002      	beq.n	80073b8 <HAL_UART_Transmit+0x24>
 80073b2:	88fb      	ldrh	r3, [r7, #6]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d101      	bne.n	80073bc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	e070      	b.n	800749e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2200      	movs	r2, #0
 80073c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2221      	movs	r2, #33	@ 0x21
 80073c8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80073ca:	f7fa feab 	bl	8002124 <HAL_GetTick>
 80073ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	88fa      	ldrh	r2, [r7, #6]
 80073d4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	88fa      	ldrh	r2, [r7, #6]
 80073dc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073e8:	d108      	bne.n	80073fc <HAL_UART_Transmit+0x68>
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	691b      	ldr	r3, [r3, #16]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d104      	bne.n	80073fc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80073f2:	2300      	movs	r3, #0
 80073f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	61bb      	str	r3, [r7, #24]
 80073fa:	e003      	b.n	8007404 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007400:	2300      	movs	r3, #0
 8007402:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007404:	e02f      	b.n	8007466 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	9300      	str	r3, [sp, #0]
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	2200      	movs	r2, #0
 800740e:	2180      	movs	r1, #128	@ 0x80
 8007410:	68f8      	ldr	r0, [r7, #12]
 8007412:	f000 fc2f 	bl	8007c74 <UART_WaitOnFlagUntilTimeout>
 8007416:	4603      	mov	r3, r0
 8007418:	2b00      	cmp	r3, #0
 800741a:	d004      	beq.n	8007426 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2220      	movs	r2, #32
 8007420:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007422:	2303      	movs	r3, #3
 8007424:	e03b      	b.n	800749e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8007426:	69fb      	ldr	r3, [r7, #28]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d10b      	bne.n	8007444 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800742c:	69bb      	ldr	r3, [r7, #24]
 800742e:	881a      	ldrh	r2, [r3, #0]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007438:	b292      	uxth	r2, r2
 800743a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	3302      	adds	r3, #2
 8007440:	61bb      	str	r3, [r7, #24]
 8007442:	e007      	b.n	8007454 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007444:	69fb      	ldr	r3, [r7, #28]
 8007446:	781a      	ldrb	r2, [r3, #0]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	3301      	adds	r3, #1
 8007452:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800745a:	b29b      	uxth	r3, r3
 800745c:	3b01      	subs	r3, #1
 800745e:	b29a      	uxth	r2, r3
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800746c:	b29b      	uxth	r3, r3
 800746e:	2b00      	cmp	r3, #0
 8007470:	d1c9      	bne.n	8007406 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	9300      	str	r3, [sp, #0]
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	2200      	movs	r2, #0
 800747a:	2140      	movs	r1, #64	@ 0x40
 800747c:	68f8      	ldr	r0, [r7, #12]
 800747e:	f000 fbf9 	bl	8007c74 <UART_WaitOnFlagUntilTimeout>
 8007482:	4603      	mov	r3, r0
 8007484:	2b00      	cmp	r3, #0
 8007486:	d004      	beq.n	8007492 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2220      	movs	r2, #32
 800748c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800748e:	2303      	movs	r3, #3
 8007490:	e005      	b.n	800749e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2220      	movs	r2, #32
 8007496:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007498:	2300      	movs	r3, #0
 800749a:	e000      	b.n	800749e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800749c:	2302      	movs	r3, #2
  }
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3720      	adds	r7, #32
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}

080074a6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b08a      	sub	sp, #40	@ 0x28
 80074aa:	af02      	add	r7, sp, #8
 80074ac:	60f8      	str	r0, [r7, #12]
 80074ae:	60b9      	str	r1, [r7, #8]
 80074b0:	603b      	str	r3, [r7, #0]
 80074b2:	4613      	mov	r3, r2
 80074b4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074bc:	2b20      	cmp	r3, #32
 80074be:	f040 80b6 	bne.w	800762e <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d002      	beq.n	80074ce <HAL_UART_Receive+0x28>
 80074c8:	88fb      	ldrh	r3, [r7, #6]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d101      	bne.n	80074d2 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80074ce:	2301      	movs	r3, #1
 80074d0:	e0ae      	b.n	8007630 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2200      	movs	r2, #0
 80074d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2222      	movs	r2, #34	@ 0x22
 80074de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2200      	movs	r2, #0
 80074e6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80074e8:	f7fa fe1c 	bl	8002124 <HAL_GetTick>
 80074ec:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	88fa      	ldrh	r2, [r7, #6]
 80074f2:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	88fa      	ldrh	r2, [r7, #6]
 80074fa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007506:	d10e      	bne.n	8007526 <HAL_UART_Receive+0x80>
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	691b      	ldr	r3, [r3, #16]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d105      	bne.n	800751c <HAL_UART_Receive+0x76>
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007516:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800751a:	e02d      	b.n	8007578 <HAL_UART_Receive+0xd2>
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	22ff      	movs	r2, #255	@ 0xff
 8007520:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007524:	e028      	b.n	8007578 <HAL_UART_Receive+0xd2>
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d10d      	bne.n	800754a <HAL_UART_Receive+0xa4>
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	691b      	ldr	r3, [r3, #16]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d104      	bne.n	8007540 <HAL_UART_Receive+0x9a>
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	22ff      	movs	r2, #255	@ 0xff
 800753a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800753e:	e01b      	b.n	8007578 <HAL_UART_Receive+0xd2>
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	227f      	movs	r2, #127	@ 0x7f
 8007544:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007548:	e016      	b.n	8007578 <HAL_UART_Receive+0xd2>
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007552:	d10d      	bne.n	8007570 <HAL_UART_Receive+0xca>
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	691b      	ldr	r3, [r3, #16]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d104      	bne.n	8007566 <HAL_UART_Receive+0xc0>
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	227f      	movs	r2, #127	@ 0x7f
 8007560:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007564:	e008      	b.n	8007578 <HAL_UART_Receive+0xd2>
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	223f      	movs	r2, #63	@ 0x3f
 800756a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800756e:	e003      	b.n	8007578 <HAL_UART_Receive+0xd2>
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2200      	movs	r2, #0
 8007574:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800757e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007588:	d108      	bne.n	800759c <HAL_UART_Receive+0xf6>
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	691b      	ldr	r3, [r3, #16]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d104      	bne.n	800759c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8007592:	2300      	movs	r3, #0
 8007594:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	61bb      	str	r3, [r7, #24]
 800759a:	e003      	b.n	80075a4 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80075a0:	2300      	movs	r3, #0
 80075a2:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80075a4:	e037      	b.n	8007616 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	9300      	str	r3, [sp, #0]
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	2200      	movs	r2, #0
 80075ae:	2120      	movs	r1, #32
 80075b0:	68f8      	ldr	r0, [r7, #12]
 80075b2:	f000 fb5f 	bl	8007c74 <UART_WaitOnFlagUntilTimeout>
 80075b6:	4603      	mov	r3, r0
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d005      	beq.n	80075c8 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2220      	movs	r2, #32
 80075c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 80075c4:	2303      	movs	r3, #3
 80075c6:	e033      	b.n	8007630 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80075c8:	69fb      	ldr	r3, [r7, #28]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d10c      	bne.n	80075e8 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80075d4:	b29a      	uxth	r2, r3
 80075d6:	8a7b      	ldrh	r3, [r7, #18]
 80075d8:	4013      	ands	r3, r2
 80075da:	b29a      	uxth	r2, r3
 80075dc:	69bb      	ldr	r3, [r7, #24]
 80075de:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80075e0:	69bb      	ldr	r3, [r7, #24]
 80075e2:	3302      	adds	r3, #2
 80075e4:	61bb      	str	r3, [r7, #24]
 80075e6:	e00d      	b.n	8007604 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	b2da      	uxtb	r2, r3
 80075f2:	8a7b      	ldrh	r3, [r7, #18]
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	4013      	ands	r3, r2
 80075f8:	b2da      	uxtb	r2, r3
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80075fe:	69fb      	ldr	r3, [r7, #28]
 8007600:	3301      	adds	r3, #1
 8007602:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800760a:	b29b      	uxth	r3, r3
 800760c:	3b01      	subs	r3, #1
 800760e:	b29a      	uxth	r2, r3
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800761c:	b29b      	uxth	r3, r3
 800761e:	2b00      	cmp	r3, #0
 8007620:	d1c1      	bne.n	80075a6 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2220      	movs	r2, #32
 8007626:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 800762a:	2300      	movs	r3, #0
 800762c:	e000      	b.n	8007630 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800762e:	2302      	movs	r3, #2
  }
}
 8007630:	4618      	mov	r0, r3
 8007632:	3720      	adds	r7, #32
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b088      	sub	sp, #32
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007640:	2300      	movs	r3, #0
 8007642:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	689a      	ldr	r2, [r3, #8]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	691b      	ldr	r3, [r3, #16]
 800764c:	431a      	orrs	r2, r3
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	695b      	ldr	r3, [r3, #20]
 8007652:	431a      	orrs	r2, r3
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	69db      	ldr	r3, [r3, #28]
 8007658:	4313      	orrs	r3, r2
 800765a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	4b92      	ldr	r3, [pc, #584]	@ (80078ac <UART_SetConfig+0x274>)
 8007664:	4013      	ands	r3, r2
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	6812      	ldr	r2, [r2, #0]
 800766a:	6979      	ldr	r1, [r7, #20]
 800766c:	430b      	orrs	r3, r1
 800766e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	68da      	ldr	r2, [r3, #12]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	430a      	orrs	r2, r1
 8007684:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	699b      	ldr	r3, [r3, #24]
 800768a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6a1b      	ldr	r3, [r3, #32]
 8007690:	697a      	ldr	r2, [r7, #20]
 8007692:	4313      	orrs	r3, r2
 8007694:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	697a      	ldr	r2, [r7, #20]
 80076a6:	430a      	orrs	r2, r1
 80076a8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a80      	ldr	r2, [pc, #512]	@ (80078b0 <UART_SetConfig+0x278>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d120      	bne.n	80076f6 <UART_SetConfig+0xbe>
 80076b4:	4b7f      	ldr	r3, [pc, #508]	@ (80078b4 <UART_SetConfig+0x27c>)
 80076b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076b8:	f003 0303 	and.w	r3, r3, #3
 80076bc:	2b03      	cmp	r3, #3
 80076be:	d817      	bhi.n	80076f0 <UART_SetConfig+0xb8>
 80076c0:	a201      	add	r2, pc, #4	@ (adr r2, 80076c8 <UART_SetConfig+0x90>)
 80076c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c6:	bf00      	nop
 80076c8:	080076d9 	.word	0x080076d9
 80076cc:	080076e5 	.word	0x080076e5
 80076d0:	080076eb 	.word	0x080076eb
 80076d4:	080076df 	.word	0x080076df
 80076d8:	2301      	movs	r3, #1
 80076da:	77fb      	strb	r3, [r7, #31]
 80076dc:	e0b5      	b.n	800784a <UART_SetConfig+0x212>
 80076de:	2302      	movs	r3, #2
 80076e0:	77fb      	strb	r3, [r7, #31]
 80076e2:	e0b2      	b.n	800784a <UART_SetConfig+0x212>
 80076e4:	2304      	movs	r3, #4
 80076e6:	77fb      	strb	r3, [r7, #31]
 80076e8:	e0af      	b.n	800784a <UART_SetConfig+0x212>
 80076ea:	2308      	movs	r3, #8
 80076ec:	77fb      	strb	r3, [r7, #31]
 80076ee:	e0ac      	b.n	800784a <UART_SetConfig+0x212>
 80076f0:	2310      	movs	r3, #16
 80076f2:	77fb      	strb	r3, [r7, #31]
 80076f4:	e0a9      	b.n	800784a <UART_SetConfig+0x212>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a6f      	ldr	r2, [pc, #444]	@ (80078b8 <UART_SetConfig+0x280>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d124      	bne.n	800774a <UART_SetConfig+0x112>
 8007700:	4b6c      	ldr	r3, [pc, #432]	@ (80078b4 <UART_SetConfig+0x27c>)
 8007702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007704:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007708:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800770c:	d011      	beq.n	8007732 <UART_SetConfig+0xfa>
 800770e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007712:	d817      	bhi.n	8007744 <UART_SetConfig+0x10c>
 8007714:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007718:	d011      	beq.n	800773e <UART_SetConfig+0x106>
 800771a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800771e:	d811      	bhi.n	8007744 <UART_SetConfig+0x10c>
 8007720:	2b00      	cmp	r3, #0
 8007722:	d003      	beq.n	800772c <UART_SetConfig+0xf4>
 8007724:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007728:	d006      	beq.n	8007738 <UART_SetConfig+0x100>
 800772a:	e00b      	b.n	8007744 <UART_SetConfig+0x10c>
 800772c:	2300      	movs	r3, #0
 800772e:	77fb      	strb	r3, [r7, #31]
 8007730:	e08b      	b.n	800784a <UART_SetConfig+0x212>
 8007732:	2302      	movs	r3, #2
 8007734:	77fb      	strb	r3, [r7, #31]
 8007736:	e088      	b.n	800784a <UART_SetConfig+0x212>
 8007738:	2304      	movs	r3, #4
 800773a:	77fb      	strb	r3, [r7, #31]
 800773c:	e085      	b.n	800784a <UART_SetConfig+0x212>
 800773e:	2308      	movs	r3, #8
 8007740:	77fb      	strb	r3, [r7, #31]
 8007742:	e082      	b.n	800784a <UART_SetConfig+0x212>
 8007744:	2310      	movs	r3, #16
 8007746:	77fb      	strb	r3, [r7, #31]
 8007748:	e07f      	b.n	800784a <UART_SetConfig+0x212>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a5b      	ldr	r2, [pc, #364]	@ (80078bc <UART_SetConfig+0x284>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d124      	bne.n	800779e <UART_SetConfig+0x166>
 8007754:	4b57      	ldr	r3, [pc, #348]	@ (80078b4 <UART_SetConfig+0x27c>)
 8007756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007758:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800775c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007760:	d011      	beq.n	8007786 <UART_SetConfig+0x14e>
 8007762:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007766:	d817      	bhi.n	8007798 <UART_SetConfig+0x160>
 8007768:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800776c:	d011      	beq.n	8007792 <UART_SetConfig+0x15a>
 800776e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007772:	d811      	bhi.n	8007798 <UART_SetConfig+0x160>
 8007774:	2b00      	cmp	r3, #0
 8007776:	d003      	beq.n	8007780 <UART_SetConfig+0x148>
 8007778:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800777c:	d006      	beq.n	800778c <UART_SetConfig+0x154>
 800777e:	e00b      	b.n	8007798 <UART_SetConfig+0x160>
 8007780:	2300      	movs	r3, #0
 8007782:	77fb      	strb	r3, [r7, #31]
 8007784:	e061      	b.n	800784a <UART_SetConfig+0x212>
 8007786:	2302      	movs	r3, #2
 8007788:	77fb      	strb	r3, [r7, #31]
 800778a:	e05e      	b.n	800784a <UART_SetConfig+0x212>
 800778c:	2304      	movs	r3, #4
 800778e:	77fb      	strb	r3, [r7, #31]
 8007790:	e05b      	b.n	800784a <UART_SetConfig+0x212>
 8007792:	2308      	movs	r3, #8
 8007794:	77fb      	strb	r3, [r7, #31]
 8007796:	e058      	b.n	800784a <UART_SetConfig+0x212>
 8007798:	2310      	movs	r3, #16
 800779a:	77fb      	strb	r3, [r7, #31]
 800779c:	e055      	b.n	800784a <UART_SetConfig+0x212>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a47      	ldr	r2, [pc, #284]	@ (80078c0 <UART_SetConfig+0x288>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d124      	bne.n	80077f2 <UART_SetConfig+0x1ba>
 80077a8:	4b42      	ldr	r3, [pc, #264]	@ (80078b4 <UART_SetConfig+0x27c>)
 80077aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077ac:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80077b0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80077b4:	d011      	beq.n	80077da <UART_SetConfig+0x1a2>
 80077b6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80077ba:	d817      	bhi.n	80077ec <UART_SetConfig+0x1b4>
 80077bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80077c0:	d011      	beq.n	80077e6 <UART_SetConfig+0x1ae>
 80077c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80077c6:	d811      	bhi.n	80077ec <UART_SetConfig+0x1b4>
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d003      	beq.n	80077d4 <UART_SetConfig+0x19c>
 80077cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80077d0:	d006      	beq.n	80077e0 <UART_SetConfig+0x1a8>
 80077d2:	e00b      	b.n	80077ec <UART_SetConfig+0x1b4>
 80077d4:	2300      	movs	r3, #0
 80077d6:	77fb      	strb	r3, [r7, #31]
 80077d8:	e037      	b.n	800784a <UART_SetConfig+0x212>
 80077da:	2302      	movs	r3, #2
 80077dc:	77fb      	strb	r3, [r7, #31]
 80077de:	e034      	b.n	800784a <UART_SetConfig+0x212>
 80077e0:	2304      	movs	r3, #4
 80077e2:	77fb      	strb	r3, [r7, #31]
 80077e4:	e031      	b.n	800784a <UART_SetConfig+0x212>
 80077e6:	2308      	movs	r3, #8
 80077e8:	77fb      	strb	r3, [r7, #31]
 80077ea:	e02e      	b.n	800784a <UART_SetConfig+0x212>
 80077ec:	2310      	movs	r3, #16
 80077ee:	77fb      	strb	r3, [r7, #31]
 80077f0:	e02b      	b.n	800784a <UART_SetConfig+0x212>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a33      	ldr	r2, [pc, #204]	@ (80078c4 <UART_SetConfig+0x28c>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d124      	bne.n	8007846 <UART_SetConfig+0x20e>
 80077fc:	4b2d      	ldr	r3, [pc, #180]	@ (80078b4 <UART_SetConfig+0x27c>)
 80077fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007800:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8007804:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007808:	d011      	beq.n	800782e <UART_SetConfig+0x1f6>
 800780a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800780e:	d817      	bhi.n	8007840 <UART_SetConfig+0x208>
 8007810:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007814:	d011      	beq.n	800783a <UART_SetConfig+0x202>
 8007816:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800781a:	d811      	bhi.n	8007840 <UART_SetConfig+0x208>
 800781c:	2b00      	cmp	r3, #0
 800781e:	d003      	beq.n	8007828 <UART_SetConfig+0x1f0>
 8007820:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007824:	d006      	beq.n	8007834 <UART_SetConfig+0x1fc>
 8007826:	e00b      	b.n	8007840 <UART_SetConfig+0x208>
 8007828:	2300      	movs	r3, #0
 800782a:	77fb      	strb	r3, [r7, #31]
 800782c:	e00d      	b.n	800784a <UART_SetConfig+0x212>
 800782e:	2302      	movs	r3, #2
 8007830:	77fb      	strb	r3, [r7, #31]
 8007832:	e00a      	b.n	800784a <UART_SetConfig+0x212>
 8007834:	2304      	movs	r3, #4
 8007836:	77fb      	strb	r3, [r7, #31]
 8007838:	e007      	b.n	800784a <UART_SetConfig+0x212>
 800783a:	2308      	movs	r3, #8
 800783c:	77fb      	strb	r3, [r7, #31]
 800783e:	e004      	b.n	800784a <UART_SetConfig+0x212>
 8007840:	2310      	movs	r3, #16
 8007842:	77fb      	strb	r3, [r7, #31]
 8007844:	e001      	b.n	800784a <UART_SetConfig+0x212>
 8007846:	2310      	movs	r3, #16
 8007848:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	69db      	ldr	r3, [r3, #28]
 800784e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007852:	d16b      	bne.n	800792c <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8007854:	7ffb      	ldrb	r3, [r7, #31]
 8007856:	2b08      	cmp	r3, #8
 8007858:	d838      	bhi.n	80078cc <UART_SetConfig+0x294>
 800785a:	a201      	add	r2, pc, #4	@ (adr r2, 8007860 <UART_SetConfig+0x228>)
 800785c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007860:	08007885 	.word	0x08007885
 8007864:	0800788d 	.word	0x0800788d
 8007868:	08007895 	.word	0x08007895
 800786c:	080078cd 	.word	0x080078cd
 8007870:	0800789b 	.word	0x0800789b
 8007874:	080078cd 	.word	0x080078cd
 8007878:	080078cd 	.word	0x080078cd
 800787c:	080078cd 	.word	0x080078cd
 8007880:	080078a3 	.word	0x080078a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007884:	f7ff fad8 	bl	8006e38 <HAL_RCC_GetPCLK1Freq>
 8007888:	61b8      	str	r0, [r7, #24]
        break;
 800788a:	e024      	b.n	80078d6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800788c:	f7ff faf6 	bl	8006e7c <HAL_RCC_GetPCLK2Freq>
 8007890:	61b8      	str	r0, [r7, #24]
        break;
 8007892:	e020      	b.n	80078d6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007894:	4b0c      	ldr	r3, [pc, #48]	@ (80078c8 <UART_SetConfig+0x290>)
 8007896:	61bb      	str	r3, [r7, #24]
        break;
 8007898:	e01d      	b.n	80078d6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800789a:	f7ff fa6d 	bl	8006d78 <HAL_RCC_GetSysClockFreq>
 800789e:	61b8      	str	r0, [r7, #24]
        break;
 80078a0:	e019      	b.n	80078d6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80078a6:	61bb      	str	r3, [r7, #24]
        break;
 80078a8:	e015      	b.n	80078d6 <UART_SetConfig+0x29e>
 80078aa:	bf00      	nop
 80078ac:	efff69f3 	.word	0xefff69f3
 80078b0:	40013800 	.word	0x40013800
 80078b4:	40021000 	.word	0x40021000
 80078b8:	40004400 	.word	0x40004400
 80078bc:	40004800 	.word	0x40004800
 80078c0:	40004c00 	.word	0x40004c00
 80078c4:	40005000 	.word	0x40005000
 80078c8:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80078cc:	2300      	movs	r3, #0
 80078ce:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	77bb      	strb	r3, [r7, #30]
        break;
 80078d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80078d6:	69bb      	ldr	r3, [r7, #24]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d073      	beq.n	80079c4 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80078dc:	69bb      	ldr	r3, [r7, #24]
 80078de:	005a      	lsls	r2, r3, #1
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	085b      	lsrs	r3, r3, #1
 80078e6:	441a      	add	r2, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80078f0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	2b0f      	cmp	r3, #15
 80078f6:	d916      	bls.n	8007926 <UART_SetConfig+0x2ee>
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078fe:	d212      	bcs.n	8007926 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	b29b      	uxth	r3, r3
 8007904:	f023 030f 	bic.w	r3, r3, #15
 8007908:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	085b      	lsrs	r3, r3, #1
 800790e:	b29b      	uxth	r3, r3
 8007910:	f003 0307 	and.w	r3, r3, #7
 8007914:	b29a      	uxth	r2, r3
 8007916:	89fb      	ldrh	r3, [r7, #14]
 8007918:	4313      	orrs	r3, r2
 800791a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	89fa      	ldrh	r2, [r7, #14]
 8007922:	60da      	str	r2, [r3, #12]
 8007924:	e04e      	b.n	80079c4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8007926:	2301      	movs	r3, #1
 8007928:	77bb      	strb	r3, [r7, #30]
 800792a:	e04b      	b.n	80079c4 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800792c:	7ffb      	ldrb	r3, [r7, #31]
 800792e:	2b08      	cmp	r3, #8
 8007930:	d827      	bhi.n	8007982 <UART_SetConfig+0x34a>
 8007932:	a201      	add	r2, pc, #4	@ (adr r2, 8007938 <UART_SetConfig+0x300>)
 8007934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007938:	0800795d 	.word	0x0800795d
 800793c:	08007965 	.word	0x08007965
 8007940:	0800796d 	.word	0x0800796d
 8007944:	08007983 	.word	0x08007983
 8007948:	08007973 	.word	0x08007973
 800794c:	08007983 	.word	0x08007983
 8007950:	08007983 	.word	0x08007983
 8007954:	08007983 	.word	0x08007983
 8007958:	0800797b 	.word	0x0800797b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800795c:	f7ff fa6c 	bl	8006e38 <HAL_RCC_GetPCLK1Freq>
 8007960:	61b8      	str	r0, [r7, #24]
        break;
 8007962:	e013      	b.n	800798c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007964:	f7ff fa8a 	bl	8006e7c <HAL_RCC_GetPCLK2Freq>
 8007968:	61b8      	str	r0, [r7, #24]
        break;
 800796a:	e00f      	b.n	800798c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800796c:	4b1b      	ldr	r3, [pc, #108]	@ (80079dc <UART_SetConfig+0x3a4>)
 800796e:	61bb      	str	r3, [r7, #24]
        break;
 8007970:	e00c      	b.n	800798c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007972:	f7ff fa01 	bl	8006d78 <HAL_RCC_GetSysClockFreq>
 8007976:	61b8      	str	r0, [r7, #24]
        break;
 8007978:	e008      	b.n	800798c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800797a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800797e:	61bb      	str	r3, [r7, #24]
        break;
 8007980:	e004      	b.n	800798c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8007982:	2300      	movs	r3, #0
 8007984:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	77bb      	strb	r3, [r7, #30]
        break;
 800798a:	bf00      	nop
    }

    if (pclk != 0U)
 800798c:	69bb      	ldr	r3, [r7, #24]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d018      	beq.n	80079c4 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	085a      	lsrs	r2, r3, #1
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	441a      	add	r2, r3
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80079a4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	2b0f      	cmp	r3, #15
 80079aa:	d909      	bls.n	80079c0 <UART_SetConfig+0x388>
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079b2:	d205      	bcs.n	80079c0 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	b29a      	uxth	r2, r3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	60da      	str	r2, [r3, #12]
 80079be:	e001      	b.n	80079c4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80079c0:	2301      	movs	r3, #1
 80079c2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2200      	movs	r2, #0
 80079c8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2200      	movs	r2, #0
 80079ce:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80079d0:	7fbb      	ldrb	r3, [r7, #30]
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3720      	adds	r7, #32
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	007a1200 	.word	0x007a1200

080079e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b083      	sub	sp, #12
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079ec:	f003 0308 	and.w	r3, r3, #8
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d00a      	beq.n	8007a0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	430a      	orrs	r2, r1
 8007a08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a0e:	f003 0301 	and.w	r3, r3, #1
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d00a      	beq.n	8007a2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	430a      	orrs	r2, r1
 8007a2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a30:	f003 0302 	and.w	r3, r3, #2
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d00a      	beq.n	8007a4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	430a      	orrs	r2, r1
 8007a4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a52:	f003 0304 	and.w	r3, r3, #4
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d00a      	beq.n	8007a70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	430a      	orrs	r2, r1
 8007a6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a74:	f003 0310 	and.w	r3, r3, #16
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d00a      	beq.n	8007a92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	689b      	ldr	r3, [r3, #8]
 8007a82:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	430a      	orrs	r2, r1
 8007a90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a96:	f003 0320 	and.w	r3, r3, #32
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d00a      	beq.n	8007ab4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	430a      	orrs	r2, r1
 8007ab2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d01a      	beq.n	8007af6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	430a      	orrs	r2, r1
 8007ad4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ada:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ade:	d10a      	bne.n	8007af6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	430a      	orrs	r2, r1
 8007af4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007afa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00a      	beq.n	8007b18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	430a      	orrs	r2, r1
 8007b16:	605a      	str	r2, [r3, #4]
  }
}
 8007b18:	bf00      	nop
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b098      	sub	sp, #96	@ 0x60
 8007b28:	af02      	add	r7, sp, #8
 8007b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b34:	f7fa faf6 	bl	8002124 <HAL_GetTick>
 8007b38:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f003 0308 	and.w	r3, r3, #8
 8007b44:	2b08      	cmp	r3, #8
 8007b46:	d12e      	bne.n	8007ba6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b48:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007b4c:	9300      	str	r3, [sp, #0]
 8007b4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b50:	2200      	movs	r2, #0
 8007b52:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 f88c 	bl	8007c74 <UART_WaitOnFlagUntilTimeout>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d021      	beq.n	8007ba6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b6a:	e853 3f00 	ldrex	r3, [r3]
 8007b6e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007b70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b76:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b80:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b82:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b88:	e841 2300 	strex	r3, r2, [r1]
 8007b8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007b8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d1e6      	bne.n	8007b62 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2220      	movs	r2, #32
 8007b98:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	e062      	b.n	8007c6c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f003 0304 	and.w	r3, r3, #4
 8007bb0:	2b04      	cmp	r3, #4
 8007bb2:	d149      	bne.n	8007c48 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bb4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007bb8:	9300      	str	r3, [sp, #0]
 8007bba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 f856 	bl	8007c74 <UART_WaitOnFlagUntilTimeout>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d03c      	beq.n	8007c48 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd6:	e853 3f00 	ldrex	r3, [r3]
 8007bda:	623b      	str	r3, [r7, #32]
   return(result);
 8007bdc:	6a3b      	ldr	r3, [r7, #32]
 8007bde:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007be2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	461a      	mov	r2, r3
 8007bea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bec:	633b      	str	r3, [r7, #48]	@ 0x30
 8007bee:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007bf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bf4:	e841 2300 	strex	r3, r2, [r1]
 8007bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d1e6      	bne.n	8007bce <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	3308      	adds	r3, #8
 8007c06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	e853 3f00 	ldrex	r3, [r3]
 8007c0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f023 0301 	bic.w	r3, r3, #1
 8007c16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	3308      	adds	r3, #8
 8007c1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c20:	61fa      	str	r2, [r7, #28]
 8007c22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c24:	69b9      	ldr	r1, [r7, #24]
 8007c26:	69fa      	ldr	r2, [r7, #28]
 8007c28:	e841 2300 	strex	r3, r2, [r1]
 8007c2c:	617b      	str	r3, [r7, #20]
   return(result);
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d1e5      	bne.n	8007c00 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2220      	movs	r2, #32
 8007c38:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c44:	2303      	movs	r3, #3
 8007c46:	e011      	b.n	8007c6c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2220      	movs	r2, #32
 8007c4c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2220      	movs	r2, #32
 8007c52:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007c6a:	2300      	movs	r3, #0
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3758      	adds	r7, #88	@ 0x58
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b084      	sub	sp, #16
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	60f8      	str	r0, [r7, #12]
 8007c7c:	60b9      	str	r1, [r7, #8]
 8007c7e:	603b      	str	r3, [r7, #0]
 8007c80:	4613      	mov	r3, r2
 8007c82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c84:	e04f      	b.n	8007d26 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c86:	69bb      	ldr	r3, [r7, #24]
 8007c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c8c:	d04b      	beq.n	8007d26 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c8e:	f7fa fa49 	bl	8002124 <HAL_GetTick>
 8007c92:	4602      	mov	r2, r0
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	1ad3      	subs	r3, r2, r3
 8007c98:	69ba      	ldr	r2, [r7, #24]
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d302      	bcc.n	8007ca4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c9e:	69bb      	ldr	r3, [r7, #24]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d101      	bne.n	8007ca8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007ca4:	2303      	movs	r3, #3
 8007ca6:	e04e      	b.n	8007d46 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f003 0304 	and.w	r3, r3, #4
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d037      	beq.n	8007d26 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	2b80      	cmp	r3, #128	@ 0x80
 8007cba:	d034      	beq.n	8007d26 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	2b40      	cmp	r3, #64	@ 0x40
 8007cc0:	d031      	beq.n	8007d26 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	69db      	ldr	r3, [r3, #28]
 8007cc8:	f003 0308 	and.w	r3, r3, #8
 8007ccc:	2b08      	cmp	r3, #8
 8007cce:	d110      	bne.n	8007cf2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	2208      	movs	r2, #8
 8007cd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007cd8:	68f8      	ldr	r0, [r7, #12]
 8007cda:	f000 f838 	bl	8007d4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2208      	movs	r2, #8
 8007ce2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	e029      	b.n	8007d46 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	69db      	ldr	r3, [r3, #28]
 8007cf8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007cfc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d00:	d111      	bne.n	8007d26 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007d0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d0c:	68f8      	ldr	r0, [r7, #12]
 8007d0e:	f000 f81e 	bl	8007d4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2220      	movs	r2, #32
 8007d16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007d22:	2303      	movs	r3, #3
 8007d24:	e00f      	b.n	8007d46 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	69da      	ldr	r2, [r3, #28]
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	4013      	ands	r3, r2
 8007d30:	68ba      	ldr	r2, [r7, #8]
 8007d32:	429a      	cmp	r2, r3
 8007d34:	bf0c      	ite	eq
 8007d36:	2301      	moveq	r3, #1
 8007d38:	2300      	movne	r3, #0
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	79fb      	ldrb	r3, [r7, #7]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d0a0      	beq.n	8007c86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3710      	adds	r7, #16
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}

08007d4e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d4e:	b480      	push	{r7}
 8007d50:	b095      	sub	sp, #84	@ 0x54
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d5e:	e853 3f00 	ldrex	r3, [r3]
 8007d62:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	461a      	mov	r2, r3
 8007d72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d74:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d76:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d78:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007d7a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007d7c:	e841 2300 	strex	r3, r2, [r1]
 8007d80:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d1e6      	bne.n	8007d56 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	3308      	adds	r3, #8
 8007d8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d90:	6a3b      	ldr	r3, [r7, #32]
 8007d92:	e853 3f00 	ldrex	r3, [r3]
 8007d96:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d98:	69fb      	ldr	r3, [r7, #28]
 8007d9a:	f023 0301 	bic.w	r3, r3, #1
 8007d9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	3308      	adds	r3, #8
 8007da6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007da8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007daa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007dae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007db0:	e841 2300 	strex	r3, r2, [r1]
 8007db4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d1e5      	bne.n	8007d88 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d118      	bne.n	8007df6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	e853 3f00 	ldrex	r3, [r3]
 8007dd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	f023 0310 	bic.w	r3, r3, #16
 8007dd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	461a      	mov	r2, r3
 8007de0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007de2:	61bb      	str	r3, [r7, #24]
 8007de4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de6:	6979      	ldr	r1, [r7, #20]
 8007de8:	69ba      	ldr	r2, [r7, #24]
 8007dea:	e841 2300 	strex	r3, r2, [r1]
 8007dee:	613b      	str	r3, [r7, #16]
   return(result);
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d1e6      	bne.n	8007dc4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2220      	movs	r2, #32
 8007dfa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2200      	movs	r2, #0
 8007e02:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2200      	movs	r2, #0
 8007e08:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007e0a:	bf00      	nop
 8007e0c:	3754      	adds	r7, #84	@ 0x54
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr

08007e16 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007e16:	b580      	push	{r7, lr}
 8007e18:	b0c2      	sub	sp, #264	@ 0x108
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e24:	6018      	str	r0, [r3, #0]
 8007e26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e2e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007e30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	785b      	ldrb	r3, [r3, #1]
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	f040 86b7 	bne.w	8008bb0 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007e42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	699a      	ldr	r2, [r3, #24]
 8007e4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	691b      	ldr	r3, [r3, #16]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d908      	bls.n	8007e70 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007e5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	691b      	ldr	r3, [r3, #16]
 8007e6a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007e6e:	e007      	b.n	8007e80 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8007e70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	699b      	ldr	r3, [r3, #24]
 8007e7c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007e80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	7b1b      	ldrb	r3, [r3, #12]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d13a      	bne.n	8007f06 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007e90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	6959      	ldr	r1, [r3, #20]
 8007e9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ea0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	88da      	ldrh	r2, [r3, #6]
 8007ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007eb2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007eb6:	6800      	ldr	r0, [r0, #0]
 8007eb8:	f001 fb83 	bl	80095c2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007ebc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ec0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	613b      	str	r3, [r7, #16]
 8007ec8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ecc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	461a      	mov	r2, r3
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	4413      	add	r3, r2
 8007ede:	613b      	str	r3, [r7, #16]
 8007ee0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ee4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	00da      	lsls	r2, r3, #3
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	4413      	add	r3, r2
 8007ef2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007ef6:	60fb      	str	r3, [r7, #12]
 8007ef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007efc:	b29a      	uxth	r2, r3
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	801a      	strh	r2, [r3, #0]
 8007f02:	f000 be1f 	b.w	8008b44 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007f06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	78db      	ldrb	r3, [r3, #3]
 8007f12:	2b02      	cmp	r3, #2
 8007f14:	f040 8462 	bne.w	80087dc <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007f18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	6a1a      	ldr	r2, [r3, #32]
 8007f24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	691b      	ldr	r3, [r3, #16]
 8007f30:	429a      	cmp	r2, r3
 8007f32:	f240 83df 	bls.w	80086f4 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007f36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	4413      	add	r3, r2
 8007f50:	881b      	ldrh	r3, [r3, #0]
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f5c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8007f60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	009b      	lsls	r3, r3, #2
 8007f78:	441a      	add	r2, r3
 8007f7a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007f7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f86:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007f8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007f92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	6a1a      	ldr	r2, [r3, #32]
 8007f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fa2:	1ad2      	subs	r2, r2, r3
 8007fa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fa8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007fb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fb4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007fb8:	681a      	ldr	r2, [r3, #0]
 8007fba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	4413      	add	r3, r2
 8007fca:	881b      	ldrh	r3, [r3, #0]
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	f000 81c7 	beq.w	8008366 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007fd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fdc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	633b      	str	r3, [r7, #48]	@ 0x30
 8007fe4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fe8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	785b      	ldrb	r3, [r3, #1]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d177      	bne.n	80080e4 <USB_EPStartXfer+0x2ce>
 8007ff4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ff8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008000:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008004:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800800e:	b29b      	uxth	r3, r3
 8008010:	461a      	mov	r2, r3
 8008012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008014:	4413      	add	r3, r2
 8008016:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008018:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800801c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	00da      	lsls	r2, r3, #3
 8008026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008028:	4413      	add	r3, r2
 800802a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800802e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008032:	881b      	ldrh	r3, [r3, #0]
 8008034:	b29b      	uxth	r3, r3
 8008036:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800803a:	b29a      	uxth	r2, r3
 800803c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800803e:	801a      	strh	r2, [r3, #0]
 8008040:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008044:	2b00      	cmp	r3, #0
 8008046:	d10a      	bne.n	800805e <USB_EPStartXfer+0x248>
 8008048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800804a:	881b      	ldrh	r3, [r3, #0]
 800804c:	b29b      	uxth	r3, r3
 800804e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008052:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008056:	b29a      	uxth	r2, r3
 8008058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800805a:	801a      	strh	r2, [r3, #0]
 800805c:	e067      	b.n	800812e <USB_EPStartXfer+0x318>
 800805e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008062:	2b3e      	cmp	r3, #62	@ 0x3e
 8008064:	d81c      	bhi.n	80080a0 <USB_EPStartXfer+0x28a>
 8008066:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800806a:	085b      	lsrs	r3, r3, #1
 800806c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008070:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008074:	f003 0301 	and.w	r3, r3, #1
 8008078:	2b00      	cmp	r3, #0
 800807a:	d004      	beq.n	8008086 <USB_EPStartXfer+0x270>
 800807c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008080:	3301      	adds	r3, #1
 8008082:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008088:	881b      	ldrh	r3, [r3, #0]
 800808a:	b29a      	uxth	r2, r3
 800808c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008090:	b29b      	uxth	r3, r3
 8008092:	029b      	lsls	r3, r3, #10
 8008094:	b29b      	uxth	r3, r3
 8008096:	4313      	orrs	r3, r2
 8008098:	b29a      	uxth	r2, r3
 800809a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800809c:	801a      	strh	r2, [r3, #0]
 800809e:	e046      	b.n	800812e <USB_EPStartXfer+0x318>
 80080a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080a4:	095b      	lsrs	r3, r3, #5
 80080a6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80080aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080ae:	f003 031f 	and.w	r3, r3, #31
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d104      	bne.n	80080c0 <USB_EPStartXfer+0x2aa>
 80080b6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80080ba:	3b01      	subs	r3, #1
 80080bc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80080c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c2:	881b      	ldrh	r3, [r3, #0]
 80080c4:	b29a      	uxth	r2, r3
 80080c6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	029b      	lsls	r3, r3, #10
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	4313      	orrs	r3, r2
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080dc:	b29a      	uxth	r2, r3
 80080de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e0:	801a      	strh	r2, [r3, #0]
 80080e2:	e024      	b.n	800812e <USB_EPStartXfer+0x318>
 80080e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	785b      	ldrb	r3, [r3, #1]
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d11c      	bne.n	800812e <USB_EPStartXfer+0x318>
 80080f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008102:	b29b      	uxth	r3, r3
 8008104:	461a      	mov	r2, r3
 8008106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008108:	4413      	add	r3, r2
 800810a:	633b      	str	r3, [r7, #48]	@ 0x30
 800810c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008110:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	00da      	lsls	r2, r3, #3
 800811a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800811c:	4413      	add	r3, r2
 800811e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008122:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008124:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008128:	b29a      	uxth	r2, r3
 800812a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800812c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800812e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008132:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	895b      	ldrh	r3, [r3, #10]
 800813a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800813e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008142:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	6959      	ldr	r1, [r3, #20]
 800814a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800814e:	b29b      	uxth	r3, r3
 8008150:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008154:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008158:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800815c:	6800      	ldr	r0, [r0, #0]
 800815e:	f001 fa30 	bl	80095c2 <USB_WritePMA>
            ep->xfer_buff += len;
 8008162:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008166:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	695a      	ldr	r2, [r3, #20]
 800816e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008172:	441a      	add	r2, r3
 8008174:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008178:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008180:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008184:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	6a1a      	ldr	r2, [r3, #32]
 800818c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008190:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	691b      	ldr	r3, [r3, #16]
 8008198:	429a      	cmp	r2, r3
 800819a:	d90f      	bls.n	80081bc <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800819c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	6a1a      	ldr	r2, [r3, #32]
 80081a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081ac:	1ad2      	subs	r2, r2, r3
 80081ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	621a      	str	r2, [r3, #32]
 80081ba:	e00e      	b.n	80081da <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80081bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	6a1b      	ldr	r3, [r3, #32]
 80081c8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80081cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	2200      	movs	r2, #0
 80081d8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80081da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	785b      	ldrb	r3, [r3, #1]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d177      	bne.n	80082da <USB_EPStartXfer+0x4c4>
 80081ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	61bb      	str	r3, [r7, #24]
 80081f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008204:	b29b      	uxth	r3, r3
 8008206:	461a      	mov	r2, r3
 8008208:	69bb      	ldr	r3, [r7, #24]
 800820a:	4413      	add	r3, r2
 800820c:	61bb      	str	r3, [r7, #24]
 800820e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008212:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	781b      	ldrb	r3, [r3, #0]
 800821a:	00da      	lsls	r2, r3, #3
 800821c:	69bb      	ldr	r3, [r7, #24]
 800821e:	4413      	add	r3, r2
 8008220:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008224:	617b      	str	r3, [r7, #20]
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	881b      	ldrh	r3, [r3, #0]
 800822a:	b29b      	uxth	r3, r3
 800822c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008230:	b29a      	uxth	r2, r3
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	801a      	strh	r2, [r3, #0]
 8008236:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800823a:	2b00      	cmp	r3, #0
 800823c:	d10a      	bne.n	8008254 <USB_EPStartXfer+0x43e>
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	881b      	ldrh	r3, [r3, #0]
 8008242:	b29b      	uxth	r3, r3
 8008244:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008248:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800824c:	b29a      	uxth	r2, r3
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	801a      	strh	r2, [r3, #0]
 8008252:	e06d      	b.n	8008330 <USB_EPStartXfer+0x51a>
 8008254:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008258:	2b3e      	cmp	r3, #62	@ 0x3e
 800825a:	d81c      	bhi.n	8008296 <USB_EPStartXfer+0x480>
 800825c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008260:	085b      	lsrs	r3, r3, #1
 8008262:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008266:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800826a:	f003 0301 	and.w	r3, r3, #1
 800826e:	2b00      	cmp	r3, #0
 8008270:	d004      	beq.n	800827c <USB_EPStartXfer+0x466>
 8008272:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008276:	3301      	adds	r3, #1
 8008278:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	881b      	ldrh	r3, [r3, #0]
 8008280:	b29a      	uxth	r2, r3
 8008282:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008286:	b29b      	uxth	r3, r3
 8008288:	029b      	lsls	r3, r3, #10
 800828a:	b29b      	uxth	r3, r3
 800828c:	4313      	orrs	r3, r2
 800828e:	b29a      	uxth	r2, r3
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	801a      	strh	r2, [r3, #0]
 8008294:	e04c      	b.n	8008330 <USB_EPStartXfer+0x51a>
 8008296:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800829a:	095b      	lsrs	r3, r3, #5
 800829c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80082a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082a4:	f003 031f 	and.w	r3, r3, #31
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d104      	bne.n	80082b6 <USB_EPStartXfer+0x4a0>
 80082ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80082b0:	3b01      	subs	r3, #1
 80082b2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	881b      	ldrh	r3, [r3, #0]
 80082ba:	b29a      	uxth	r2, r3
 80082bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	029b      	lsls	r3, r3, #10
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	4313      	orrs	r3, r2
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082d2:	b29a      	uxth	r2, r3
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	801a      	strh	r2, [r3, #0]
 80082d8:	e02a      	b.n	8008330 <USB_EPStartXfer+0x51a>
 80082da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	785b      	ldrb	r3, [r3, #1]
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d122      	bne.n	8008330 <USB_EPStartXfer+0x51a>
 80082ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	623b      	str	r3, [r7, #32]
 80082f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008304:	b29b      	uxth	r3, r3
 8008306:	461a      	mov	r2, r3
 8008308:	6a3b      	ldr	r3, [r7, #32]
 800830a:	4413      	add	r3, r2
 800830c:	623b      	str	r3, [r7, #32]
 800830e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008312:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	00da      	lsls	r2, r3, #3
 800831c:	6a3b      	ldr	r3, [r7, #32]
 800831e:	4413      	add	r3, r2
 8008320:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008324:	61fb      	str	r3, [r7, #28]
 8008326:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800832a:	b29a      	uxth	r2, r3
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008330:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008334:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	891b      	ldrh	r3, [r3, #8]
 800833c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008340:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008344:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	6959      	ldr	r1, [r3, #20]
 800834c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008350:	b29b      	uxth	r3, r3
 8008352:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008356:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800835a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800835e:	6800      	ldr	r0, [r0, #0]
 8008360:	f001 f92f 	bl	80095c2 <USB_WritePMA>
 8008364:	e3ee      	b.n	8008b44 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008366:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800836a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	785b      	ldrb	r3, [r3, #1]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d177      	bne.n	8008466 <USB_EPStartXfer+0x650>
 8008376:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800837a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008382:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008386:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008390:	b29b      	uxth	r3, r3
 8008392:	461a      	mov	r2, r3
 8008394:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008396:	4413      	add	r3, r2
 8008398:	64bb      	str	r3, [r7, #72]	@ 0x48
 800839a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800839e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	781b      	ldrb	r3, [r3, #0]
 80083a6:	00da      	lsls	r2, r3, #3
 80083a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80083aa:	4413      	add	r3, r2
 80083ac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80083b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80083b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083b4:	881b      	ldrh	r3, [r3, #0]
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80083bc:	b29a      	uxth	r2, r3
 80083be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083c0:	801a      	strh	r2, [r3, #0]
 80083c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d10a      	bne.n	80083e0 <USB_EPStartXfer+0x5ca>
 80083ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083cc:	881b      	ldrh	r3, [r3, #0]
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083d8:	b29a      	uxth	r2, r3
 80083da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083dc:	801a      	strh	r2, [r3, #0]
 80083de:	e06d      	b.n	80084bc <USB_EPStartXfer+0x6a6>
 80083e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083e4:	2b3e      	cmp	r3, #62	@ 0x3e
 80083e6:	d81c      	bhi.n	8008422 <USB_EPStartXfer+0x60c>
 80083e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083ec:	085b      	lsrs	r3, r3, #1
 80083ee:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80083f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083f6:	f003 0301 	and.w	r3, r3, #1
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d004      	beq.n	8008408 <USB_EPStartXfer+0x5f2>
 80083fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008402:	3301      	adds	r3, #1
 8008404:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008408:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800840a:	881b      	ldrh	r3, [r3, #0]
 800840c:	b29a      	uxth	r2, r3
 800840e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008412:	b29b      	uxth	r3, r3
 8008414:	029b      	lsls	r3, r3, #10
 8008416:	b29b      	uxth	r3, r3
 8008418:	4313      	orrs	r3, r2
 800841a:	b29a      	uxth	r2, r3
 800841c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800841e:	801a      	strh	r2, [r3, #0]
 8008420:	e04c      	b.n	80084bc <USB_EPStartXfer+0x6a6>
 8008422:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008426:	095b      	lsrs	r3, r3, #5
 8008428:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800842c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008430:	f003 031f 	and.w	r3, r3, #31
 8008434:	2b00      	cmp	r3, #0
 8008436:	d104      	bne.n	8008442 <USB_EPStartXfer+0x62c>
 8008438:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800843c:	3b01      	subs	r3, #1
 800843e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008442:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008444:	881b      	ldrh	r3, [r3, #0]
 8008446:	b29a      	uxth	r2, r3
 8008448:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800844c:	b29b      	uxth	r3, r3
 800844e:	029b      	lsls	r3, r3, #10
 8008450:	b29b      	uxth	r3, r3
 8008452:	4313      	orrs	r3, r2
 8008454:	b29b      	uxth	r3, r3
 8008456:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800845a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800845e:	b29a      	uxth	r2, r3
 8008460:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008462:	801a      	strh	r2, [r3, #0]
 8008464:	e02a      	b.n	80084bc <USB_EPStartXfer+0x6a6>
 8008466:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800846a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	785b      	ldrb	r3, [r3, #1]
 8008472:	2b01      	cmp	r3, #1
 8008474:	d122      	bne.n	80084bc <USB_EPStartXfer+0x6a6>
 8008476:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800847a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	653b      	str	r3, [r7, #80]	@ 0x50
 8008482:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008486:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008490:	b29b      	uxth	r3, r3
 8008492:	461a      	mov	r2, r3
 8008494:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008496:	4413      	add	r3, r2
 8008498:	653b      	str	r3, [r7, #80]	@ 0x50
 800849a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800849e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	781b      	ldrb	r3, [r3, #0]
 80084a6:	00da      	lsls	r2, r3, #3
 80084a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80084aa:	4413      	add	r3, r2
 80084ac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80084b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084b6:	b29a      	uxth	r2, r3
 80084b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084ba:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80084bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	891b      	ldrh	r3, [r3, #8]
 80084c8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80084cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	6959      	ldr	r1, [r3, #20]
 80084d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084dc:	b29b      	uxth	r3, r3
 80084de:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80084e2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80084e6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80084ea:	6800      	ldr	r0, [r0, #0]
 80084ec:	f001 f869 	bl	80095c2 <USB_WritePMA>
            ep->xfer_buff += len;
 80084f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	695a      	ldr	r2, [r3, #20]
 80084fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008500:	441a      	add	r2, r3
 8008502:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008506:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800850e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008512:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	6a1a      	ldr	r2, [r3, #32]
 800851a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800851e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	691b      	ldr	r3, [r3, #16]
 8008526:	429a      	cmp	r2, r3
 8008528:	d90f      	bls.n	800854a <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800852a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800852e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	6a1a      	ldr	r2, [r3, #32]
 8008536:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800853a:	1ad2      	subs	r2, r2, r3
 800853c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008540:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	621a      	str	r2, [r3, #32]
 8008548:	e00e      	b.n	8008568 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800854a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800854e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	6a1b      	ldr	r3, [r3, #32]
 8008556:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800855a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800855e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	2200      	movs	r2, #0
 8008566:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008568:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800856c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	643b      	str	r3, [r7, #64]	@ 0x40
 8008574:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008578:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	785b      	ldrb	r3, [r3, #1]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d177      	bne.n	8008674 <USB_EPStartXfer+0x85e>
 8008584:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008588:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008590:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008594:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800859e:	b29b      	uxth	r3, r3
 80085a0:	461a      	mov	r2, r3
 80085a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085a4:	4413      	add	r3, r2
 80085a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80085a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	00da      	lsls	r2, r3, #3
 80085b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085b8:	4413      	add	r3, r2
 80085ba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80085be:	637b      	str	r3, [r7, #52]	@ 0x34
 80085c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085c2:	881b      	ldrh	r3, [r3, #0]
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80085ca:	b29a      	uxth	r2, r3
 80085cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085ce:	801a      	strh	r2, [r3, #0]
 80085d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d10a      	bne.n	80085ee <USB_EPStartXfer+0x7d8>
 80085d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085da:	881b      	ldrh	r3, [r3, #0]
 80085dc:	b29b      	uxth	r3, r3
 80085de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085e6:	b29a      	uxth	r2, r3
 80085e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085ea:	801a      	strh	r2, [r3, #0]
 80085ec:	e067      	b.n	80086be <USB_EPStartXfer+0x8a8>
 80085ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085f2:	2b3e      	cmp	r3, #62	@ 0x3e
 80085f4:	d81c      	bhi.n	8008630 <USB_EPStartXfer+0x81a>
 80085f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085fa:	085b      	lsrs	r3, r3, #1
 80085fc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008600:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008604:	f003 0301 	and.w	r3, r3, #1
 8008608:	2b00      	cmp	r3, #0
 800860a:	d004      	beq.n	8008616 <USB_EPStartXfer+0x800>
 800860c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008610:	3301      	adds	r3, #1
 8008612:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008618:	881b      	ldrh	r3, [r3, #0]
 800861a:	b29a      	uxth	r2, r3
 800861c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008620:	b29b      	uxth	r3, r3
 8008622:	029b      	lsls	r3, r3, #10
 8008624:	b29b      	uxth	r3, r3
 8008626:	4313      	orrs	r3, r2
 8008628:	b29a      	uxth	r2, r3
 800862a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800862c:	801a      	strh	r2, [r3, #0]
 800862e:	e046      	b.n	80086be <USB_EPStartXfer+0x8a8>
 8008630:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008634:	095b      	lsrs	r3, r3, #5
 8008636:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800863a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800863e:	f003 031f 	and.w	r3, r3, #31
 8008642:	2b00      	cmp	r3, #0
 8008644:	d104      	bne.n	8008650 <USB_EPStartXfer+0x83a>
 8008646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800864a:	3b01      	subs	r3, #1
 800864c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008650:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008652:	881b      	ldrh	r3, [r3, #0]
 8008654:	b29a      	uxth	r2, r3
 8008656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800865a:	b29b      	uxth	r3, r3
 800865c:	029b      	lsls	r3, r3, #10
 800865e:	b29b      	uxth	r3, r3
 8008660:	4313      	orrs	r3, r2
 8008662:	b29b      	uxth	r3, r3
 8008664:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008668:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800866c:	b29a      	uxth	r2, r3
 800866e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008670:	801a      	strh	r2, [r3, #0]
 8008672:	e024      	b.n	80086be <USB_EPStartXfer+0x8a8>
 8008674:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008678:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	785b      	ldrb	r3, [r3, #1]
 8008680:	2b01      	cmp	r3, #1
 8008682:	d11c      	bne.n	80086be <USB_EPStartXfer+0x8a8>
 8008684:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008688:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008692:	b29b      	uxth	r3, r3
 8008694:	461a      	mov	r2, r3
 8008696:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008698:	4413      	add	r3, r2
 800869a:	643b      	str	r3, [r7, #64]	@ 0x40
 800869c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	00da      	lsls	r2, r3, #3
 80086aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80086ac:	4413      	add	r3, r2
 80086ae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80086b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086b8:	b29a      	uxth	r2, r3
 80086ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086bc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80086be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	895b      	ldrh	r3, [r3, #10]
 80086ca:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80086ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	6959      	ldr	r1, [r3, #20]
 80086da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086de:	b29b      	uxth	r3, r3
 80086e0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80086e4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80086e8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80086ec:	6800      	ldr	r0, [r0, #0]
 80086ee:	f000 ff68 	bl	80095c2 <USB_WritePMA>
 80086f2:	e227      	b.n	8008b44 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80086f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	6a1b      	ldr	r3, [r3, #32]
 8008700:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008704:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008708:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800870c:	681a      	ldr	r2, [r3, #0]
 800870e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008712:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	009b      	lsls	r3, r3, #2
 800871c:	4413      	add	r3, r2
 800871e:	881b      	ldrh	r3, [r3, #0]
 8008720:	b29b      	uxth	r3, r3
 8008722:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008726:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800872a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800872e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008732:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008736:	681a      	ldr	r2, [r3, #0]
 8008738:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800873c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	781b      	ldrb	r3, [r3, #0]
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	441a      	add	r2, r3
 8008748:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800874c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008750:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008754:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008758:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800875c:	b29b      	uxth	r3, r3
 800875e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008760:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008764:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800876c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008770:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800877a:	b29b      	uxth	r3, r3
 800877c:	461a      	mov	r2, r3
 800877e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008780:	4413      	add	r3, r2
 8008782:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008784:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008788:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	00da      	lsls	r2, r3, #3
 8008792:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008794:	4413      	add	r3, r2
 8008796:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800879a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800879c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087a0:	b29a      	uxth	r2, r3
 80087a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80087a4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80087a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	891b      	ldrh	r3, [r3, #8]
 80087b2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80087b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	6959      	ldr	r1, [r3, #20]
 80087c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087c6:	b29b      	uxth	r3, r3
 80087c8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80087cc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80087d0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80087d4:	6800      	ldr	r0, [r0, #0]
 80087d6:	f000 fef4 	bl	80095c2 <USB_WritePMA>
 80087da:	e1b3      	b.n	8008b44 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80087dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	6a1a      	ldr	r2, [r3, #32]
 80087e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087ec:	1ad2      	subs	r2, r2, r3
 80087ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80087fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008802:	681a      	ldr	r2, [r3, #0]
 8008804:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008808:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	009b      	lsls	r3, r3, #2
 8008812:	4413      	add	r3, r2
 8008814:	881b      	ldrh	r3, [r3, #0]
 8008816:	b29b      	uxth	r3, r3
 8008818:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800881c:	2b00      	cmp	r3, #0
 800881e:	f000 80c6 	beq.w	80089ae <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008822:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008826:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	673b      	str	r3, [r7, #112]	@ 0x70
 800882e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008832:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	785b      	ldrb	r3, [r3, #1]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d177      	bne.n	800892e <USB_EPStartXfer+0xb18>
 800883e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008842:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	66bb      	str	r3, [r7, #104]	@ 0x68
 800884a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800884e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008858:	b29b      	uxth	r3, r3
 800885a:	461a      	mov	r2, r3
 800885c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800885e:	4413      	add	r3, r2
 8008860:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008862:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008866:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	781b      	ldrb	r3, [r3, #0]
 800886e:	00da      	lsls	r2, r3, #3
 8008870:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008872:	4413      	add	r3, r2
 8008874:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008878:	667b      	str	r3, [r7, #100]	@ 0x64
 800887a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800887c:	881b      	ldrh	r3, [r3, #0]
 800887e:	b29b      	uxth	r3, r3
 8008880:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008884:	b29a      	uxth	r2, r3
 8008886:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008888:	801a      	strh	r2, [r3, #0]
 800888a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800888e:	2b00      	cmp	r3, #0
 8008890:	d10a      	bne.n	80088a8 <USB_EPStartXfer+0xa92>
 8008892:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008894:	881b      	ldrh	r3, [r3, #0]
 8008896:	b29b      	uxth	r3, r3
 8008898:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800889c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088a0:	b29a      	uxth	r2, r3
 80088a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80088a4:	801a      	strh	r2, [r3, #0]
 80088a6:	e067      	b.n	8008978 <USB_EPStartXfer+0xb62>
 80088a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088ac:	2b3e      	cmp	r3, #62	@ 0x3e
 80088ae:	d81c      	bhi.n	80088ea <USB_EPStartXfer+0xad4>
 80088b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088b4:	085b      	lsrs	r3, r3, #1
 80088b6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80088ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088be:	f003 0301 	and.w	r3, r3, #1
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d004      	beq.n	80088d0 <USB_EPStartXfer+0xaba>
 80088c6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80088ca:	3301      	adds	r3, #1
 80088cc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80088d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80088d2:	881b      	ldrh	r3, [r3, #0]
 80088d4:	b29a      	uxth	r2, r3
 80088d6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80088da:	b29b      	uxth	r3, r3
 80088dc:	029b      	lsls	r3, r3, #10
 80088de:	b29b      	uxth	r3, r3
 80088e0:	4313      	orrs	r3, r2
 80088e2:	b29a      	uxth	r2, r3
 80088e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80088e6:	801a      	strh	r2, [r3, #0]
 80088e8:	e046      	b.n	8008978 <USB_EPStartXfer+0xb62>
 80088ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088ee:	095b      	lsrs	r3, r3, #5
 80088f0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80088f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088f8:	f003 031f 	and.w	r3, r3, #31
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d104      	bne.n	800890a <USB_EPStartXfer+0xaf4>
 8008900:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008904:	3b01      	subs	r3, #1
 8008906:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800890a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800890c:	881b      	ldrh	r3, [r3, #0]
 800890e:	b29a      	uxth	r2, r3
 8008910:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008914:	b29b      	uxth	r3, r3
 8008916:	029b      	lsls	r3, r3, #10
 8008918:	b29b      	uxth	r3, r3
 800891a:	4313      	orrs	r3, r2
 800891c:	b29b      	uxth	r3, r3
 800891e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008922:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008926:	b29a      	uxth	r2, r3
 8008928:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800892a:	801a      	strh	r2, [r3, #0]
 800892c:	e024      	b.n	8008978 <USB_EPStartXfer+0xb62>
 800892e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008932:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	785b      	ldrb	r3, [r3, #1]
 800893a:	2b01      	cmp	r3, #1
 800893c:	d11c      	bne.n	8008978 <USB_EPStartXfer+0xb62>
 800893e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008942:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800894c:	b29b      	uxth	r3, r3
 800894e:	461a      	mov	r2, r3
 8008950:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008952:	4413      	add	r3, r2
 8008954:	673b      	str	r3, [r7, #112]	@ 0x70
 8008956:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800895a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	00da      	lsls	r2, r3, #3
 8008964:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008966:	4413      	add	r3, r2
 8008968:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800896c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800896e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008972:	b29a      	uxth	r2, r3
 8008974:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008976:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008978:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800897c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	895b      	ldrh	r3, [r3, #10]
 8008984:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008988:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800898c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	6959      	ldr	r1, [r3, #20]
 8008994:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008998:	b29b      	uxth	r3, r3
 800899a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800899e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80089a2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80089a6:	6800      	ldr	r0, [r0, #0]
 80089a8:	f000 fe0b 	bl	80095c2 <USB_WritePMA>
 80089ac:	e0ca      	b.n	8008b44 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80089ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	785b      	ldrb	r3, [r3, #1]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d177      	bne.n	8008aae <USB_EPStartXfer+0xc98>
 80089be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80089ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80089d8:	b29b      	uxth	r3, r3
 80089da:	461a      	mov	r2, r3
 80089dc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80089de:	4413      	add	r3, r2
 80089e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80089e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	00da      	lsls	r2, r3, #3
 80089f0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80089f2:	4413      	add	r3, r2
 80089f4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80089f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80089fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80089fc:	881b      	ldrh	r3, [r3, #0]
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a04:	b29a      	uxth	r2, r3
 8008a06:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a08:	801a      	strh	r2, [r3, #0]
 8008a0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d10a      	bne.n	8008a28 <USB_EPStartXfer+0xc12>
 8008a12:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a14:	881b      	ldrh	r3, [r3, #0]
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a20:	b29a      	uxth	r2, r3
 8008a22:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a24:	801a      	strh	r2, [r3, #0]
 8008a26:	e073      	b.n	8008b10 <USB_EPStartXfer+0xcfa>
 8008a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a2c:	2b3e      	cmp	r3, #62	@ 0x3e
 8008a2e:	d81c      	bhi.n	8008a6a <USB_EPStartXfer+0xc54>
 8008a30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a34:	085b      	lsrs	r3, r3, #1
 8008a36:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008a3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a3e:	f003 0301 	and.w	r3, r3, #1
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d004      	beq.n	8008a50 <USB_EPStartXfer+0xc3a>
 8008a46:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008a50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a52:	881b      	ldrh	r3, [r3, #0]
 8008a54:	b29a      	uxth	r2, r3
 8008a56:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008a5a:	b29b      	uxth	r3, r3
 8008a5c:	029b      	lsls	r3, r3, #10
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	4313      	orrs	r3, r2
 8008a62:	b29a      	uxth	r2, r3
 8008a64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a66:	801a      	strh	r2, [r3, #0]
 8008a68:	e052      	b.n	8008b10 <USB_EPStartXfer+0xcfa>
 8008a6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a6e:	095b      	lsrs	r3, r3, #5
 8008a70:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a78:	f003 031f 	and.w	r3, r3, #31
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d104      	bne.n	8008a8a <USB_EPStartXfer+0xc74>
 8008a80:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008a84:	3b01      	subs	r3, #1
 8008a86:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008a8a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a8c:	881b      	ldrh	r3, [r3, #0]
 8008a8e:	b29a      	uxth	r2, r3
 8008a90:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	029b      	lsls	r3, r3, #10
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008aa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008aa6:	b29a      	uxth	r2, r3
 8008aa8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008aaa:	801a      	strh	r2, [r3, #0]
 8008aac:	e030      	b.n	8008b10 <USB_EPStartXfer+0xcfa>
 8008aae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ab2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	785b      	ldrb	r3, [r3, #1]
 8008aba:	2b01      	cmp	r3, #1
 8008abc:	d128      	bne.n	8008b10 <USB_EPStartXfer+0xcfa>
 8008abe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ac2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008acc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ad0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ada:	b29b      	uxth	r3, r3
 8008adc:	461a      	mov	r2, r3
 8008ade:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008ae2:	4413      	add	r3, r2
 8008ae4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008ae8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008aec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	00da      	lsls	r2, r3, #3
 8008af6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008afa:	4413      	add	r3, r2
 8008afc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008b00:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b08:	b29a      	uxth	r2, r3
 8008b0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008b0e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008b10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	891b      	ldrh	r3, [r3, #8]
 8008b1c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008b20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	6959      	ldr	r1, [r3, #20]
 8008b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b30:	b29b      	uxth	r3, r3
 8008b32:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008b36:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008b3a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008b3e:	6800      	ldr	r0, [r0, #0]
 8008b40:	f000 fd3f 	bl	80095c2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008b44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b4c:	681a      	ldr	r2, [r3, #0]
 8008b4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	009b      	lsls	r3, r3, #2
 8008b5c:	4413      	add	r3, r2
 8008b5e:	881b      	ldrh	r3, [r3, #0]
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b6a:	817b      	strh	r3, [r7, #10]
 8008b6c:	897b      	ldrh	r3, [r7, #10]
 8008b6e:	f083 0310 	eor.w	r3, r3, #16
 8008b72:	817b      	strh	r3, [r7, #10]
 8008b74:	897b      	ldrh	r3, [r7, #10]
 8008b76:	f083 0320 	eor.w	r3, r3, #32
 8008b7a:	817b      	strh	r3, [r7, #10]
 8008b7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b84:	681a      	ldr	r2, [r3, #0]
 8008b86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	441a      	add	r2, r3
 8008b96:	897b      	ldrh	r3, [r7, #10]
 8008b98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ba0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ba4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ba8:	b29b      	uxth	r3, r3
 8008baa:	8013      	strh	r3, [r2, #0]
 8008bac:	f000 bcdf 	b.w	800956e <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008bb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	7b1b      	ldrb	r3, [r3, #12]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	f040 80bc 	bne.w	8008d3a <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008bc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	699a      	ldr	r2, [r3, #24]
 8008bce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	691b      	ldr	r3, [r3, #16]
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d917      	bls.n	8008c0e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8008bde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008be2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	691b      	ldr	r3, [r3, #16]
 8008bea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8008bee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bf2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	699a      	ldr	r2, [r3, #24]
 8008bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bfe:	1ad2      	subs	r2, r2, r3
 8008c00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	619a      	str	r2, [r3, #24]
 8008c0c:	e00e      	b.n	8008c2c <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8008c0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	699b      	ldr	r3, [r3, #24]
 8008c1a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8008c1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008c2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008c3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	461a      	mov	r2, r3
 8008c4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008c50:	4413      	add	r3, r2
 8008c52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008c56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	781b      	ldrb	r3, [r3, #0]
 8008c62:	00da      	lsls	r2, r3, #3
 8008c64:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008c68:	4413      	add	r3, r2
 8008c6a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008c6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008c72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008c76:	881b      	ldrh	r3, [r3, #0]
 8008c78:	b29b      	uxth	r3, r3
 8008c7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c7e:	b29a      	uxth	r2, r3
 8008c80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008c84:	801a      	strh	r2, [r3, #0]
 8008c86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d10d      	bne.n	8008caa <USB_EPStartXfer+0xe94>
 8008c8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008c92:	881b      	ldrh	r3, [r3, #0]
 8008c94:	b29b      	uxth	r3, r3
 8008c96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c9e:	b29a      	uxth	r2, r3
 8008ca0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008ca4:	801a      	strh	r2, [r3, #0]
 8008ca6:	f000 bc28 	b.w	80094fa <USB_EPStartXfer+0x16e4>
 8008caa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cae:	2b3e      	cmp	r3, #62	@ 0x3e
 8008cb0:	d81f      	bhi.n	8008cf2 <USB_EPStartXfer+0xedc>
 8008cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cb6:	085b      	lsrs	r3, r3, #1
 8008cb8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cc0:	f003 0301 	and.w	r3, r3, #1
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d004      	beq.n	8008cd2 <USB_EPStartXfer+0xebc>
 8008cc8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008ccc:	3301      	adds	r3, #1
 8008cce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008cd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008cd6:	881b      	ldrh	r3, [r3, #0]
 8008cd8:	b29a      	uxth	r2, r3
 8008cda:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008cde:	b29b      	uxth	r3, r3
 8008ce0:	029b      	lsls	r3, r3, #10
 8008ce2:	b29b      	uxth	r3, r3
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	b29a      	uxth	r2, r3
 8008ce8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008cec:	801a      	strh	r2, [r3, #0]
 8008cee:	f000 bc04 	b.w	80094fa <USB_EPStartXfer+0x16e4>
 8008cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cf6:	095b      	lsrs	r3, r3, #5
 8008cf8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008cfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d00:	f003 031f 	and.w	r3, r3, #31
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d104      	bne.n	8008d12 <USB_EPStartXfer+0xefc>
 8008d08:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008d0c:	3b01      	subs	r3, #1
 8008d0e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008d12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008d16:	881b      	ldrh	r3, [r3, #0]
 8008d18:	b29a      	uxth	r2, r3
 8008d1a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008d1e:	b29b      	uxth	r3, r3
 8008d20:	029b      	lsls	r3, r3, #10
 8008d22:	b29b      	uxth	r3, r3
 8008d24:	4313      	orrs	r3, r2
 8008d26:	b29b      	uxth	r3, r3
 8008d28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d30:	b29a      	uxth	r2, r3
 8008d32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008d36:	801a      	strh	r2, [r3, #0]
 8008d38:	e3df      	b.n	80094fa <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008d3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	78db      	ldrb	r3, [r3, #3]
 8008d46:	2b02      	cmp	r3, #2
 8008d48:	f040 8218 	bne.w	800917c <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008d4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	785b      	ldrb	r3, [r3, #1]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	f040 809d 	bne.w	8008e98 <USB_EPStartXfer+0x1082>
 8008d5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008d6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008d82:	4413      	add	r3, r2
 8008d84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008d88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	781b      	ldrb	r3, [r3, #0]
 8008d94:	00da      	lsls	r2, r3, #3
 8008d96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008d9a:	4413      	add	r3, r2
 8008d9c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008da0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008da4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008da8:	881b      	ldrh	r3, [r3, #0]
 8008daa:	b29b      	uxth	r3, r3
 8008dac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008db0:	b29a      	uxth	r2, r3
 8008db2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008db6:	801a      	strh	r2, [r3, #0]
 8008db8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	691b      	ldr	r3, [r3, #16]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d10c      	bne.n	8008de2 <USB_EPStartXfer+0xfcc>
 8008dc8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008dcc:	881b      	ldrh	r3, [r3, #0]
 8008dce:	b29b      	uxth	r3, r3
 8008dd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008dd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008dd8:	b29a      	uxth	r2, r3
 8008dda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008dde:	801a      	strh	r2, [r3, #0]
 8008de0:	e08f      	b.n	8008f02 <USB_EPStartXfer+0x10ec>
 8008de2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008de6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	691b      	ldr	r3, [r3, #16]
 8008dee:	2b3e      	cmp	r3, #62	@ 0x3e
 8008df0:	d826      	bhi.n	8008e40 <USB_EPStartXfer+0x102a>
 8008df2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008df6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	691b      	ldr	r3, [r3, #16]
 8008dfe:	085b      	lsrs	r3, r3, #1
 8008e00:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008e04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	691b      	ldr	r3, [r3, #16]
 8008e10:	f003 0301 	and.w	r3, r3, #1
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d004      	beq.n	8008e22 <USB_EPStartXfer+0x100c>
 8008e18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e1c:	3301      	adds	r3, #1
 8008e1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008e22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008e26:	881b      	ldrh	r3, [r3, #0]
 8008e28:	b29a      	uxth	r2, r3
 8008e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	029b      	lsls	r3, r3, #10
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	4313      	orrs	r3, r2
 8008e36:	b29a      	uxth	r2, r3
 8008e38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008e3c:	801a      	strh	r2, [r3, #0]
 8008e3e:	e060      	b.n	8008f02 <USB_EPStartXfer+0x10ec>
 8008e40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	691b      	ldr	r3, [r3, #16]
 8008e4c:	095b      	lsrs	r3, r3, #5
 8008e4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008e52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	691b      	ldr	r3, [r3, #16]
 8008e5e:	f003 031f 	and.w	r3, r3, #31
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d104      	bne.n	8008e70 <USB_EPStartXfer+0x105a>
 8008e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e6a:	3b01      	subs	r3, #1
 8008e6c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008e70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008e74:	881b      	ldrh	r3, [r3, #0]
 8008e76:	b29a      	uxth	r2, r3
 8008e78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	029b      	lsls	r3, r3, #10
 8008e80:	b29b      	uxth	r3, r3
 8008e82:	4313      	orrs	r3, r2
 8008e84:	b29b      	uxth	r3, r3
 8008e86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e8e:	b29a      	uxth	r2, r3
 8008e90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008e94:	801a      	strh	r2, [r3, #0]
 8008e96:	e034      	b.n	8008f02 <USB_EPStartXfer+0x10ec>
 8008e98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	785b      	ldrb	r3, [r3, #1]
 8008ea4:	2b01      	cmp	r3, #1
 8008ea6:	d12c      	bne.n	8008f02 <USB_EPStartXfer+0x10ec>
 8008ea8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008eac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008eb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008eba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ec4:	b29b      	uxth	r3, r3
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008ecc:	4413      	add	r3, r2
 8008ece:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008ed2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ed6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	00da      	lsls	r2, r3, #3
 8008ee0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008ee4:	4413      	add	r3, r2
 8008ee6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008eea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008eee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ef2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	691b      	ldr	r3, [r3, #16]
 8008efa:	b29a      	uxth	r2, r3
 8008efc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008f00:	801a      	strh	r2, [r3, #0]
 8008f02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008f10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	785b      	ldrb	r3, [r3, #1]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	f040 809d 	bne.w	800905c <USB_EPStartXfer+0x1246>
 8008f22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008f30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008f3e:	b29b      	uxth	r3, r3
 8008f40:	461a      	mov	r2, r3
 8008f42:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008f46:	4413      	add	r3, r2
 8008f48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008f4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	781b      	ldrb	r3, [r3, #0]
 8008f58:	00da      	lsls	r2, r3, #3
 8008f5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008f5e:	4413      	add	r3, r2
 8008f60:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008f64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008f68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008f6c:	881b      	ldrh	r3, [r3, #0]
 8008f6e:	b29b      	uxth	r3, r3
 8008f70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f74:	b29a      	uxth	r2, r3
 8008f76:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008f7a:	801a      	strh	r2, [r3, #0]
 8008f7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	691b      	ldr	r3, [r3, #16]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d10c      	bne.n	8008fa6 <USB_EPStartXfer+0x1190>
 8008f8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008f90:	881b      	ldrh	r3, [r3, #0]
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f9c:	b29a      	uxth	r2, r3
 8008f9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008fa2:	801a      	strh	r2, [r3, #0]
 8008fa4:	e088      	b.n	80090b8 <USB_EPStartXfer+0x12a2>
 8008fa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008faa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	691b      	ldr	r3, [r3, #16]
 8008fb2:	2b3e      	cmp	r3, #62	@ 0x3e
 8008fb4:	d826      	bhi.n	8009004 <USB_EPStartXfer+0x11ee>
 8008fb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	691b      	ldr	r3, [r3, #16]
 8008fc2:	085b      	lsrs	r3, r3, #1
 8008fc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008fc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	691b      	ldr	r3, [r3, #16]
 8008fd4:	f003 0301 	and.w	r3, r3, #1
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d004      	beq.n	8008fe6 <USB_EPStartXfer+0x11d0>
 8008fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008fe0:	3301      	adds	r3, #1
 8008fe2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008fe6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008fea:	881b      	ldrh	r3, [r3, #0]
 8008fec:	b29a      	uxth	r2, r3
 8008fee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ff2:	b29b      	uxth	r3, r3
 8008ff4:	029b      	lsls	r3, r3, #10
 8008ff6:	b29b      	uxth	r3, r3
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	b29a      	uxth	r2, r3
 8008ffc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009000:	801a      	strh	r2, [r3, #0]
 8009002:	e059      	b.n	80090b8 <USB_EPStartXfer+0x12a2>
 8009004:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009008:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	691b      	ldr	r3, [r3, #16]
 8009010:	095b      	lsrs	r3, r3, #5
 8009012:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009016:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800901a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	691b      	ldr	r3, [r3, #16]
 8009022:	f003 031f 	and.w	r3, r3, #31
 8009026:	2b00      	cmp	r3, #0
 8009028:	d104      	bne.n	8009034 <USB_EPStartXfer+0x121e>
 800902a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800902e:	3b01      	subs	r3, #1
 8009030:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009034:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009038:	881b      	ldrh	r3, [r3, #0]
 800903a:	b29a      	uxth	r2, r3
 800903c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009040:	b29b      	uxth	r3, r3
 8009042:	029b      	lsls	r3, r3, #10
 8009044:	b29b      	uxth	r3, r3
 8009046:	4313      	orrs	r3, r2
 8009048:	b29b      	uxth	r3, r3
 800904a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800904e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009052:	b29a      	uxth	r2, r3
 8009054:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009058:	801a      	strh	r2, [r3, #0]
 800905a:	e02d      	b.n	80090b8 <USB_EPStartXfer+0x12a2>
 800905c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009060:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	785b      	ldrb	r3, [r3, #1]
 8009068:	2b01      	cmp	r3, #1
 800906a:	d125      	bne.n	80090b8 <USB_EPStartXfer+0x12a2>
 800906c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009070:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800907a:	b29b      	uxth	r3, r3
 800907c:	461a      	mov	r2, r3
 800907e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009082:	4413      	add	r3, r2
 8009084:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009088:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800908c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	781b      	ldrb	r3, [r3, #0]
 8009094:	00da      	lsls	r2, r3, #3
 8009096:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800909a:	4413      	add	r3, r2
 800909c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80090a0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80090a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	691b      	ldr	r3, [r3, #16]
 80090b0:	b29a      	uxth	r2, r3
 80090b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80090b6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80090b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	69db      	ldr	r3, [r3, #28]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	f000 8218 	beq.w	80094fa <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80090ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80090d2:	681a      	ldr	r2, [r3, #0]
 80090d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	781b      	ldrb	r3, [r3, #0]
 80090e0:	009b      	lsls	r3, r3, #2
 80090e2:	4413      	add	r3, r2
 80090e4:	881b      	ldrh	r3, [r3, #0]
 80090e6:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80090ea:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80090ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d005      	beq.n	8009102 <USB_EPStartXfer+0x12ec>
 80090f6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80090fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d10d      	bne.n	800911e <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009102:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009106:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800910a:	2b00      	cmp	r3, #0
 800910c:	f040 81f5 	bne.w	80094fa <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009110:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009114:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009118:	2b00      	cmp	r3, #0
 800911a:	f040 81ee 	bne.w	80094fa <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800911e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009122:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009126:	681a      	ldr	r2, [r3, #0]
 8009128:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800912c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	781b      	ldrb	r3, [r3, #0]
 8009134:	009b      	lsls	r3, r3, #2
 8009136:	4413      	add	r3, r2
 8009138:	881b      	ldrh	r3, [r3, #0]
 800913a:	b29b      	uxth	r3, r3
 800913c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009140:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009144:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8009148:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800914c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009150:	681a      	ldr	r2, [r3, #0]
 8009152:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009156:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	441a      	add	r2, r3
 8009162:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8009166:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800916a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800916e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009172:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009176:	b29b      	uxth	r3, r3
 8009178:	8013      	strh	r3, [r2, #0]
 800917a:	e1be      	b.n	80094fa <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800917c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009180:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	78db      	ldrb	r3, [r3, #3]
 8009188:	2b01      	cmp	r3, #1
 800918a:	f040 81b4 	bne.w	80094f6 <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800918e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009192:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	699a      	ldr	r2, [r3, #24]
 800919a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800919e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	691b      	ldr	r3, [r3, #16]
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d917      	bls.n	80091da <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 80091aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	691b      	ldr	r3, [r3, #16]
 80091b6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80091ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	699a      	ldr	r2, [r3, #24]
 80091c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091ca:	1ad2      	subs	r2, r2, r3
 80091cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	619a      	str	r2, [r3, #24]
 80091d8:	e00e      	b.n	80091f8 <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 80091da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	699b      	ldr	r3, [r3, #24]
 80091e6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80091ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	2200      	movs	r2, #0
 80091f6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80091f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	785b      	ldrb	r3, [r3, #1]
 8009204:	2b00      	cmp	r3, #0
 8009206:	f040 8085 	bne.w	8009314 <USB_EPStartXfer+0x14fe>
 800920a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800920e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009218:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800921c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009226:	b29b      	uxth	r3, r3
 8009228:	461a      	mov	r2, r3
 800922a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800922e:	4413      	add	r3, r2
 8009230:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009234:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009238:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	781b      	ldrb	r3, [r3, #0]
 8009240:	00da      	lsls	r2, r3, #3
 8009242:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009246:	4413      	add	r3, r2
 8009248:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800924c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009250:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009254:	881b      	ldrh	r3, [r3, #0]
 8009256:	b29b      	uxth	r3, r3
 8009258:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800925c:	b29a      	uxth	r2, r3
 800925e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009262:	801a      	strh	r2, [r3, #0]
 8009264:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009268:	2b00      	cmp	r3, #0
 800926a:	d10c      	bne.n	8009286 <USB_EPStartXfer+0x1470>
 800926c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009270:	881b      	ldrh	r3, [r3, #0]
 8009272:	b29b      	uxth	r3, r3
 8009274:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009278:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800927c:	b29a      	uxth	r2, r3
 800927e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009282:	801a      	strh	r2, [r3, #0]
 8009284:	e077      	b.n	8009376 <USB_EPStartXfer+0x1560>
 8009286:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800928a:	2b3e      	cmp	r3, #62	@ 0x3e
 800928c:	d81e      	bhi.n	80092cc <USB_EPStartXfer+0x14b6>
 800928e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009292:	085b      	lsrs	r3, r3, #1
 8009294:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009298:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800929c:	f003 0301 	and.w	r3, r3, #1
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d004      	beq.n	80092ae <USB_EPStartXfer+0x1498>
 80092a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80092a8:	3301      	adds	r3, #1
 80092aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80092ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80092b2:	881b      	ldrh	r3, [r3, #0]
 80092b4:	b29a      	uxth	r2, r3
 80092b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80092ba:	b29b      	uxth	r3, r3
 80092bc:	029b      	lsls	r3, r3, #10
 80092be:	b29b      	uxth	r3, r3
 80092c0:	4313      	orrs	r3, r2
 80092c2:	b29a      	uxth	r2, r3
 80092c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80092c8:	801a      	strh	r2, [r3, #0]
 80092ca:	e054      	b.n	8009376 <USB_EPStartXfer+0x1560>
 80092cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092d0:	095b      	lsrs	r3, r3, #5
 80092d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80092d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092da:	f003 031f 	and.w	r3, r3, #31
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d104      	bne.n	80092ec <USB_EPStartXfer+0x14d6>
 80092e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80092e6:	3b01      	subs	r3, #1
 80092e8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80092ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80092f0:	881b      	ldrh	r3, [r3, #0]
 80092f2:	b29a      	uxth	r2, r3
 80092f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80092f8:	b29b      	uxth	r3, r3
 80092fa:	029b      	lsls	r3, r3, #10
 80092fc:	b29b      	uxth	r3, r3
 80092fe:	4313      	orrs	r3, r2
 8009300:	b29b      	uxth	r3, r3
 8009302:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009306:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800930a:	b29a      	uxth	r2, r3
 800930c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009310:	801a      	strh	r2, [r3, #0]
 8009312:	e030      	b.n	8009376 <USB_EPStartXfer+0x1560>
 8009314:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009318:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	785b      	ldrb	r3, [r3, #1]
 8009320:	2b01      	cmp	r3, #1
 8009322:	d128      	bne.n	8009376 <USB_EPStartXfer+0x1560>
 8009324:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009328:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009332:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009336:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009340:	b29b      	uxth	r3, r3
 8009342:	461a      	mov	r2, r3
 8009344:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009348:	4413      	add	r3, r2
 800934a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800934e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009352:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	781b      	ldrb	r3, [r3, #0]
 800935a:	00da      	lsls	r2, r3, #3
 800935c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009360:	4413      	add	r3, r2
 8009362:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009366:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800936a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800936e:	b29a      	uxth	r2, r3
 8009370:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8009374:	801a      	strh	r2, [r3, #0]
 8009376:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800937a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009384:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009388:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	785b      	ldrb	r3, [r3, #1]
 8009390:	2b00      	cmp	r3, #0
 8009392:	f040 8085 	bne.w	80094a0 <USB_EPStartXfer+0x168a>
 8009396:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800939a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80093a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80093b2:	b29b      	uxth	r3, r3
 80093b4:	461a      	mov	r2, r3
 80093b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80093ba:	4413      	add	r3, r2
 80093bc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80093c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	781b      	ldrb	r3, [r3, #0]
 80093cc:	00da      	lsls	r2, r3, #3
 80093ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80093d2:	4413      	add	r3, r2
 80093d4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80093d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80093dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80093e0:	881b      	ldrh	r3, [r3, #0]
 80093e2:	b29b      	uxth	r3, r3
 80093e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80093e8:	b29a      	uxth	r2, r3
 80093ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80093ee:	801a      	strh	r2, [r3, #0]
 80093f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d10c      	bne.n	8009412 <USB_EPStartXfer+0x15fc>
 80093f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80093fc:	881b      	ldrh	r3, [r3, #0]
 80093fe:	b29b      	uxth	r3, r3
 8009400:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009404:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009408:	b29a      	uxth	r2, r3
 800940a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800940e:	801a      	strh	r2, [r3, #0]
 8009410:	e073      	b.n	80094fa <USB_EPStartXfer+0x16e4>
 8009412:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009416:	2b3e      	cmp	r3, #62	@ 0x3e
 8009418:	d81e      	bhi.n	8009458 <USB_EPStartXfer+0x1642>
 800941a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800941e:	085b      	lsrs	r3, r3, #1
 8009420:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009424:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009428:	f003 0301 	and.w	r3, r3, #1
 800942c:	2b00      	cmp	r3, #0
 800942e:	d004      	beq.n	800943a <USB_EPStartXfer+0x1624>
 8009430:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009434:	3301      	adds	r3, #1
 8009436:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800943a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800943e:	881b      	ldrh	r3, [r3, #0]
 8009440:	b29a      	uxth	r2, r3
 8009442:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009446:	b29b      	uxth	r3, r3
 8009448:	029b      	lsls	r3, r3, #10
 800944a:	b29b      	uxth	r3, r3
 800944c:	4313      	orrs	r3, r2
 800944e:	b29a      	uxth	r2, r3
 8009450:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009454:	801a      	strh	r2, [r3, #0]
 8009456:	e050      	b.n	80094fa <USB_EPStartXfer+0x16e4>
 8009458:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800945c:	095b      	lsrs	r3, r3, #5
 800945e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009462:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009466:	f003 031f 	and.w	r3, r3, #31
 800946a:	2b00      	cmp	r3, #0
 800946c:	d104      	bne.n	8009478 <USB_EPStartXfer+0x1662>
 800946e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009472:	3b01      	subs	r3, #1
 8009474:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009478:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800947c:	881b      	ldrh	r3, [r3, #0]
 800947e:	b29a      	uxth	r2, r3
 8009480:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009484:	b29b      	uxth	r3, r3
 8009486:	029b      	lsls	r3, r3, #10
 8009488:	b29b      	uxth	r3, r3
 800948a:	4313      	orrs	r3, r2
 800948c:	b29b      	uxth	r3, r3
 800948e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009492:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009496:	b29a      	uxth	r2, r3
 8009498:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800949c:	801a      	strh	r2, [r3, #0]
 800949e:	e02c      	b.n	80094fa <USB_EPStartXfer+0x16e4>
 80094a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	785b      	ldrb	r3, [r3, #1]
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d124      	bne.n	80094fa <USB_EPStartXfer+0x16e4>
 80094b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80094be:	b29b      	uxth	r3, r3
 80094c0:	461a      	mov	r2, r3
 80094c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80094c6:	4413      	add	r3, r2
 80094c8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80094cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	781b      	ldrb	r3, [r3, #0]
 80094d8:	00da      	lsls	r2, r3, #3
 80094da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80094de:	4413      	add	r3, r2
 80094e0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80094e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80094e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094ec:	b29a      	uxth	r2, r3
 80094ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80094f2:	801a      	strh	r2, [r3, #0]
 80094f4:	e001      	b.n	80094fa <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 80094f6:	2301      	movs	r3, #1
 80094f8:	e03a      	b.n	8009570 <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80094fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009502:	681a      	ldr	r2, [r3, #0]
 8009504:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009508:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	781b      	ldrb	r3, [r3, #0]
 8009510:	009b      	lsls	r3, r3, #2
 8009512:	4413      	add	r3, r2
 8009514:	881b      	ldrh	r3, [r3, #0]
 8009516:	b29b      	uxth	r3, r3
 8009518:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800951c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009520:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009524:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009528:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800952c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009530:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009534:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009538:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800953c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009540:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009544:	681a      	ldr	r2, [r3, #0]
 8009546:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800954a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	781b      	ldrb	r3, [r3, #0]
 8009552:	009b      	lsls	r3, r3, #2
 8009554:	441a      	add	r2, r3
 8009556:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800955a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800955e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009562:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009566:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800956a:	b29b      	uxth	r3, r3
 800956c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800956e:	2300      	movs	r3, #0
}
 8009570:	4618      	mov	r0, r3
 8009572:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}

0800957a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800957a:	b480      	push	{r7}
 800957c:	b083      	sub	sp, #12
 800957e:	af00      	add	r7, sp, #0
 8009580:	6078      	str	r0, [r7, #4]
 8009582:	460b      	mov	r3, r1
 8009584:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009586:	78fb      	ldrb	r3, [r7, #3]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d103      	bne.n	8009594 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2280      	movs	r2, #128	@ 0x80
 8009590:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8009594:	2300      	movs	r3, #0
}
 8009596:	4618      	mov	r0, r3
 8009598:	370c      	adds	r7, #12
 800959a:	46bd      	mov	sp, r7
 800959c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a0:	4770      	bx	lr

080095a2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80095a2:	b480      	push	{r7}
 80095a4:	b085      	sub	sp, #20
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80095b0:	b29b      	uxth	r3, r3
 80095b2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80095b4:	68fb      	ldr	r3, [r7, #12]
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3714      	adds	r7, #20
 80095ba:	46bd      	mov	sp, r7
 80095bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c0:	4770      	bx	lr

080095c2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80095c2:	b480      	push	{r7}
 80095c4:	b08b      	sub	sp, #44	@ 0x2c
 80095c6:	af00      	add	r7, sp, #0
 80095c8:	60f8      	str	r0, [r7, #12]
 80095ca:	60b9      	str	r1, [r7, #8]
 80095cc:	4611      	mov	r1, r2
 80095ce:	461a      	mov	r2, r3
 80095d0:	460b      	mov	r3, r1
 80095d2:	80fb      	strh	r3, [r7, #6]
 80095d4:	4613      	mov	r3, r2
 80095d6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80095d8:	88bb      	ldrh	r3, [r7, #4]
 80095da:	3301      	adds	r3, #1
 80095dc:	085b      	lsrs	r3, r3, #1
 80095de:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80095e8:	88fa      	ldrh	r2, [r7, #6]
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	4413      	add	r3, r2
 80095ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80095f2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80095f4:	69bb      	ldr	r3, [r7, #24]
 80095f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80095f8:	e01c      	b.n	8009634 <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 80095fa:	69fb      	ldr	r3, [r7, #28]
 80095fc:	781b      	ldrb	r3, [r3, #0]
 80095fe:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8009600:	69fb      	ldr	r3, [r7, #28]
 8009602:	3301      	adds	r3, #1
 8009604:	781b      	ldrb	r3, [r3, #0]
 8009606:	b21b      	sxth	r3, r3
 8009608:	021b      	lsls	r3, r3, #8
 800960a:	b21a      	sxth	r2, r3
 800960c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009610:	4313      	orrs	r3, r2
 8009612:	b21b      	sxth	r3, r3
 8009614:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8009616:	6a3b      	ldr	r3, [r7, #32]
 8009618:	8a7a      	ldrh	r2, [r7, #18]
 800961a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800961c:	6a3b      	ldr	r3, [r7, #32]
 800961e:	3302      	adds	r3, #2
 8009620:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8009622:	69fb      	ldr	r3, [r7, #28]
 8009624:	3301      	adds	r3, #1
 8009626:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8009628:	69fb      	ldr	r3, [r7, #28]
 800962a:	3301      	adds	r3, #1
 800962c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800962e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009630:	3b01      	subs	r3, #1
 8009632:	627b      	str	r3, [r7, #36]	@ 0x24
 8009634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009636:	2b00      	cmp	r3, #0
 8009638:	d1df      	bne.n	80095fa <USB_WritePMA+0x38>
  }
}
 800963a:	bf00      	nop
 800963c:	bf00      	nop
 800963e:	372c      	adds	r7, #44	@ 0x2c
 8009640:	46bd      	mov	sp, r7
 8009642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009646:	4770      	bx	lr

08009648 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009648:	b480      	push	{r7}
 800964a:	b08b      	sub	sp, #44	@ 0x2c
 800964c:	af00      	add	r7, sp, #0
 800964e:	60f8      	str	r0, [r7, #12]
 8009650:	60b9      	str	r1, [r7, #8]
 8009652:	4611      	mov	r1, r2
 8009654:	461a      	mov	r2, r3
 8009656:	460b      	mov	r3, r1
 8009658:	80fb      	strh	r3, [r7, #6]
 800965a:	4613      	mov	r3, r2
 800965c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800965e:	88bb      	ldrh	r3, [r7, #4]
 8009660:	085b      	lsrs	r3, r3, #1
 8009662:	b29b      	uxth	r3, r3
 8009664:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800966e:	88fa      	ldrh	r2, [r7, #6]
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	4413      	add	r3, r2
 8009674:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009678:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800967a:	69bb      	ldr	r3, [r7, #24]
 800967c:	627b      	str	r3, [r7, #36]	@ 0x24
 800967e:	e018      	b.n	80096b2 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8009680:	6a3b      	ldr	r3, [r7, #32]
 8009682:	881b      	ldrh	r3, [r3, #0]
 8009684:	b29b      	uxth	r3, r3
 8009686:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009688:	6a3b      	ldr	r3, [r7, #32]
 800968a:	3302      	adds	r3, #2
 800968c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	b2da      	uxtb	r2, r3
 8009692:	69fb      	ldr	r3, [r7, #28]
 8009694:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009696:	69fb      	ldr	r3, [r7, #28]
 8009698:	3301      	adds	r3, #1
 800969a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	0a1b      	lsrs	r3, r3, #8
 80096a0:	b2da      	uxtb	r2, r3
 80096a2:	69fb      	ldr	r3, [r7, #28]
 80096a4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80096a6:	69fb      	ldr	r3, [r7, #28]
 80096a8:	3301      	adds	r3, #1
 80096aa:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80096ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096ae:	3b01      	subs	r3, #1
 80096b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80096b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d1e3      	bne.n	8009680 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80096b8:	88bb      	ldrh	r3, [r7, #4]
 80096ba:	f003 0301 	and.w	r3, r3, #1
 80096be:	b29b      	uxth	r3, r3
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d007      	beq.n	80096d4 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 80096c4:	6a3b      	ldr	r3, [r7, #32]
 80096c6:	881b      	ldrh	r3, [r3, #0]
 80096c8:	b29b      	uxth	r3, r3
 80096ca:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80096cc:	693b      	ldr	r3, [r7, #16]
 80096ce:	b2da      	uxtb	r2, r3
 80096d0:	69fb      	ldr	r3, [r7, #28]
 80096d2:	701a      	strb	r2, [r3, #0]
  }
}
 80096d4:	bf00      	nop
 80096d6:	372c      	adds	r7, #44	@ 0x2c
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr

080096e0 <__cvt>:
 80096e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80096e4:	ec57 6b10 	vmov	r6, r7, d0
 80096e8:	2f00      	cmp	r7, #0
 80096ea:	460c      	mov	r4, r1
 80096ec:	4619      	mov	r1, r3
 80096ee:	463b      	mov	r3, r7
 80096f0:	bfbb      	ittet	lt
 80096f2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80096f6:	461f      	movlt	r7, r3
 80096f8:	2300      	movge	r3, #0
 80096fa:	232d      	movlt	r3, #45	@ 0x2d
 80096fc:	700b      	strb	r3, [r1, #0]
 80096fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009700:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009704:	4691      	mov	r9, r2
 8009706:	f023 0820 	bic.w	r8, r3, #32
 800970a:	bfbc      	itt	lt
 800970c:	4632      	movlt	r2, r6
 800970e:	4616      	movlt	r6, r2
 8009710:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009714:	d005      	beq.n	8009722 <__cvt+0x42>
 8009716:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800971a:	d100      	bne.n	800971e <__cvt+0x3e>
 800971c:	3401      	adds	r4, #1
 800971e:	2102      	movs	r1, #2
 8009720:	e000      	b.n	8009724 <__cvt+0x44>
 8009722:	2103      	movs	r1, #3
 8009724:	ab03      	add	r3, sp, #12
 8009726:	9301      	str	r3, [sp, #4]
 8009728:	ab02      	add	r3, sp, #8
 800972a:	9300      	str	r3, [sp, #0]
 800972c:	ec47 6b10 	vmov	d0, r6, r7
 8009730:	4653      	mov	r3, sl
 8009732:	4622      	mov	r2, r4
 8009734:	f000 ff3c 	bl	800a5b0 <_dtoa_r>
 8009738:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800973c:	4605      	mov	r5, r0
 800973e:	d119      	bne.n	8009774 <__cvt+0x94>
 8009740:	f019 0f01 	tst.w	r9, #1
 8009744:	d00e      	beq.n	8009764 <__cvt+0x84>
 8009746:	eb00 0904 	add.w	r9, r0, r4
 800974a:	2200      	movs	r2, #0
 800974c:	2300      	movs	r3, #0
 800974e:	4630      	mov	r0, r6
 8009750:	4639      	mov	r1, r7
 8009752:	f7f7 f9c1 	bl	8000ad8 <__aeabi_dcmpeq>
 8009756:	b108      	cbz	r0, 800975c <__cvt+0x7c>
 8009758:	f8cd 900c 	str.w	r9, [sp, #12]
 800975c:	2230      	movs	r2, #48	@ 0x30
 800975e:	9b03      	ldr	r3, [sp, #12]
 8009760:	454b      	cmp	r3, r9
 8009762:	d31e      	bcc.n	80097a2 <__cvt+0xc2>
 8009764:	9b03      	ldr	r3, [sp, #12]
 8009766:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009768:	1b5b      	subs	r3, r3, r5
 800976a:	4628      	mov	r0, r5
 800976c:	6013      	str	r3, [r2, #0]
 800976e:	b004      	add	sp, #16
 8009770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009774:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009778:	eb00 0904 	add.w	r9, r0, r4
 800977c:	d1e5      	bne.n	800974a <__cvt+0x6a>
 800977e:	7803      	ldrb	r3, [r0, #0]
 8009780:	2b30      	cmp	r3, #48	@ 0x30
 8009782:	d10a      	bne.n	800979a <__cvt+0xba>
 8009784:	2200      	movs	r2, #0
 8009786:	2300      	movs	r3, #0
 8009788:	4630      	mov	r0, r6
 800978a:	4639      	mov	r1, r7
 800978c:	f7f7 f9a4 	bl	8000ad8 <__aeabi_dcmpeq>
 8009790:	b918      	cbnz	r0, 800979a <__cvt+0xba>
 8009792:	f1c4 0401 	rsb	r4, r4, #1
 8009796:	f8ca 4000 	str.w	r4, [sl]
 800979a:	f8da 3000 	ldr.w	r3, [sl]
 800979e:	4499      	add	r9, r3
 80097a0:	e7d3      	b.n	800974a <__cvt+0x6a>
 80097a2:	1c59      	adds	r1, r3, #1
 80097a4:	9103      	str	r1, [sp, #12]
 80097a6:	701a      	strb	r2, [r3, #0]
 80097a8:	e7d9      	b.n	800975e <__cvt+0x7e>

080097aa <__exponent>:
 80097aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80097ac:	2900      	cmp	r1, #0
 80097ae:	bfba      	itte	lt
 80097b0:	4249      	neglt	r1, r1
 80097b2:	232d      	movlt	r3, #45	@ 0x2d
 80097b4:	232b      	movge	r3, #43	@ 0x2b
 80097b6:	2909      	cmp	r1, #9
 80097b8:	7002      	strb	r2, [r0, #0]
 80097ba:	7043      	strb	r3, [r0, #1]
 80097bc:	dd29      	ble.n	8009812 <__exponent+0x68>
 80097be:	f10d 0307 	add.w	r3, sp, #7
 80097c2:	461d      	mov	r5, r3
 80097c4:	270a      	movs	r7, #10
 80097c6:	461a      	mov	r2, r3
 80097c8:	fbb1 f6f7 	udiv	r6, r1, r7
 80097cc:	fb07 1416 	mls	r4, r7, r6, r1
 80097d0:	3430      	adds	r4, #48	@ 0x30
 80097d2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80097d6:	460c      	mov	r4, r1
 80097d8:	2c63      	cmp	r4, #99	@ 0x63
 80097da:	f103 33ff 	add.w	r3, r3, #4294967295
 80097de:	4631      	mov	r1, r6
 80097e0:	dcf1      	bgt.n	80097c6 <__exponent+0x1c>
 80097e2:	3130      	adds	r1, #48	@ 0x30
 80097e4:	1e94      	subs	r4, r2, #2
 80097e6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80097ea:	1c41      	adds	r1, r0, #1
 80097ec:	4623      	mov	r3, r4
 80097ee:	42ab      	cmp	r3, r5
 80097f0:	d30a      	bcc.n	8009808 <__exponent+0x5e>
 80097f2:	f10d 0309 	add.w	r3, sp, #9
 80097f6:	1a9b      	subs	r3, r3, r2
 80097f8:	42ac      	cmp	r4, r5
 80097fa:	bf88      	it	hi
 80097fc:	2300      	movhi	r3, #0
 80097fe:	3302      	adds	r3, #2
 8009800:	4403      	add	r3, r0
 8009802:	1a18      	subs	r0, r3, r0
 8009804:	b003      	add	sp, #12
 8009806:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009808:	f813 6b01 	ldrb.w	r6, [r3], #1
 800980c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009810:	e7ed      	b.n	80097ee <__exponent+0x44>
 8009812:	2330      	movs	r3, #48	@ 0x30
 8009814:	3130      	adds	r1, #48	@ 0x30
 8009816:	7083      	strb	r3, [r0, #2]
 8009818:	70c1      	strb	r1, [r0, #3]
 800981a:	1d03      	adds	r3, r0, #4
 800981c:	e7f1      	b.n	8009802 <__exponent+0x58>
	...

08009820 <_printf_float>:
 8009820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009824:	b08d      	sub	sp, #52	@ 0x34
 8009826:	460c      	mov	r4, r1
 8009828:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800982c:	4616      	mov	r6, r2
 800982e:	461f      	mov	r7, r3
 8009830:	4605      	mov	r5, r0
 8009832:	f000 fdbd 	bl	800a3b0 <_localeconv_r>
 8009836:	6803      	ldr	r3, [r0, #0]
 8009838:	9304      	str	r3, [sp, #16]
 800983a:	4618      	mov	r0, r3
 800983c:	f7f6 fd20 	bl	8000280 <strlen>
 8009840:	2300      	movs	r3, #0
 8009842:	930a      	str	r3, [sp, #40]	@ 0x28
 8009844:	f8d8 3000 	ldr.w	r3, [r8]
 8009848:	9005      	str	r0, [sp, #20]
 800984a:	3307      	adds	r3, #7
 800984c:	f023 0307 	bic.w	r3, r3, #7
 8009850:	f103 0208 	add.w	r2, r3, #8
 8009854:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009858:	f8d4 b000 	ldr.w	fp, [r4]
 800985c:	f8c8 2000 	str.w	r2, [r8]
 8009860:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009864:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009868:	9307      	str	r3, [sp, #28]
 800986a:	f8cd 8018 	str.w	r8, [sp, #24]
 800986e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009872:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009876:	4b9c      	ldr	r3, [pc, #624]	@ (8009ae8 <_printf_float+0x2c8>)
 8009878:	f04f 32ff 	mov.w	r2, #4294967295
 800987c:	f7f7 f95e 	bl	8000b3c <__aeabi_dcmpun>
 8009880:	bb70      	cbnz	r0, 80098e0 <_printf_float+0xc0>
 8009882:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009886:	4b98      	ldr	r3, [pc, #608]	@ (8009ae8 <_printf_float+0x2c8>)
 8009888:	f04f 32ff 	mov.w	r2, #4294967295
 800988c:	f7f7 f938 	bl	8000b00 <__aeabi_dcmple>
 8009890:	bb30      	cbnz	r0, 80098e0 <_printf_float+0xc0>
 8009892:	2200      	movs	r2, #0
 8009894:	2300      	movs	r3, #0
 8009896:	4640      	mov	r0, r8
 8009898:	4649      	mov	r1, r9
 800989a:	f7f7 f927 	bl	8000aec <__aeabi_dcmplt>
 800989e:	b110      	cbz	r0, 80098a6 <_printf_float+0x86>
 80098a0:	232d      	movs	r3, #45	@ 0x2d
 80098a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80098a6:	4a91      	ldr	r2, [pc, #580]	@ (8009aec <_printf_float+0x2cc>)
 80098a8:	4b91      	ldr	r3, [pc, #580]	@ (8009af0 <_printf_float+0x2d0>)
 80098aa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80098ae:	bf8c      	ite	hi
 80098b0:	4690      	movhi	r8, r2
 80098b2:	4698      	movls	r8, r3
 80098b4:	2303      	movs	r3, #3
 80098b6:	6123      	str	r3, [r4, #16]
 80098b8:	f02b 0304 	bic.w	r3, fp, #4
 80098bc:	6023      	str	r3, [r4, #0]
 80098be:	f04f 0900 	mov.w	r9, #0
 80098c2:	9700      	str	r7, [sp, #0]
 80098c4:	4633      	mov	r3, r6
 80098c6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80098c8:	4621      	mov	r1, r4
 80098ca:	4628      	mov	r0, r5
 80098cc:	f000 f9d2 	bl	8009c74 <_printf_common>
 80098d0:	3001      	adds	r0, #1
 80098d2:	f040 808d 	bne.w	80099f0 <_printf_float+0x1d0>
 80098d6:	f04f 30ff 	mov.w	r0, #4294967295
 80098da:	b00d      	add	sp, #52	@ 0x34
 80098dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098e0:	4642      	mov	r2, r8
 80098e2:	464b      	mov	r3, r9
 80098e4:	4640      	mov	r0, r8
 80098e6:	4649      	mov	r1, r9
 80098e8:	f7f7 f928 	bl	8000b3c <__aeabi_dcmpun>
 80098ec:	b140      	cbz	r0, 8009900 <_printf_float+0xe0>
 80098ee:	464b      	mov	r3, r9
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	bfbc      	itt	lt
 80098f4:	232d      	movlt	r3, #45	@ 0x2d
 80098f6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80098fa:	4a7e      	ldr	r2, [pc, #504]	@ (8009af4 <_printf_float+0x2d4>)
 80098fc:	4b7e      	ldr	r3, [pc, #504]	@ (8009af8 <_printf_float+0x2d8>)
 80098fe:	e7d4      	b.n	80098aa <_printf_float+0x8a>
 8009900:	6863      	ldr	r3, [r4, #4]
 8009902:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009906:	9206      	str	r2, [sp, #24]
 8009908:	1c5a      	adds	r2, r3, #1
 800990a:	d13b      	bne.n	8009984 <_printf_float+0x164>
 800990c:	2306      	movs	r3, #6
 800990e:	6063      	str	r3, [r4, #4]
 8009910:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009914:	2300      	movs	r3, #0
 8009916:	6022      	str	r2, [r4, #0]
 8009918:	9303      	str	r3, [sp, #12]
 800991a:	ab0a      	add	r3, sp, #40	@ 0x28
 800991c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009920:	ab09      	add	r3, sp, #36	@ 0x24
 8009922:	9300      	str	r3, [sp, #0]
 8009924:	6861      	ldr	r1, [r4, #4]
 8009926:	ec49 8b10 	vmov	d0, r8, r9
 800992a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800992e:	4628      	mov	r0, r5
 8009930:	f7ff fed6 	bl	80096e0 <__cvt>
 8009934:	9b06      	ldr	r3, [sp, #24]
 8009936:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009938:	2b47      	cmp	r3, #71	@ 0x47
 800993a:	4680      	mov	r8, r0
 800993c:	d129      	bne.n	8009992 <_printf_float+0x172>
 800993e:	1cc8      	adds	r0, r1, #3
 8009940:	db02      	blt.n	8009948 <_printf_float+0x128>
 8009942:	6863      	ldr	r3, [r4, #4]
 8009944:	4299      	cmp	r1, r3
 8009946:	dd41      	ble.n	80099cc <_printf_float+0x1ac>
 8009948:	f1aa 0a02 	sub.w	sl, sl, #2
 800994c:	fa5f fa8a 	uxtb.w	sl, sl
 8009950:	3901      	subs	r1, #1
 8009952:	4652      	mov	r2, sl
 8009954:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009958:	9109      	str	r1, [sp, #36]	@ 0x24
 800995a:	f7ff ff26 	bl	80097aa <__exponent>
 800995e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009960:	1813      	adds	r3, r2, r0
 8009962:	2a01      	cmp	r2, #1
 8009964:	4681      	mov	r9, r0
 8009966:	6123      	str	r3, [r4, #16]
 8009968:	dc02      	bgt.n	8009970 <_printf_float+0x150>
 800996a:	6822      	ldr	r2, [r4, #0]
 800996c:	07d2      	lsls	r2, r2, #31
 800996e:	d501      	bpl.n	8009974 <_printf_float+0x154>
 8009970:	3301      	adds	r3, #1
 8009972:	6123      	str	r3, [r4, #16]
 8009974:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009978:	2b00      	cmp	r3, #0
 800997a:	d0a2      	beq.n	80098c2 <_printf_float+0xa2>
 800997c:	232d      	movs	r3, #45	@ 0x2d
 800997e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009982:	e79e      	b.n	80098c2 <_printf_float+0xa2>
 8009984:	9a06      	ldr	r2, [sp, #24]
 8009986:	2a47      	cmp	r2, #71	@ 0x47
 8009988:	d1c2      	bne.n	8009910 <_printf_float+0xf0>
 800998a:	2b00      	cmp	r3, #0
 800998c:	d1c0      	bne.n	8009910 <_printf_float+0xf0>
 800998e:	2301      	movs	r3, #1
 8009990:	e7bd      	b.n	800990e <_printf_float+0xee>
 8009992:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009996:	d9db      	bls.n	8009950 <_printf_float+0x130>
 8009998:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800999c:	d118      	bne.n	80099d0 <_printf_float+0x1b0>
 800999e:	2900      	cmp	r1, #0
 80099a0:	6863      	ldr	r3, [r4, #4]
 80099a2:	dd0b      	ble.n	80099bc <_printf_float+0x19c>
 80099a4:	6121      	str	r1, [r4, #16]
 80099a6:	b913      	cbnz	r3, 80099ae <_printf_float+0x18e>
 80099a8:	6822      	ldr	r2, [r4, #0]
 80099aa:	07d0      	lsls	r0, r2, #31
 80099ac:	d502      	bpl.n	80099b4 <_printf_float+0x194>
 80099ae:	3301      	adds	r3, #1
 80099b0:	440b      	add	r3, r1
 80099b2:	6123      	str	r3, [r4, #16]
 80099b4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80099b6:	f04f 0900 	mov.w	r9, #0
 80099ba:	e7db      	b.n	8009974 <_printf_float+0x154>
 80099bc:	b913      	cbnz	r3, 80099c4 <_printf_float+0x1a4>
 80099be:	6822      	ldr	r2, [r4, #0]
 80099c0:	07d2      	lsls	r2, r2, #31
 80099c2:	d501      	bpl.n	80099c8 <_printf_float+0x1a8>
 80099c4:	3302      	adds	r3, #2
 80099c6:	e7f4      	b.n	80099b2 <_printf_float+0x192>
 80099c8:	2301      	movs	r3, #1
 80099ca:	e7f2      	b.n	80099b2 <_printf_float+0x192>
 80099cc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80099d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80099d2:	4299      	cmp	r1, r3
 80099d4:	db05      	blt.n	80099e2 <_printf_float+0x1c2>
 80099d6:	6823      	ldr	r3, [r4, #0]
 80099d8:	6121      	str	r1, [r4, #16]
 80099da:	07d8      	lsls	r0, r3, #31
 80099dc:	d5ea      	bpl.n	80099b4 <_printf_float+0x194>
 80099de:	1c4b      	adds	r3, r1, #1
 80099e0:	e7e7      	b.n	80099b2 <_printf_float+0x192>
 80099e2:	2900      	cmp	r1, #0
 80099e4:	bfd4      	ite	le
 80099e6:	f1c1 0202 	rsble	r2, r1, #2
 80099ea:	2201      	movgt	r2, #1
 80099ec:	4413      	add	r3, r2
 80099ee:	e7e0      	b.n	80099b2 <_printf_float+0x192>
 80099f0:	6823      	ldr	r3, [r4, #0]
 80099f2:	055a      	lsls	r2, r3, #21
 80099f4:	d407      	bmi.n	8009a06 <_printf_float+0x1e6>
 80099f6:	6923      	ldr	r3, [r4, #16]
 80099f8:	4642      	mov	r2, r8
 80099fa:	4631      	mov	r1, r6
 80099fc:	4628      	mov	r0, r5
 80099fe:	47b8      	blx	r7
 8009a00:	3001      	adds	r0, #1
 8009a02:	d12b      	bne.n	8009a5c <_printf_float+0x23c>
 8009a04:	e767      	b.n	80098d6 <_printf_float+0xb6>
 8009a06:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009a0a:	f240 80dd 	bls.w	8009bc8 <_printf_float+0x3a8>
 8009a0e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009a12:	2200      	movs	r2, #0
 8009a14:	2300      	movs	r3, #0
 8009a16:	f7f7 f85f 	bl	8000ad8 <__aeabi_dcmpeq>
 8009a1a:	2800      	cmp	r0, #0
 8009a1c:	d033      	beq.n	8009a86 <_printf_float+0x266>
 8009a1e:	4a37      	ldr	r2, [pc, #220]	@ (8009afc <_printf_float+0x2dc>)
 8009a20:	2301      	movs	r3, #1
 8009a22:	4631      	mov	r1, r6
 8009a24:	4628      	mov	r0, r5
 8009a26:	47b8      	blx	r7
 8009a28:	3001      	adds	r0, #1
 8009a2a:	f43f af54 	beq.w	80098d6 <_printf_float+0xb6>
 8009a2e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009a32:	4543      	cmp	r3, r8
 8009a34:	db02      	blt.n	8009a3c <_printf_float+0x21c>
 8009a36:	6823      	ldr	r3, [r4, #0]
 8009a38:	07d8      	lsls	r0, r3, #31
 8009a3a:	d50f      	bpl.n	8009a5c <_printf_float+0x23c>
 8009a3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a40:	4631      	mov	r1, r6
 8009a42:	4628      	mov	r0, r5
 8009a44:	47b8      	blx	r7
 8009a46:	3001      	adds	r0, #1
 8009a48:	f43f af45 	beq.w	80098d6 <_printf_float+0xb6>
 8009a4c:	f04f 0900 	mov.w	r9, #0
 8009a50:	f108 38ff 	add.w	r8, r8, #4294967295
 8009a54:	f104 0a1a 	add.w	sl, r4, #26
 8009a58:	45c8      	cmp	r8, r9
 8009a5a:	dc09      	bgt.n	8009a70 <_printf_float+0x250>
 8009a5c:	6823      	ldr	r3, [r4, #0]
 8009a5e:	079b      	lsls	r3, r3, #30
 8009a60:	f100 8103 	bmi.w	8009c6a <_printf_float+0x44a>
 8009a64:	68e0      	ldr	r0, [r4, #12]
 8009a66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a68:	4298      	cmp	r0, r3
 8009a6a:	bfb8      	it	lt
 8009a6c:	4618      	movlt	r0, r3
 8009a6e:	e734      	b.n	80098da <_printf_float+0xba>
 8009a70:	2301      	movs	r3, #1
 8009a72:	4652      	mov	r2, sl
 8009a74:	4631      	mov	r1, r6
 8009a76:	4628      	mov	r0, r5
 8009a78:	47b8      	blx	r7
 8009a7a:	3001      	adds	r0, #1
 8009a7c:	f43f af2b 	beq.w	80098d6 <_printf_float+0xb6>
 8009a80:	f109 0901 	add.w	r9, r9, #1
 8009a84:	e7e8      	b.n	8009a58 <_printf_float+0x238>
 8009a86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	dc39      	bgt.n	8009b00 <_printf_float+0x2e0>
 8009a8c:	4a1b      	ldr	r2, [pc, #108]	@ (8009afc <_printf_float+0x2dc>)
 8009a8e:	2301      	movs	r3, #1
 8009a90:	4631      	mov	r1, r6
 8009a92:	4628      	mov	r0, r5
 8009a94:	47b8      	blx	r7
 8009a96:	3001      	adds	r0, #1
 8009a98:	f43f af1d 	beq.w	80098d6 <_printf_float+0xb6>
 8009a9c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009aa0:	ea59 0303 	orrs.w	r3, r9, r3
 8009aa4:	d102      	bne.n	8009aac <_printf_float+0x28c>
 8009aa6:	6823      	ldr	r3, [r4, #0]
 8009aa8:	07d9      	lsls	r1, r3, #31
 8009aaa:	d5d7      	bpl.n	8009a5c <_printf_float+0x23c>
 8009aac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ab0:	4631      	mov	r1, r6
 8009ab2:	4628      	mov	r0, r5
 8009ab4:	47b8      	blx	r7
 8009ab6:	3001      	adds	r0, #1
 8009ab8:	f43f af0d 	beq.w	80098d6 <_printf_float+0xb6>
 8009abc:	f04f 0a00 	mov.w	sl, #0
 8009ac0:	f104 0b1a 	add.w	fp, r4, #26
 8009ac4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ac6:	425b      	negs	r3, r3
 8009ac8:	4553      	cmp	r3, sl
 8009aca:	dc01      	bgt.n	8009ad0 <_printf_float+0x2b0>
 8009acc:	464b      	mov	r3, r9
 8009ace:	e793      	b.n	80099f8 <_printf_float+0x1d8>
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	465a      	mov	r2, fp
 8009ad4:	4631      	mov	r1, r6
 8009ad6:	4628      	mov	r0, r5
 8009ad8:	47b8      	blx	r7
 8009ada:	3001      	adds	r0, #1
 8009adc:	f43f aefb 	beq.w	80098d6 <_printf_float+0xb6>
 8009ae0:	f10a 0a01 	add.w	sl, sl, #1
 8009ae4:	e7ee      	b.n	8009ac4 <_printf_float+0x2a4>
 8009ae6:	bf00      	nop
 8009ae8:	7fefffff 	.word	0x7fefffff
 8009aec:	0800c250 	.word	0x0800c250
 8009af0:	0800c24c 	.word	0x0800c24c
 8009af4:	0800c258 	.word	0x0800c258
 8009af8:	0800c254 	.word	0x0800c254
 8009afc:	0800c25c 	.word	0x0800c25c
 8009b00:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009b02:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009b06:	4553      	cmp	r3, sl
 8009b08:	bfa8      	it	ge
 8009b0a:	4653      	movge	r3, sl
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	4699      	mov	r9, r3
 8009b10:	dc36      	bgt.n	8009b80 <_printf_float+0x360>
 8009b12:	f04f 0b00 	mov.w	fp, #0
 8009b16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009b1a:	f104 021a 	add.w	r2, r4, #26
 8009b1e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009b20:	9306      	str	r3, [sp, #24]
 8009b22:	eba3 0309 	sub.w	r3, r3, r9
 8009b26:	455b      	cmp	r3, fp
 8009b28:	dc31      	bgt.n	8009b8e <_printf_float+0x36e>
 8009b2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b2c:	459a      	cmp	sl, r3
 8009b2e:	dc3a      	bgt.n	8009ba6 <_printf_float+0x386>
 8009b30:	6823      	ldr	r3, [r4, #0]
 8009b32:	07da      	lsls	r2, r3, #31
 8009b34:	d437      	bmi.n	8009ba6 <_printf_float+0x386>
 8009b36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b38:	ebaa 0903 	sub.w	r9, sl, r3
 8009b3c:	9b06      	ldr	r3, [sp, #24]
 8009b3e:	ebaa 0303 	sub.w	r3, sl, r3
 8009b42:	4599      	cmp	r9, r3
 8009b44:	bfa8      	it	ge
 8009b46:	4699      	movge	r9, r3
 8009b48:	f1b9 0f00 	cmp.w	r9, #0
 8009b4c:	dc33      	bgt.n	8009bb6 <_printf_float+0x396>
 8009b4e:	f04f 0800 	mov.w	r8, #0
 8009b52:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009b56:	f104 0b1a 	add.w	fp, r4, #26
 8009b5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b5c:	ebaa 0303 	sub.w	r3, sl, r3
 8009b60:	eba3 0309 	sub.w	r3, r3, r9
 8009b64:	4543      	cmp	r3, r8
 8009b66:	f77f af79 	ble.w	8009a5c <_printf_float+0x23c>
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	465a      	mov	r2, fp
 8009b6e:	4631      	mov	r1, r6
 8009b70:	4628      	mov	r0, r5
 8009b72:	47b8      	blx	r7
 8009b74:	3001      	adds	r0, #1
 8009b76:	f43f aeae 	beq.w	80098d6 <_printf_float+0xb6>
 8009b7a:	f108 0801 	add.w	r8, r8, #1
 8009b7e:	e7ec      	b.n	8009b5a <_printf_float+0x33a>
 8009b80:	4642      	mov	r2, r8
 8009b82:	4631      	mov	r1, r6
 8009b84:	4628      	mov	r0, r5
 8009b86:	47b8      	blx	r7
 8009b88:	3001      	adds	r0, #1
 8009b8a:	d1c2      	bne.n	8009b12 <_printf_float+0x2f2>
 8009b8c:	e6a3      	b.n	80098d6 <_printf_float+0xb6>
 8009b8e:	2301      	movs	r3, #1
 8009b90:	4631      	mov	r1, r6
 8009b92:	4628      	mov	r0, r5
 8009b94:	9206      	str	r2, [sp, #24]
 8009b96:	47b8      	blx	r7
 8009b98:	3001      	adds	r0, #1
 8009b9a:	f43f ae9c 	beq.w	80098d6 <_printf_float+0xb6>
 8009b9e:	9a06      	ldr	r2, [sp, #24]
 8009ba0:	f10b 0b01 	add.w	fp, fp, #1
 8009ba4:	e7bb      	b.n	8009b1e <_printf_float+0x2fe>
 8009ba6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009baa:	4631      	mov	r1, r6
 8009bac:	4628      	mov	r0, r5
 8009bae:	47b8      	blx	r7
 8009bb0:	3001      	adds	r0, #1
 8009bb2:	d1c0      	bne.n	8009b36 <_printf_float+0x316>
 8009bb4:	e68f      	b.n	80098d6 <_printf_float+0xb6>
 8009bb6:	9a06      	ldr	r2, [sp, #24]
 8009bb8:	464b      	mov	r3, r9
 8009bba:	4442      	add	r2, r8
 8009bbc:	4631      	mov	r1, r6
 8009bbe:	4628      	mov	r0, r5
 8009bc0:	47b8      	blx	r7
 8009bc2:	3001      	adds	r0, #1
 8009bc4:	d1c3      	bne.n	8009b4e <_printf_float+0x32e>
 8009bc6:	e686      	b.n	80098d6 <_printf_float+0xb6>
 8009bc8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009bcc:	f1ba 0f01 	cmp.w	sl, #1
 8009bd0:	dc01      	bgt.n	8009bd6 <_printf_float+0x3b6>
 8009bd2:	07db      	lsls	r3, r3, #31
 8009bd4:	d536      	bpl.n	8009c44 <_printf_float+0x424>
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	4642      	mov	r2, r8
 8009bda:	4631      	mov	r1, r6
 8009bdc:	4628      	mov	r0, r5
 8009bde:	47b8      	blx	r7
 8009be0:	3001      	adds	r0, #1
 8009be2:	f43f ae78 	beq.w	80098d6 <_printf_float+0xb6>
 8009be6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009bea:	4631      	mov	r1, r6
 8009bec:	4628      	mov	r0, r5
 8009bee:	47b8      	blx	r7
 8009bf0:	3001      	adds	r0, #1
 8009bf2:	f43f ae70 	beq.w	80098d6 <_printf_float+0xb6>
 8009bf6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c02:	f7f6 ff69 	bl	8000ad8 <__aeabi_dcmpeq>
 8009c06:	b9c0      	cbnz	r0, 8009c3a <_printf_float+0x41a>
 8009c08:	4653      	mov	r3, sl
 8009c0a:	f108 0201 	add.w	r2, r8, #1
 8009c0e:	4631      	mov	r1, r6
 8009c10:	4628      	mov	r0, r5
 8009c12:	47b8      	blx	r7
 8009c14:	3001      	adds	r0, #1
 8009c16:	d10c      	bne.n	8009c32 <_printf_float+0x412>
 8009c18:	e65d      	b.n	80098d6 <_printf_float+0xb6>
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	465a      	mov	r2, fp
 8009c1e:	4631      	mov	r1, r6
 8009c20:	4628      	mov	r0, r5
 8009c22:	47b8      	blx	r7
 8009c24:	3001      	adds	r0, #1
 8009c26:	f43f ae56 	beq.w	80098d6 <_printf_float+0xb6>
 8009c2a:	f108 0801 	add.w	r8, r8, #1
 8009c2e:	45d0      	cmp	r8, sl
 8009c30:	dbf3      	blt.n	8009c1a <_printf_float+0x3fa>
 8009c32:	464b      	mov	r3, r9
 8009c34:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009c38:	e6df      	b.n	80099fa <_printf_float+0x1da>
 8009c3a:	f04f 0800 	mov.w	r8, #0
 8009c3e:	f104 0b1a 	add.w	fp, r4, #26
 8009c42:	e7f4      	b.n	8009c2e <_printf_float+0x40e>
 8009c44:	2301      	movs	r3, #1
 8009c46:	4642      	mov	r2, r8
 8009c48:	e7e1      	b.n	8009c0e <_printf_float+0x3ee>
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	464a      	mov	r2, r9
 8009c4e:	4631      	mov	r1, r6
 8009c50:	4628      	mov	r0, r5
 8009c52:	47b8      	blx	r7
 8009c54:	3001      	adds	r0, #1
 8009c56:	f43f ae3e 	beq.w	80098d6 <_printf_float+0xb6>
 8009c5a:	f108 0801 	add.w	r8, r8, #1
 8009c5e:	68e3      	ldr	r3, [r4, #12]
 8009c60:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009c62:	1a5b      	subs	r3, r3, r1
 8009c64:	4543      	cmp	r3, r8
 8009c66:	dcf0      	bgt.n	8009c4a <_printf_float+0x42a>
 8009c68:	e6fc      	b.n	8009a64 <_printf_float+0x244>
 8009c6a:	f04f 0800 	mov.w	r8, #0
 8009c6e:	f104 0919 	add.w	r9, r4, #25
 8009c72:	e7f4      	b.n	8009c5e <_printf_float+0x43e>

08009c74 <_printf_common>:
 8009c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c78:	4616      	mov	r6, r2
 8009c7a:	4698      	mov	r8, r3
 8009c7c:	688a      	ldr	r2, [r1, #8]
 8009c7e:	690b      	ldr	r3, [r1, #16]
 8009c80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009c84:	4293      	cmp	r3, r2
 8009c86:	bfb8      	it	lt
 8009c88:	4613      	movlt	r3, r2
 8009c8a:	6033      	str	r3, [r6, #0]
 8009c8c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009c90:	4607      	mov	r7, r0
 8009c92:	460c      	mov	r4, r1
 8009c94:	b10a      	cbz	r2, 8009c9a <_printf_common+0x26>
 8009c96:	3301      	adds	r3, #1
 8009c98:	6033      	str	r3, [r6, #0]
 8009c9a:	6823      	ldr	r3, [r4, #0]
 8009c9c:	0699      	lsls	r1, r3, #26
 8009c9e:	bf42      	ittt	mi
 8009ca0:	6833      	ldrmi	r3, [r6, #0]
 8009ca2:	3302      	addmi	r3, #2
 8009ca4:	6033      	strmi	r3, [r6, #0]
 8009ca6:	6825      	ldr	r5, [r4, #0]
 8009ca8:	f015 0506 	ands.w	r5, r5, #6
 8009cac:	d106      	bne.n	8009cbc <_printf_common+0x48>
 8009cae:	f104 0a19 	add.w	sl, r4, #25
 8009cb2:	68e3      	ldr	r3, [r4, #12]
 8009cb4:	6832      	ldr	r2, [r6, #0]
 8009cb6:	1a9b      	subs	r3, r3, r2
 8009cb8:	42ab      	cmp	r3, r5
 8009cba:	dc26      	bgt.n	8009d0a <_printf_common+0x96>
 8009cbc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009cc0:	6822      	ldr	r2, [r4, #0]
 8009cc2:	3b00      	subs	r3, #0
 8009cc4:	bf18      	it	ne
 8009cc6:	2301      	movne	r3, #1
 8009cc8:	0692      	lsls	r2, r2, #26
 8009cca:	d42b      	bmi.n	8009d24 <_printf_common+0xb0>
 8009ccc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009cd0:	4641      	mov	r1, r8
 8009cd2:	4638      	mov	r0, r7
 8009cd4:	47c8      	blx	r9
 8009cd6:	3001      	adds	r0, #1
 8009cd8:	d01e      	beq.n	8009d18 <_printf_common+0xa4>
 8009cda:	6823      	ldr	r3, [r4, #0]
 8009cdc:	6922      	ldr	r2, [r4, #16]
 8009cde:	f003 0306 	and.w	r3, r3, #6
 8009ce2:	2b04      	cmp	r3, #4
 8009ce4:	bf02      	ittt	eq
 8009ce6:	68e5      	ldreq	r5, [r4, #12]
 8009ce8:	6833      	ldreq	r3, [r6, #0]
 8009cea:	1aed      	subeq	r5, r5, r3
 8009cec:	68a3      	ldr	r3, [r4, #8]
 8009cee:	bf0c      	ite	eq
 8009cf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009cf4:	2500      	movne	r5, #0
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	bfc4      	itt	gt
 8009cfa:	1a9b      	subgt	r3, r3, r2
 8009cfc:	18ed      	addgt	r5, r5, r3
 8009cfe:	2600      	movs	r6, #0
 8009d00:	341a      	adds	r4, #26
 8009d02:	42b5      	cmp	r5, r6
 8009d04:	d11a      	bne.n	8009d3c <_printf_common+0xc8>
 8009d06:	2000      	movs	r0, #0
 8009d08:	e008      	b.n	8009d1c <_printf_common+0xa8>
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	4652      	mov	r2, sl
 8009d0e:	4641      	mov	r1, r8
 8009d10:	4638      	mov	r0, r7
 8009d12:	47c8      	blx	r9
 8009d14:	3001      	adds	r0, #1
 8009d16:	d103      	bne.n	8009d20 <_printf_common+0xac>
 8009d18:	f04f 30ff 	mov.w	r0, #4294967295
 8009d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d20:	3501      	adds	r5, #1
 8009d22:	e7c6      	b.n	8009cb2 <_printf_common+0x3e>
 8009d24:	18e1      	adds	r1, r4, r3
 8009d26:	1c5a      	adds	r2, r3, #1
 8009d28:	2030      	movs	r0, #48	@ 0x30
 8009d2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009d2e:	4422      	add	r2, r4
 8009d30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009d34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009d38:	3302      	adds	r3, #2
 8009d3a:	e7c7      	b.n	8009ccc <_printf_common+0x58>
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	4622      	mov	r2, r4
 8009d40:	4641      	mov	r1, r8
 8009d42:	4638      	mov	r0, r7
 8009d44:	47c8      	blx	r9
 8009d46:	3001      	adds	r0, #1
 8009d48:	d0e6      	beq.n	8009d18 <_printf_common+0xa4>
 8009d4a:	3601      	adds	r6, #1
 8009d4c:	e7d9      	b.n	8009d02 <_printf_common+0x8e>
	...

08009d50 <_printf_i>:
 8009d50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d54:	7e0f      	ldrb	r7, [r1, #24]
 8009d56:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009d58:	2f78      	cmp	r7, #120	@ 0x78
 8009d5a:	4691      	mov	r9, r2
 8009d5c:	4680      	mov	r8, r0
 8009d5e:	460c      	mov	r4, r1
 8009d60:	469a      	mov	sl, r3
 8009d62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009d66:	d807      	bhi.n	8009d78 <_printf_i+0x28>
 8009d68:	2f62      	cmp	r7, #98	@ 0x62
 8009d6a:	d80a      	bhi.n	8009d82 <_printf_i+0x32>
 8009d6c:	2f00      	cmp	r7, #0
 8009d6e:	f000 80d1 	beq.w	8009f14 <_printf_i+0x1c4>
 8009d72:	2f58      	cmp	r7, #88	@ 0x58
 8009d74:	f000 80b8 	beq.w	8009ee8 <_printf_i+0x198>
 8009d78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009d7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009d80:	e03a      	b.n	8009df8 <_printf_i+0xa8>
 8009d82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009d86:	2b15      	cmp	r3, #21
 8009d88:	d8f6      	bhi.n	8009d78 <_printf_i+0x28>
 8009d8a:	a101      	add	r1, pc, #4	@ (adr r1, 8009d90 <_printf_i+0x40>)
 8009d8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009d90:	08009de9 	.word	0x08009de9
 8009d94:	08009dfd 	.word	0x08009dfd
 8009d98:	08009d79 	.word	0x08009d79
 8009d9c:	08009d79 	.word	0x08009d79
 8009da0:	08009d79 	.word	0x08009d79
 8009da4:	08009d79 	.word	0x08009d79
 8009da8:	08009dfd 	.word	0x08009dfd
 8009dac:	08009d79 	.word	0x08009d79
 8009db0:	08009d79 	.word	0x08009d79
 8009db4:	08009d79 	.word	0x08009d79
 8009db8:	08009d79 	.word	0x08009d79
 8009dbc:	08009efb 	.word	0x08009efb
 8009dc0:	08009e27 	.word	0x08009e27
 8009dc4:	08009eb5 	.word	0x08009eb5
 8009dc8:	08009d79 	.word	0x08009d79
 8009dcc:	08009d79 	.word	0x08009d79
 8009dd0:	08009f1d 	.word	0x08009f1d
 8009dd4:	08009d79 	.word	0x08009d79
 8009dd8:	08009e27 	.word	0x08009e27
 8009ddc:	08009d79 	.word	0x08009d79
 8009de0:	08009d79 	.word	0x08009d79
 8009de4:	08009ebd 	.word	0x08009ebd
 8009de8:	6833      	ldr	r3, [r6, #0]
 8009dea:	1d1a      	adds	r2, r3, #4
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	6032      	str	r2, [r6, #0]
 8009df0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009df4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009df8:	2301      	movs	r3, #1
 8009dfa:	e09c      	b.n	8009f36 <_printf_i+0x1e6>
 8009dfc:	6833      	ldr	r3, [r6, #0]
 8009dfe:	6820      	ldr	r0, [r4, #0]
 8009e00:	1d19      	adds	r1, r3, #4
 8009e02:	6031      	str	r1, [r6, #0]
 8009e04:	0606      	lsls	r6, r0, #24
 8009e06:	d501      	bpl.n	8009e0c <_printf_i+0xbc>
 8009e08:	681d      	ldr	r5, [r3, #0]
 8009e0a:	e003      	b.n	8009e14 <_printf_i+0xc4>
 8009e0c:	0645      	lsls	r5, r0, #25
 8009e0e:	d5fb      	bpl.n	8009e08 <_printf_i+0xb8>
 8009e10:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009e14:	2d00      	cmp	r5, #0
 8009e16:	da03      	bge.n	8009e20 <_printf_i+0xd0>
 8009e18:	232d      	movs	r3, #45	@ 0x2d
 8009e1a:	426d      	negs	r5, r5
 8009e1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e20:	4858      	ldr	r0, [pc, #352]	@ (8009f84 <_printf_i+0x234>)
 8009e22:	230a      	movs	r3, #10
 8009e24:	e011      	b.n	8009e4a <_printf_i+0xfa>
 8009e26:	6821      	ldr	r1, [r4, #0]
 8009e28:	6833      	ldr	r3, [r6, #0]
 8009e2a:	0608      	lsls	r0, r1, #24
 8009e2c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009e30:	d402      	bmi.n	8009e38 <_printf_i+0xe8>
 8009e32:	0649      	lsls	r1, r1, #25
 8009e34:	bf48      	it	mi
 8009e36:	b2ad      	uxthmi	r5, r5
 8009e38:	2f6f      	cmp	r7, #111	@ 0x6f
 8009e3a:	4852      	ldr	r0, [pc, #328]	@ (8009f84 <_printf_i+0x234>)
 8009e3c:	6033      	str	r3, [r6, #0]
 8009e3e:	bf14      	ite	ne
 8009e40:	230a      	movne	r3, #10
 8009e42:	2308      	moveq	r3, #8
 8009e44:	2100      	movs	r1, #0
 8009e46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009e4a:	6866      	ldr	r6, [r4, #4]
 8009e4c:	60a6      	str	r6, [r4, #8]
 8009e4e:	2e00      	cmp	r6, #0
 8009e50:	db05      	blt.n	8009e5e <_printf_i+0x10e>
 8009e52:	6821      	ldr	r1, [r4, #0]
 8009e54:	432e      	orrs	r6, r5
 8009e56:	f021 0104 	bic.w	r1, r1, #4
 8009e5a:	6021      	str	r1, [r4, #0]
 8009e5c:	d04b      	beq.n	8009ef6 <_printf_i+0x1a6>
 8009e5e:	4616      	mov	r6, r2
 8009e60:	fbb5 f1f3 	udiv	r1, r5, r3
 8009e64:	fb03 5711 	mls	r7, r3, r1, r5
 8009e68:	5dc7      	ldrb	r7, [r0, r7]
 8009e6a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009e6e:	462f      	mov	r7, r5
 8009e70:	42bb      	cmp	r3, r7
 8009e72:	460d      	mov	r5, r1
 8009e74:	d9f4      	bls.n	8009e60 <_printf_i+0x110>
 8009e76:	2b08      	cmp	r3, #8
 8009e78:	d10b      	bne.n	8009e92 <_printf_i+0x142>
 8009e7a:	6823      	ldr	r3, [r4, #0]
 8009e7c:	07df      	lsls	r7, r3, #31
 8009e7e:	d508      	bpl.n	8009e92 <_printf_i+0x142>
 8009e80:	6923      	ldr	r3, [r4, #16]
 8009e82:	6861      	ldr	r1, [r4, #4]
 8009e84:	4299      	cmp	r1, r3
 8009e86:	bfde      	ittt	le
 8009e88:	2330      	movle	r3, #48	@ 0x30
 8009e8a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009e8e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009e92:	1b92      	subs	r2, r2, r6
 8009e94:	6122      	str	r2, [r4, #16]
 8009e96:	f8cd a000 	str.w	sl, [sp]
 8009e9a:	464b      	mov	r3, r9
 8009e9c:	aa03      	add	r2, sp, #12
 8009e9e:	4621      	mov	r1, r4
 8009ea0:	4640      	mov	r0, r8
 8009ea2:	f7ff fee7 	bl	8009c74 <_printf_common>
 8009ea6:	3001      	adds	r0, #1
 8009ea8:	d14a      	bne.n	8009f40 <_printf_i+0x1f0>
 8009eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8009eae:	b004      	add	sp, #16
 8009eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eb4:	6823      	ldr	r3, [r4, #0]
 8009eb6:	f043 0320 	orr.w	r3, r3, #32
 8009eba:	6023      	str	r3, [r4, #0]
 8009ebc:	4832      	ldr	r0, [pc, #200]	@ (8009f88 <_printf_i+0x238>)
 8009ebe:	2778      	movs	r7, #120	@ 0x78
 8009ec0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009ec4:	6823      	ldr	r3, [r4, #0]
 8009ec6:	6831      	ldr	r1, [r6, #0]
 8009ec8:	061f      	lsls	r7, r3, #24
 8009eca:	f851 5b04 	ldr.w	r5, [r1], #4
 8009ece:	d402      	bmi.n	8009ed6 <_printf_i+0x186>
 8009ed0:	065f      	lsls	r7, r3, #25
 8009ed2:	bf48      	it	mi
 8009ed4:	b2ad      	uxthmi	r5, r5
 8009ed6:	6031      	str	r1, [r6, #0]
 8009ed8:	07d9      	lsls	r1, r3, #31
 8009eda:	bf44      	itt	mi
 8009edc:	f043 0320 	orrmi.w	r3, r3, #32
 8009ee0:	6023      	strmi	r3, [r4, #0]
 8009ee2:	b11d      	cbz	r5, 8009eec <_printf_i+0x19c>
 8009ee4:	2310      	movs	r3, #16
 8009ee6:	e7ad      	b.n	8009e44 <_printf_i+0xf4>
 8009ee8:	4826      	ldr	r0, [pc, #152]	@ (8009f84 <_printf_i+0x234>)
 8009eea:	e7e9      	b.n	8009ec0 <_printf_i+0x170>
 8009eec:	6823      	ldr	r3, [r4, #0]
 8009eee:	f023 0320 	bic.w	r3, r3, #32
 8009ef2:	6023      	str	r3, [r4, #0]
 8009ef4:	e7f6      	b.n	8009ee4 <_printf_i+0x194>
 8009ef6:	4616      	mov	r6, r2
 8009ef8:	e7bd      	b.n	8009e76 <_printf_i+0x126>
 8009efa:	6833      	ldr	r3, [r6, #0]
 8009efc:	6825      	ldr	r5, [r4, #0]
 8009efe:	6961      	ldr	r1, [r4, #20]
 8009f00:	1d18      	adds	r0, r3, #4
 8009f02:	6030      	str	r0, [r6, #0]
 8009f04:	062e      	lsls	r6, r5, #24
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	d501      	bpl.n	8009f0e <_printf_i+0x1be>
 8009f0a:	6019      	str	r1, [r3, #0]
 8009f0c:	e002      	b.n	8009f14 <_printf_i+0x1c4>
 8009f0e:	0668      	lsls	r0, r5, #25
 8009f10:	d5fb      	bpl.n	8009f0a <_printf_i+0x1ba>
 8009f12:	8019      	strh	r1, [r3, #0]
 8009f14:	2300      	movs	r3, #0
 8009f16:	6123      	str	r3, [r4, #16]
 8009f18:	4616      	mov	r6, r2
 8009f1a:	e7bc      	b.n	8009e96 <_printf_i+0x146>
 8009f1c:	6833      	ldr	r3, [r6, #0]
 8009f1e:	1d1a      	adds	r2, r3, #4
 8009f20:	6032      	str	r2, [r6, #0]
 8009f22:	681e      	ldr	r6, [r3, #0]
 8009f24:	6862      	ldr	r2, [r4, #4]
 8009f26:	2100      	movs	r1, #0
 8009f28:	4630      	mov	r0, r6
 8009f2a:	f7f6 f959 	bl	80001e0 <memchr>
 8009f2e:	b108      	cbz	r0, 8009f34 <_printf_i+0x1e4>
 8009f30:	1b80      	subs	r0, r0, r6
 8009f32:	6060      	str	r0, [r4, #4]
 8009f34:	6863      	ldr	r3, [r4, #4]
 8009f36:	6123      	str	r3, [r4, #16]
 8009f38:	2300      	movs	r3, #0
 8009f3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f3e:	e7aa      	b.n	8009e96 <_printf_i+0x146>
 8009f40:	6923      	ldr	r3, [r4, #16]
 8009f42:	4632      	mov	r2, r6
 8009f44:	4649      	mov	r1, r9
 8009f46:	4640      	mov	r0, r8
 8009f48:	47d0      	blx	sl
 8009f4a:	3001      	adds	r0, #1
 8009f4c:	d0ad      	beq.n	8009eaa <_printf_i+0x15a>
 8009f4e:	6823      	ldr	r3, [r4, #0]
 8009f50:	079b      	lsls	r3, r3, #30
 8009f52:	d413      	bmi.n	8009f7c <_printf_i+0x22c>
 8009f54:	68e0      	ldr	r0, [r4, #12]
 8009f56:	9b03      	ldr	r3, [sp, #12]
 8009f58:	4298      	cmp	r0, r3
 8009f5a:	bfb8      	it	lt
 8009f5c:	4618      	movlt	r0, r3
 8009f5e:	e7a6      	b.n	8009eae <_printf_i+0x15e>
 8009f60:	2301      	movs	r3, #1
 8009f62:	4632      	mov	r2, r6
 8009f64:	4649      	mov	r1, r9
 8009f66:	4640      	mov	r0, r8
 8009f68:	47d0      	blx	sl
 8009f6a:	3001      	adds	r0, #1
 8009f6c:	d09d      	beq.n	8009eaa <_printf_i+0x15a>
 8009f6e:	3501      	adds	r5, #1
 8009f70:	68e3      	ldr	r3, [r4, #12]
 8009f72:	9903      	ldr	r1, [sp, #12]
 8009f74:	1a5b      	subs	r3, r3, r1
 8009f76:	42ab      	cmp	r3, r5
 8009f78:	dcf2      	bgt.n	8009f60 <_printf_i+0x210>
 8009f7a:	e7eb      	b.n	8009f54 <_printf_i+0x204>
 8009f7c:	2500      	movs	r5, #0
 8009f7e:	f104 0619 	add.w	r6, r4, #25
 8009f82:	e7f5      	b.n	8009f70 <_printf_i+0x220>
 8009f84:	0800c25e 	.word	0x0800c25e
 8009f88:	0800c26f 	.word	0x0800c26f

08009f8c <std>:
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	b510      	push	{r4, lr}
 8009f90:	4604      	mov	r4, r0
 8009f92:	e9c0 3300 	strd	r3, r3, [r0]
 8009f96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009f9a:	6083      	str	r3, [r0, #8]
 8009f9c:	8181      	strh	r1, [r0, #12]
 8009f9e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009fa0:	81c2      	strh	r2, [r0, #14]
 8009fa2:	6183      	str	r3, [r0, #24]
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	2208      	movs	r2, #8
 8009fa8:	305c      	adds	r0, #92	@ 0x5c
 8009faa:	f000 f9f9 	bl	800a3a0 <memset>
 8009fae:	4b0d      	ldr	r3, [pc, #52]	@ (8009fe4 <std+0x58>)
 8009fb0:	6263      	str	r3, [r4, #36]	@ 0x24
 8009fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8009fe8 <std+0x5c>)
 8009fb4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8009fec <std+0x60>)
 8009fb8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009fba:	4b0d      	ldr	r3, [pc, #52]	@ (8009ff0 <std+0x64>)
 8009fbc:	6323      	str	r3, [r4, #48]	@ 0x30
 8009fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8009ff4 <std+0x68>)
 8009fc0:	6224      	str	r4, [r4, #32]
 8009fc2:	429c      	cmp	r4, r3
 8009fc4:	d006      	beq.n	8009fd4 <std+0x48>
 8009fc6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009fca:	4294      	cmp	r4, r2
 8009fcc:	d002      	beq.n	8009fd4 <std+0x48>
 8009fce:	33d0      	adds	r3, #208	@ 0xd0
 8009fd0:	429c      	cmp	r4, r3
 8009fd2:	d105      	bne.n	8009fe0 <std+0x54>
 8009fd4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009fdc:	f000 ba5c 	b.w	800a498 <__retarget_lock_init_recursive>
 8009fe0:	bd10      	pop	{r4, pc}
 8009fe2:	bf00      	nop
 8009fe4:	0800a1f1 	.word	0x0800a1f1
 8009fe8:	0800a213 	.word	0x0800a213
 8009fec:	0800a24b 	.word	0x0800a24b
 8009ff0:	0800a26f 	.word	0x0800a26f
 8009ff4:	20000770 	.word	0x20000770

08009ff8 <stdio_exit_handler>:
 8009ff8:	4a02      	ldr	r2, [pc, #8]	@ (800a004 <stdio_exit_handler+0xc>)
 8009ffa:	4903      	ldr	r1, [pc, #12]	@ (800a008 <stdio_exit_handler+0x10>)
 8009ffc:	4803      	ldr	r0, [pc, #12]	@ (800a00c <stdio_exit_handler+0x14>)
 8009ffe:	f000 b869 	b.w	800a0d4 <_fwalk_sglue>
 800a002:	bf00      	nop
 800a004:	2000000c 	.word	0x2000000c
 800a008:	0800bdd1 	.word	0x0800bdd1
 800a00c:	2000001c 	.word	0x2000001c

0800a010 <cleanup_stdio>:
 800a010:	6841      	ldr	r1, [r0, #4]
 800a012:	4b0c      	ldr	r3, [pc, #48]	@ (800a044 <cleanup_stdio+0x34>)
 800a014:	4299      	cmp	r1, r3
 800a016:	b510      	push	{r4, lr}
 800a018:	4604      	mov	r4, r0
 800a01a:	d001      	beq.n	800a020 <cleanup_stdio+0x10>
 800a01c:	f001 fed8 	bl	800bdd0 <_fflush_r>
 800a020:	68a1      	ldr	r1, [r4, #8]
 800a022:	4b09      	ldr	r3, [pc, #36]	@ (800a048 <cleanup_stdio+0x38>)
 800a024:	4299      	cmp	r1, r3
 800a026:	d002      	beq.n	800a02e <cleanup_stdio+0x1e>
 800a028:	4620      	mov	r0, r4
 800a02a:	f001 fed1 	bl	800bdd0 <_fflush_r>
 800a02e:	68e1      	ldr	r1, [r4, #12]
 800a030:	4b06      	ldr	r3, [pc, #24]	@ (800a04c <cleanup_stdio+0x3c>)
 800a032:	4299      	cmp	r1, r3
 800a034:	d004      	beq.n	800a040 <cleanup_stdio+0x30>
 800a036:	4620      	mov	r0, r4
 800a038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a03c:	f001 bec8 	b.w	800bdd0 <_fflush_r>
 800a040:	bd10      	pop	{r4, pc}
 800a042:	bf00      	nop
 800a044:	20000770 	.word	0x20000770
 800a048:	200007d8 	.word	0x200007d8
 800a04c:	20000840 	.word	0x20000840

0800a050 <global_stdio_init.part.0>:
 800a050:	b510      	push	{r4, lr}
 800a052:	4b0b      	ldr	r3, [pc, #44]	@ (800a080 <global_stdio_init.part.0+0x30>)
 800a054:	4c0b      	ldr	r4, [pc, #44]	@ (800a084 <global_stdio_init.part.0+0x34>)
 800a056:	4a0c      	ldr	r2, [pc, #48]	@ (800a088 <global_stdio_init.part.0+0x38>)
 800a058:	601a      	str	r2, [r3, #0]
 800a05a:	4620      	mov	r0, r4
 800a05c:	2200      	movs	r2, #0
 800a05e:	2104      	movs	r1, #4
 800a060:	f7ff ff94 	bl	8009f8c <std>
 800a064:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a068:	2201      	movs	r2, #1
 800a06a:	2109      	movs	r1, #9
 800a06c:	f7ff ff8e 	bl	8009f8c <std>
 800a070:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a074:	2202      	movs	r2, #2
 800a076:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a07a:	2112      	movs	r1, #18
 800a07c:	f7ff bf86 	b.w	8009f8c <std>
 800a080:	200008a8 	.word	0x200008a8
 800a084:	20000770 	.word	0x20000770
 800a088:	08009ff9 	.word	0x08009ff9

0800a08c <__sfp_lock_acquire>:
 800a08c:	4801      	ldr	r0, [pc, #4]	@ (800a094 <__sfp_lock_acquire+0x8>)
 800a08e:	f000 ba04 	b.w	800a49a <__retarget_lock_acquire_recursive>
 800a092:	bf00      	nop
 800a094:	200008b1 	.word	0x200008b1

0800a098 <__sfp_lock_release>:
 800a098:	4801      	ldr	r0, [pc, #4]	@ (800a0a0 <__sfp_lock_release+0x8>)
 800a09a:	f000 b9ff 	b.w	800a49c <__retarget_lock_release_recursive>
 800a09e:	bf00      	nop
 800a0a0:	200008b1 	.word	0x200008b1

0800a0a4 <__sinit>:
 800a0a4:	b510      	push	{r4, lr}
 800a0a6:	4604      	mov	r4, r0
 800a0a8:	f7ff fff0 	bl	800a08c <__sfp_lock_acquire>
 800a0ac:	6a23      	ldr	r3, [r4, #32]
 800a0ae:	b11b      	cbz	r3, 800a0b8 <__sinit+0x14>
 800a0b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0b4:	f7ff bff0 	b.w	800a098 <__sfp_lock_release>
 800a0b8:	4b04      	ldr	r3, [pc, #16]	@ (800a0cc <__sinit+0x28>)
 800a0ba:	6223      	str	r3, [r4, #32]
 800a0bc:	4b04      	ldr	r3, [pc, #16]	@ (800a0d0 <__sinit+0x2c>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d1f5      	bne.n	800a0b0 <__sinit+0xc>
 800a0c4:	f7ff ffc4 	bl	800a050 <global_stdio_init.part.0>
 800a0c8:	e7f2      	b.n	800a0b0 <__sinit+0xc>
 800a0ca:	bf00      	nop
 800a0cc:	0800a011 	.word	0x0800a011
 800a0d0:	200008a8 	.word	0x200008a8

0800a0d4 <_fwalk_sglue>:
 800a0d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0d8:	4607      	mov	r7, r0
 800a0da:	4688      	mov	r8, r1
 800a0dc:	4614      	mov	r4, r2
 800a0de:	2600      	movs	r6, #0
 800a0e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a0e4:	f1b9 0901 	subs.w	r9, r9, #1
 800a0e8:	d505      	bpl.n	800a0f6 <_fwalk_sglue+0x22>
 800a0ea:	6824      	ldr	r4, [r4, #0]
 800a0ec:	2c00      	cmp	r4, #0
 800a0ee:	d1f7      	bne.n	800a0e0 <_fwalk_sglue+0xc>
 800a0f0:	4630      	mov	r0, r6
 800a0f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0f6:	89ab      	ldrh	r3, [r5, #12]
 800a0f8:	2b01      	cmp	r3, #1
 800a0fa:	d907      	bls.n	800a10c <_fwalk_sglue+0x38>
 800a0fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a100:	3301      	adds	r3, #1
 800a102:	d003      	beq.n	800a10c <_fwalk_sglue+0x38>
 800a104:	4629      	mov	r1, r5
 800a106:	4638      	mov	r0, r7
 800a108:	47c0      	blx	r8
 800a10a:	4306      	orrs	r6, r0
 800a10c:	3568      	adds	r5, #104	@ 0x68
 800a10e:	e7e9      	b.n	800a0e4 <_fwalk_sglue+0x10>

0800a110 <iprintf>:
 800a110:	b40f      	push	{r0, r1, r2, r3}
 800a112:	b507      	push	{r0, r1, r2, lr}
 800a114:	4906      	ldr	r1, [pc, #24]	@ (800a130 <iprintf+0x20>)
 800a116:	ab04      	add	r3, sp, #16
 800a118:	6808      	ldr	r0, [r1, #0]
 800a11a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a11e:	6881      	ldr	r1, [r0, #8]
 800a120:	9301      	str	r3, [sp, #4]
 800a122:	f001 fcb9 	bl	800ba98 <_vfiprintf_r>
 800a126:	b003      	add	sp, #12
 800a128:	f85d eb04 	ldr.w	lr, [sp], #4
 800a12c:	b004      	add	sp, #16
 800a12e:	4770      	bx	lr
 800a130:	20000018 	.word	0x20000018

0800a134 <_puts_r>:
 800a134:	6a03      	ldr	r3, [r0, #32]
 800a136:	b570      	push	{r4, r5, r6, lr}
 800a138:	6884      	ldr	r4, [r0, #8]
 800a13a:	4605      	mov	r5, r0
 800a13c:	460e      	mov	r6, r1
 800a13e:	b90b      	cbnz	r3, 800a144 <_puts_r+0x10>
 800a140:	f7ff ffb0 	bl	800a0a4 <__sinit>
 800a144:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a146:	07db      	lsls	r3, r3, #31
 800a148:	d405      	bmi.n	800a156 <_puts_r+0x22>
 800a14a:	89a3      	ldrh	r3, [r4, #12]
 800a14c:	0598      	lsls	r0, r3, #22
 800a14e:	d402      	bmi.n	800a156 <_puts_r+0x22>
 800a150:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a152:	f000 f9a2 	bl	800a49a <__retarget_lock_acquire_recursive>
 800a156:	89a3      	ldrh	r3, [r4, #12]
 800a158:	0719      	lsls	r1, r3, #28
 800a15a:	d502      	bpl.n	800a162 <_puts_r+0x2e>
 800a15c:	6923      	ldr	r3, [r4, #16]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d135      	bne.n	800a1ce <_puts_r+0x9a>
 800a162:	4621      	mov	r1, r4
 800a164:	4628      	mov	r0, r5
 800a166:	f000 f8c5 	bl	800a2f4 <__swsetup_r>
 800a16a:	b380      	cbz	r0, 800a1ce <_puts_r+0x9a>
 800a16c:	f04f 35ff 	mov.w	r5, #4294967295
 800a170:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a172:	07da      	lsls	r2, r3, #31
 800a174:	d405      	bmi.n	800a182 <_puts_r+0x4e>
 800a176:	89a3      	ldrh	r3, [r4, #12]
 800a178:	059b      	lsls	r3, r3, #22
 800a17a:	d402      	bmi.n	800a182 <_puts_r+0x4e>
 800a17c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a17e:	f000 f98d 	bl	800a49c <__retarget_lock_release_recursive>
 800a182:	4628      	mov	r0, r5
 800a184:	bd70      	pop	{r4, r5, r6, pc}
 800a186:	2b00      	cmp	r3, #0
 800a188:	da04      	bge.n	800a194 <_puts_r+0x60>
 800a18a:	69a2      	ldr	r2, [r4, #24]
 800a18c:	429a      	cmp	r2, r3
 800a18e:	dc17      	bgt.n	800a1c0 <_puts_r+0x8c>
 800a190:	290a      	cmp	r1, #10
 800a192:	d015      	beq.n	800a1c0 <_puts_r+0x8c>
 800a194:	6823      	ldr	r3, [r4, #0]
 800a196:	1c5a      	adds	r2, r3, #1
 800a198:	6022      	str	r2, [r4, #0]
 800a19a:	7019      	strb	r1, [r3, #0]
 800a19c:	68a3      	ldr	r3, [r4, #8]
 800a19e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a1a2:	3b01      	subs	r3, #1
 800a1a4:	60a3      	str	r3, [r4, #8]
 800a1a6:	2900      	cmp	r1, #0
 800a1a8:	d1ed      	bne.n	800a186 <_puts_r+0x52>
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	da11      	bge.n	800a1d2 <_puts_r+0x9e>
 800a1ae:	4622      	mov	r2, r4
 800a1b0:	210a      	movs	r1, #10
 800a1b2:	4628      	mov	r0, r5
 800a1b4:	f000 f85f 	bl	800a276 <__swbuf_r>
 800a1b8:	3001      	adds	r0, #1
 800a1ba:	d0d7      	beq.n	800a16c <_puts_r+0x38>
 800a1bc:	250a      	movs	r5, #10
 800a1be:	e7d7      	b.n	800a170 <_puts_r+0x3c>
 800a1c0:	4622      	mov	r2, r4
 800a1c2:	4628      	mov	r0, r5
 800a1c4:	f000 f857 	bl	800a276 <__swbuf_r>
 800a1c8:	3001      	adds	r0, #1
 800a1ca:	d1e7      	bne.n	800a19c <_puts_r+0x68>
 800a1cc:	e7ce      	b.n	800a16c <_puts_r+0x38>
 800a1ce:	3e01      	subs	r6, #1
 800a1d0:	e7e4      	b.n	800a19c <_puts_r+0x68>
 800a1d2:	6823      	ldr	r3, [r4, #0]
 800a1d4:	1c5a      	adds	r2, r3, #1
 800a1d6:	6022      	str	r2, [r4, #0]
 800a1d8:	220a      	movs	r2, #10
 800a1da:	701a      	strb	r2, [r3, #0]
 800a1dc:	e7ee      	b.n	800a1bc <_puts_r+0x88>
	...

0800a1e0 <puts>:
 800a1e0:	4b02      	ldr	r3, [pc, #8]	@ (800a1ec <puts+0xc>)
 800a1e2:	4601      	mov	r1, r0
 800a1e4:	6818      	ldr	r0, [r3, #0]
 800a1e6:	f7ff bfa5 	b.w	800a134 <_puts_r>
 800a1ea:	bf00      	nop
 800a1ec:	20000018 	.word	0x20000018

0800a1f0 <__sread>:
 800a1f0:	b510      	push	{r4, lr}
 800a1f2:	460c      	mov	r4, r1
 800a1f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1f8:	f000 f900 	bl	800a3fc <_read_r>
 800a1fc:	2800      	cmp	r0, #0
 800a1fe:	bfab      	itete	ge
 800a200:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a202:	89a3      	ldrhlt	r3, [r4, #12]
 800a204:	181b      	addge	r3, r3, r0
 800a206:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a20a:	bfac      	ite	ge
 800a20c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a20e:	81a3      	strhlt	r3, [r4, #12]
 800a210:	bd10      	pop	{r4, pc}

0800a212 <__swrite>:
 800a212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a216:	461f      	mov	r7, r3
 800a218:	898b      	ldrh	r3, [r1, #12]
 800a21a:	05db      	lsls	r3, r3, #23
 800a21c:	4605      	mov	r5, r0
 800a21e:	460c      	mov	r4, r1
 800a220:	4616      	mov	r6, r2
 800a222:	d505      	bpl.n	800a230 <__swrite+0x1e>
 800a224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a228:	2302      	movs	r3, #2
 800a22a:	2200      	movs	r2, #0
 800a22c:	f000 f8d4 	bl	800a3d8 <_lseek_r>
 800a230:	89a3      	ldrh	r3, [r4, #12]
 800a232:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a236:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a23a:	81a3      	strh	r3, [r4, #12]
 800a23c:	4632      	mov	r2, r6
 800a23e:	463b      	mov	r3, r7
 800a240:	4628      	mov	r0, r5
 800a242:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a246:	f000 b8eb 	b.w	800a420 <_write_r>

0800a24a <__sseek>:
 800a24a:	b510      	push	{r4, lr}
 800a24c:	460c      	mov	r4, r1
 800a24e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a252:	f000 f8c1 	bl	800a3d8 <_lseek_r>
 800a256:	1c43      	adds	r3, r0, #1
 800a258:	89a3      	ldrh	r3, [r4, #12]
 800a25a:	bf15      	itete	ne
 800a25c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a25e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a262:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a266:	81a3      	strheq	r3, [r4, #12]
 800a268:	bf18      	it	ne
 800a26a:	81a3      	strhne	r3, [r4, #12]
 800a26c:	bd10      	pop	{r4, pc}

0800a26e <__sclose>:
 800a26e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a272:	f000 b8a1 	b.w	800a3b8 <_close_r>

0800a276 <__swbuf_r>:
 800a276:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a278:	460e      	mov	r6, r1
 800a27a:	4614      	mov	r4, r2
 800a27c:	4605      	mov	r5, r0
 800a27e:	b118      	cbz	r0, 800a288 <__swbuf_r+0x12>
 800a280:	6a03      	ldr	r3, [r0, #32]
 800a282:	b90b      	cbnz	r3, 800a288 <__swbuf_r+0x12>
 800a284:	f7ff ff0e 	bl	800a0a4 <__sinit>
 800a288:	69a3      	ldr	r3, [r4, #24]
 800a28a:	60a3      	str	r3, [r4, #8]
 800a28c:	89a3      	ldrh	r3, [r4, #12]
 800a28e:	071a      	lsls	r2, r3, #28
 800a290:	d501      	bpl.n	800a296 <__swbuf_r+0x20>
 800a292:	6923      	ldr	r3, [r4, #16]
 800a294:	b943      	cbnz	r3, 800a2a8 <__swbuf_r+0x32>
 800a296:	4621      	mov	r1, r4
 800a298:	4628      	mov	r0, r5
 800a29a:	f000 f82b 	bl	800a2f4 <__swsetup_r>
 800a29e:	b118      	cbz	r0, 800a2a8 <__swbuf_r+0x32>
 800a2a0:	f04f 37ff 	mov.w	r7, #4294967295
 800a2a4:	4638      	mov	r0, r7
 800a2a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2a8:	6823      	ldr	r3, [r4, #0]
 800a2aa:	6922      	ldr	r2, [r4, #16]
 800a2ac:	1a98      	subs	r0, r3, r2
 800a2ae:	6963      	ldr	r3, [r4, #20]
 800a2b0:	b2f6      	uxtb	r6, r6
 800a2b2:	4283      	cmp	r3, r0
 800a2b4:	4637      	mov	r7, r6
 800a2b6:	dc05      	bgt.n	800a2c4 <__swbuf_r+0x4e>
 800a2b8:	4621      	mov	r1, r4
 800a2ba:	4628      	mov	r0, r5
 800a2bc:	f001 fd88 	bl	800bdd0 <_fflush_r>
 800a2c0:	2800      	cmp	r0, #0
 800a2c2:	d1ed      	bne.n	800a2a0 <__swbuf_r+0x2a>
 800a2c4:	68a3      	ldr	r3, [r4, #8]
 800a2c6:	3b01      	subs	r3, #1
 800a2c8:	60a3      	str	r3, [r4, #8]
 800a2ca:	6823      	ldr	r3, [r4, #0]
 800a2cc:	1c5a      	adds	r2, r3, #1
 800a2ce:	6022      	str	r2, [r4, #0]
 800a2d0:	701e      	strb	r6, [r3, #0]
 800a2d2:	6962      	ldr	r2, [r4, #20]
 800a2d4:	1c43      	adds	r3, r0, #1
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d004      	beq.n	800a2e4 <__swbuf_r+0x6e>
 800a2da:	89a3      	ldrh	r3, [r4, #12]
 800a2dc:	07db      	lsls	r3, r3, #31
 800a2de:	d5e1      	bpl.n	800a2a4 <__swbuf_r+0x2e>
 800a2e0:	2e0a      	cmp	r6, #10
 800a2e2:	d1df      	bne.n	800a2a4 <__swbuf_r+0x2e>
 800a2e4:	4621      	mov	r1, r4
 800a2e6:	4628      	mov	r0, r5
 800a2e8:	f001 fd72 	bl	800bdd0 <_fflush_r>
 800a2ec:	2800      	cmp	r0, #0
 800a2ee:	d0d9      	beq.n	800a2a4 <__swbuf_r+0x2e>
 800a2f0:	e7d6      	b.n	800a2a0 <__swbuf_r+0x2a>
	...

0800a2f4 <__swsetup_r>:
 800a2f4:	b538      	push	{r3, r4, r5, lr}
 800a2f6:	4b29      	ldr	r3, [pc, #164]	@ (800a39c <__swsetup_r+0xa8>)
 800a2f8:	4605      	mov	r5, r0
 800a2fa:	6818      	ldr	r0, [r3, #0]
 800a2fc:	460c      	mov	r4, r1
 800a2fe:	b118      	cbz	r0, 800a308 <__swsetup_r+0x14>
 800a300:	6a03      	ldr	r3, [r0, #32]
 800a302:	b90b      	cbnz	r3, 800a308 <__swsetup_r+0x14>
 800a304:	f7ff fece 	bl	800a0a4 <__sinit>
 800a308:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a30c:	0719      	lsls	r1, r3, #28
 800a30e:	d422      	bmi.n	800a356 <__swsetup_r+0x62>
 800a310:	06da      	lsls	r2, r3, #27
 800a312:	d407      	bmi.n	800a324 <__swsetup_r+0x30>
 800a314:	2209      	movs	r2, #9
 800a316:	602a      	str	r2, [r5, #0]
 800a318:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a31c:	81a3      	strh	r3, [r4, #12]
 800a31e:	f04f 30ff 	mov.w	r0, #4294967295
 800a322:	e033      	b.n	800a38c <__swsetup_r+0x98>
 800a324:	0758      	lsls	r0, r3, #29
 800a326:	d512      	bpl.n	800a34e <__swsetup_r+0x5a>
 800a328:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a32a:	b141      	cbz	r1, 800a33e <__swsetup_r+0x4a>
 800a32c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a330:	4299      	cmp	r1, r3
 800a332:	d002      	beq.n	800a33a <__swsetup_r+0x46>
 800a334:	4628      	mov	r0, r5
 800a336:	f000 ff0b 	bl	800b150 <_free_r>
 800a33a:	2300      	movs	r3, #0
 800a33c:	6363      	str	r3, [r4, #52]	@ 0x34
 800a33e:	89a3      	ldrh	r3, [r4, #12]
 800a340:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a344:	81a3      	strh	r3, [r4, #12]
 800a346:	2300      	movs	r3, #0
 800a348:	6063      	str	r3, [r4, #4]
 800a34a:	6923      	ldr	r3, [r4, #16]
 800a34c:	6023      	str	r3, [r4, #0]
 800a34e:	89a3      	ldrh	r3, [r4, #12]
 800a350:	f043 0308 	orr.w	r3, r3, #8
 800a354:	81a3      	strh	r3, [r4, #12]
 800a356:	6923      	ldr	r3, [r4, #16]
 800a358:	b94b      	cbnz	r3, 800a36e <__swsetup_r+0x7a>
 800a35a:	89a3      	ldrh	r3, [r4, #12]
 800a35c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a360:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a364:	d003      	beq.n	800a36e <__swsetup_r+0x7a>
 800a366:	4621      	mov	r1, r4
 800a368:	4628      	mov	r0, r5
 800a36a:	f001 fd7f 	bl	800be6c <__smakebuf_r>
 800a36e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a372:	f013 0201 	ands.w	r2, r3, #1
 800a376:	d00a      	beq.n	800a38e <__swsetup_r+0x9a>
 800a378:	2200      	movs	r2, #0
 800a37a:	60a2      	str	r2, [r4, #8]
 800a37c:	6962      	ldr	r2, [r4, #20]
 800a37e:	4252      	negs	r2, r2
 800a380:	61a2      	str	r2, [r4, #24]
 800a382:	6922      	ldr	r2, [r4, #16]
 800a384:	b942      	cbnz	r2, 800a398 <__swsetup_r+0xa4>
 800a386:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a38a:	d1c5      	bne.n	800a318 <__swsetup_r+0x24>
 800a38c:	bd38      	pop	{r3, r4, r5, pc}
 800a38e:	0799      	lsls	r1, r3, #30
 800a390:	bf58      	it	pl
 800a392:	6962      	ldrpl	r2, [r4, #20]
 800a394:	60a2      	str	r2, [r4, #8]
 800a396:	e7f4      	b.n	800a382 <__swsetup_r+0x8e>
 800a398:	2000      	movs	r0, #0
 800a39a:	e7f7      	b.n	800a38c <__swsetup_r+0x98>
 800a39c:	20000018 	.word	0x20000018

0800a3a0 <memset>:
 800a3a0:	4402      	add	r2, r0
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	d100      	bne.n	800a3aa <memset+0xa>
 800a3a8:	4770      	bx	lr
 800a3aa:	f803 1b01 	strb.w	r1, [r3], #1
 800a3ae:	e7f9      	b.n	800a3a4 <memset+0x4>

0800a3b0 <_localeconv_r>:
 800a3b0:	4800      	ldr	r0, [pc, #0]	@ (800a3b4 <_localeconv_r+0x4>)
 800a3b2:	4770      	bx	lr
 800a3b4:	20000158 	.word	0x20000158

0800a3b8 <_close_r>:
 800a3b8:	b538      	push	{r3, r4, r5, lr}
 800a3ba:	4d06      	ldr	r5, [pc, #24]	@ (800a3d4 <_close_r+0x1c>)
 800a3bc:	2300      	movs	r3, #0
 800a3be:	4604      	mov	r4, r0
 800a3c0:	4608      	mov	r0, r1
 800a3c2:	602b      	str	r3, [r5, #0]
 800a3c4:	f7f7 fc76 	bl	8001cb4 <_close>
 800a3c8:	1c43      	adds	r3, r0, #1
 800a3ca:	d102      	bne.n	800a3d2 <_close_r+0x1a>
 800a3cc:	682b      	ldr	r3, [r5, #0]
 800a3ce:	b103      	cbz	r3, 800a3d2 <_close_r+0x1a>
 800a3d0:	6023      	str	r3, [r4, #0]
 800a3d2:	bd38      	pop	{r3, r4, r5, pc}
 800a3d4:	200008ac 	.word	0x200008ac

0800a3d8 <_lseek_r>:
 800a3d8:	b538      	push	{r3, r4, r5, lr}
 800a3da:	4d07      	ldr	r5, [pc, #28]	@ (800a3f8 <_lseek_r+0x20>)
 800a3dc:	4604      	mov	r4, r0
 800a3de:	4608      	mov	r0, r1
 800a3e0:	4611      	mov	r1, r2
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	602a      	str	r2, [r5, #0]
 800a3e6:	461a      	mov	r2, r3
 800a3e8:	f7f7 fc8b 	bl	8001d02 <_lseek>
 800a3ec:	1c43      	adds	r3, r0, #1
 800a3ee:	d102      	bne.n	800a3f6 <_lseek_r+0x1e>
 800a3f0:	682b      	ldr	r3, [r5, #0]
 800a3f2:	b103      	cbz	r3, 800a3f6 <_lseek_r+0x1e>
 800a3f4:	6023      	str	r3, [r4, #0]
 800a3f6:	bd38      	pop	{r3, r4, r5, pc}
 800a3f8:	200008ac 	.word	0x200008ac

0800a3fc <_read_r>:
 800a3fc:	b538      	push	{r3, r4, r5, lr}
 800a3fe:	4d07      	ldr	r5, [pc, #28]	@ (800a41c <_read_r+0x20>)
 800a400:	4604      	mov	r4, r0
 800a402:	4608      	mov	r0, r1
 800a404:	4611      	mov	r1, r2
 800a406:	2200      	movs	r2, #0
 800a408:	602a      	str	r2, [r5, #0]
 800a40a:	461a      	mov	r2, r3
 800a40c:	f7f7 fc19 	bl	8001c42 <_read>
 800a410:	1c43      	adds	r3, r0, #1
 800a412:	d102      	bne.n	800a41a <_read_r+0x1e>
 800a414:	682b      	ldr	r3, [r5, #0]
 800a416:	b103      	cbz	r3, 800a41a <_read_r+0x1e>
 800a418:	6023      	str	r3, [r4, #0]
 800a41a:	bd38      	pop	{r3, r4, r5, pc}
 800a41c:	200008ac 	.word	0x200008ac

0800a420 <_write_r>:
 800a420:	b538      	push	{r3, r4, r5, lr}
 800a422:	4d07      	ldr	r5, [pc, #28]	@ (800a440 <_write_r+0x20>)
 800a424:	4604      	mov	r4, r0
 800a426:	4608      	mov	r0, r1
 800a428:	4611      	mov	r1, r2
 800a42a:	2200      	movs	r2, #0
 800a42c:	602a      	str	r2, [r5, #0]
 800a42e:	461a      	mov	r2, r3
 800a430:	f7f7 fc24 	bl	8001c7c <_write>
 800a434:	1c43      	adds	r3, r0, #1
 800a436:	d102      	bne.n	800a43e <_write_r+0x1e>
 800a438:	682b      	ldr	r3, [r5, #0]
 800a43a:	b103      	cbz	r3, 800a43e <_write_r+0x1e>
 800a43c:	6023      	str	r3, [r4, #0]
 800a43e:	bd38      	pop	{r3, r4, r5, pc}
 800a440:	200008ac 	.word	0x200008ac

0800a444 <__errno>:
 800a444:	4b01      	ldr	r3, [pc, #4]	@ (800a44c <__errno+0x8>)
 800a446:	6818      	ldr	r0, [r3, #0]
 800a448:	4770      	bx	lr
 800a44a:	bf00      	nop
 800a44c:	20000018 	.word	0x20000018

0800a450 <__libc_init_array>:
 800a450:	b570      	push	{r4, r5, r6, lr}
 800a452:	4d0d      	ldr	r5, [pc, #52]	@ (800a488 <__libc_init_array+0x38>)
 800a454:	4c0d      	ldr	r4, [pc, #52]	@ (800a48c <__libc_init_array+0x3c>)
 800a456:	1b64      	subs	r4, r4, r5
 800a458:	10a4      	asrs	r4, r4, #2
 800a45a:	2600      	movs	r6, #0
 800a45c:	42a6      	cmp	r6, r4
 800a45e:	d109      	bne.n	800a474 <__libc_init_array+0x24>
 800a460:	4d0b      	ldr	r5, [pc, #44]	@ (800a490 <__libc_init_array+0x40>)
 800a462:	4c0c      	ldr	r4, [pc, #48]	@ (800a494 <__libc_init_array+0x44>)
 800a464:	f001 fe2e 	bl	800c0c4 <_init>
 800a468:	1b64      	subs	r4, r4, r5
 800a46a:	10a4      	asrs	r4, r4, #2
 800a46c:	2600      	movs	r6, #0
 800a46e:	42a6      	cmp	r6, r4
 800a470:	d105      	bne.n	800a47e <__libc_init_array+0x2e>
 800a472:	bd70      	pop	{r4, r5, r6, pc}
 800a474:	f855 3b04 	ldr.w	r3, [r5], #4
 800a478:	4798      	blx	r3
 800a47a:	3601      	adds	r6, #1
 800a47c:	e7ee      	b.n	800a45c <__libc_init_array+0xc>
 800a47e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a482:	4798      	blx	r3
 800a484:	3601      	adds	r6, #1
 800a486:	e7f2      	b.n	800a46e <__libc_init_array+0x1e>
 800a488:	0800c5cc 	.word	0x0800c5cc
 800a48c:	0800c5cc 	.word	0x0800c5cc
 800a490:	0800c5cc 	.word	0x0800c5cc
 800a494:	0800c5d0 	.word	0x0800c5d0

0800a498 <__retarget_lock_init_recursive>:
 800a498:	4770      	bx	lr

0800a49a <__retarget_lock_acquire_recursive>:
 800a49a:	4770      	bx	lr

0800a49c <__retarget_lock_release_recursive>:
 800a49c:	4770      	bx	lr

0800a49e <quorem>:
 800a49e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4a2:	6903      	ldr	r3, [r0, #16]
 800a4a4:	690c      	ldr	r4, [r1, #16]
 800a4a6:	42a3      	cmp	r3, r4
 800a4a8:	4607      	mov	r7, r0
 800a4aa:	db7e      	blt.n	800a5aa <quorem+0x10c>
 800a4ac:	3c01      	subs	r4, #1
 800a4ae:	f101 0814 	add.w	r8, r1, #20
 800a4b2:	00a3      	lsls	r3, r4, #2
 800a4b4:	f100 0514 	add.w	r5, r0, #20
 800a4b8:	9300      	str	r3, [sp, #0]
 800a4ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a4be:	9301      	str	r3, [sp, #4]
 800a4c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a4c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a4c8:	3301      	adds	r3, #1
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a4d0:	fbb2 f6f3 	udiv	r6, r2, r3
 800a4d4:	d32e      	bcc.n	800a534 <quorem+0x96>
 800a4d6:	f04f 0a00 	mov.w	sl, #0
 800a4da:	46c4      	mov	ip, r8
 800a4dc:	46ae      	mov	lr, r5
 800a4de:	46d3      	mov	fp, sl
 800a4e0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a4e4:	b298      	uxth	r0, r3
 800a4e6:	fb06 a000 	mla	r0, r6, r0, sl
 800a4ea:	0c02      	lsrs	r2, r0, #16
 800a4ec:	0c1b      	lsrs	r3, r3, #16
 800a4ee:	fb06 2303 	mla	r3, r6, r3, r2
 800a4f2:	f8de 2000 	ldr.w	r2, [lr]
 800a4f6:	b280      	uxth	r0, r0
 800a4f8:	b292      	uxth	r2, r2
 800a4fa:	1a12      	subs	r2, r2, r0
 800a4fc:	445a      	add	r2, fp
 800a4fe:	f8de 0000 	ldr.w	r0, [lr]
 800a502:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a506:	b29b      	uxth	r3, r3
 800a508:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a50c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a510:	b292      	uxth	r2, r2
 800a512:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a516:	45e1      	cmp	r9, ip
 800a518:	f84e 2b04 	str.w	r2, [lr], #4
 800a51c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a520:	d2de      	bcs.n	800a4e0 <quorem+0x42>
 800a522:	9b00      	ldr	r3, [sp, #0]
 800a524:	58eb      	ldr	r3, [r5, r3]
 800a526:	b92b      	cbnz	r3, 800a534 <quorem+0x96>
 800a528:	9b01      	ldr	r3, [sp, #4]
 800a52a:	3b04      	subs	r3, #4
 800a52c:	429d      	cmp	r5, r3
 800a52e:	461a      	mov	r2, r3
 800a530:	d32f      	bcc.n	800a592 <quorem+0xf4>
 800a532:	613c      	str	r4, [r7, #16]
 800a534:	4638      	mov	r0, r7
 800a536:	f001 f97d 	bl	800b834 <__mcmp>
 800a53a:	2800      	cmp	r0, #0
 800a53c:	db25      	blt.n	800a58a <quorem+0xec>
 800a53e:	4629      	mov	r1, r5
 800a540:	2000      	movs	r0, #0
 800a542:	f858 2b04 	ldr.w	r2, [r8], #4
 800a546:	f8d1 c000 	ldr.w	ip, [r1]
 800a54a:	fa1f fe82 	uxth.w	lr, r2
 800a54e:	fa1f f38c 	uxth.w	r3, ip
 800a552:	eba3 030e 	sub.w	r3, r3, lr
 800a556:	4403      	add	r3, r0
 800a558:	0c12      	lsrs	r2, r2, #16
 800a55a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a55e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a562:	b29b      	uxth	r3, r3
 800a564:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a568:	45c1      	cmp	r9, r8
 800a56a:	f841 3b04 	str.w	r3, [r1], #4
 800a56e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a572:	d2e6      	bcs.n	800a542 <quorem+0xa4>
 800a574:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a578:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a57c:	b922      	cbnz	r2, 800a588 <quorem+0xea>
 800a57e:	3b04      	subs	r3, #4
 800a580:	429d      	cmp	r5, r3
 800a582:	461a      	mov	r2, r3
 800a584:	d30b      	bcc.n	800a59e <quorem+0x100>
 800a586:	613c      	str	r4, [r7, #16]
 800a588:	3601      	adds	r6, #1
 800a58a:	4630      	mov	r0, r6
 800a58c:	b003      	add	sp, #12
 800a58e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a592:	6812      	ldr	r2, [r2, #0]
 800a594:	3b04      	subs	r3, #4
 800a596:	2a00      	cmp	r2, #0
 800a598:	d1cb      	bne.n	800a532 <quorem+0x94>
 800a59a:	3c01      	subs	r4, #1
 800a59c:	e7c6      	b.n	800a52c <quorem+0x8e>
 800a59e:	6812      	ldr	r2, [r2, #0]
 800a5a0:	3b04      	subs	r3, #4
 800a5a2:	2a00      	cmp	r2, #0
 800a5a4:	d1ef      	bne.n	800a586 <quorem+0xe8>
 800a5a6:	3c01      	subs	r4, #1
 800a5a8:	e7ea      	b.n	800a580 <quorem+0xe2>
 800a5aa:	2000      	movs	r0, #0
 800a5ac:	e7ee      	b.n	800a58c <quorem+0xee>
	...

0800a5b0 <_dtoa_r>:
 800a5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5b4:	69c7      	ldr	r7, [r0, #28]
 800a5b6:	b097      	sub	sp, #92	@ 0x5c
 800a5b8:	ed8d 0b04 	vstr	d0, [sp, #16]
 800a5bc:	ec55 4b10 	vmov	r4, r5, d0
 800a5c0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800a5c2:	9107      	str	r1, [sp, #28]
 800a5c4:	4681      	mov	r9, r0
 800a5c6:	920c      	str	r2, [sp, #48]	@ 0x30
 800a5c8:	9311      	str	r3, [sp, #68]	@ 0x44
 800a5ca:	b97f      	cbnz	r7, 800a5ec <_dtoa_r+0x3c>
 800a5cc:	2010      	movs	r0, #16
 800a5ce:	f000 fe09 	bl	800b1e4 <malloc>
 800a5d2:	4602      	mov	r2, r0
 800a5d4:	f8c9 001c 	str.w	r0, [r9, #28]
 800a5d8:	b920      	cbnz	r0, 800a5e4 <_dtoa_r+0x34>
 800a5da:	4ba9      	ldr	r3, [pc, #676]	@ (800a880 <_dtoa_r+0x2d0>)
 800a5dc:	21ef      	movs	r1, #239	@ 0xef
 800a5de:	48a9      	ldr	r0, [pc, #676]	@ (800a884 <_dtoa_r+0x2d4>)
 800a5e0:	f001 fcc0 	bl	800bf64 <__assert_func>
 800a5e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a5e8:	6007      	str	r7, [r0, #0]
 800a5ea:	60c7      	str	r7, [r0, #12]
 800a5ec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a5f0:	6819      	ldr	r1, [r3, #0]
 800a5f2:	b159      	cbz	r1, 800a60c <_dtoa_r+0x5c>
 800a5f4:	685a      	ldr	r2, [r3, #4]
 800a5f6:	604a      	str	r2, [r1, #4]
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	4093      	lsls	r3, r2
 800a5fc:	608b      	str	r3, [r1, #8]
 800a5fe:	4648      	mov	r0, r9
 800a600:	f000 fee6 	bl	800b3d0 <_Bfree>
 800a604:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a608:	2200      	movs	r2, #0
 800a60a:	601a      	str	r2, [r3, #0]
 800a60c:	1e2b      	subs	r3, r5, #0
 800a60e:	bfb9      	ittee	lt
 800a610:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a614:	9305      	strlt	r3, [sp, #20]
 800a616:	2300      	movge	r3, #0
 800a618:	6033      	strge	r3, [r6, #0]
 800a61a:	9f05      	ldr	r7, [sp, #20]
 800a61c:	4b9a      	ldr	r3, [pc, #616]	@ (800a888 <_dtoa_r+0x2d8>)
 800a61e:	bfbc      	itt	lt
 800a620:	2201      	movlt	r2, #1
 800a622:	6032      	strlt	r2, [r6, #0]
 800a624:	43bb      	bics	r3, r7
 800a626:	d112      	bne.n	800a64e <_dtoa_r+0x9e>
 800a628:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a62a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a62e:	6013      	str	r3, [r2, #0]
 800a630:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a634:	4323      	orrs	r3, r4
 800a636:	f000 855a 	beq.w	800b0ee <_dtoa_r+0xb3e>
 800a63a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a63c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800a89c <_dtoa_r+0x2ec>
 800a640:	2b00      	cmp	r3, #0
 800a642:	f000 855c 	beq.w	800b0fe <_dtoa_r+0xb4e>
 800a646:	f10a 0303 	add.w	r3, sl, #3
 800a64a:	f000 bd56 	b.w	800b0fa <_dtoa_r+0xb4a>
 800a64e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a652:	2200      	movs	r2, #0
 800a654:	ec51 0b17 	vmov	r0, r1, d7
 800a658:	2300      	movs	r3, #0
 800a65a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800a65e:	f7f6 fa3b 	bl	8000ad8 <__aeabi_dcmpeq>
 800a662:	4680      	mov	r8, r0
 800a664:	b158      	cbz	r0, 800a67e <_dtoa_r+0xce>
 800a666:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a668:	2301      	movs	r3, #1
 800a66a:	6013      	str	r3, [r2, #0]
 800a66c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a66e:	b113      	cbz	r3, 800a676 <_dtoa_r+0xc6>
 800a670:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a672:	4b86      	ldr	r3, [pc, #536]	@ (800a88c <_dtoa_r+0x2dc>)
 800a674:	6013      	str	r3, [r2, #0]
 800a676:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800a8a0 <_dtoa_r+0x2f0>
 800a67a:	f000 bd40 	b.w	800b0fe <_dtoa_r+0xb4e>
 800a67e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800a682:	aa14      	add	r2, sp, #80	@ 0x50
 800a684:	a915      	add	r1, sp, #84	@ 0x54
 800a686:	4648      	mov	r0, r9
 800a688:	f001 f984 	bl	800b994 <__d2b>
 800a68c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a690:	9002      	str	r0, [sp, #8]
 800a692:	2e00      	cmp	r6, #0
 800a694:	d078      	beq.n	800a788 <_dtoa_r+0x1d8>
 800a696:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a698:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800a69c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a6a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a6a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a6a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a6ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a6b0:	4619      	mov	r1, r3
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	4b76      	ldr	r3, [pc, #472]	@ (800a890 <_dtoa_r+0x2e0>)
 800a6b6:	f7f5 fdef 	bl	8000298 <__aeabi_dsub>
 800a6ba:	a36b      	add	r3, pc, #428	@ (adr r3, 800a868 <_dtoa_r+0x2b8>)
 800a6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c0:	f7f5 ffa2 	bl	8000608 <__aeabi_dmul>
 800a6c4:	a36a      	add	r3, pc, #424	@ (adr r3, 800a870 <_dtoa_r+0x2c0>)
 800a6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ca:	f7f5 fde7 	bl	800029c <__adddf3>
 800a6ce:	4604      	mov	r4, r0
 800a6d0:	4630      	mov	r0, r6
 800a6d2:	460d      	mov	r5, r1
 800a6d4:	f7f5 ff2e 	bl	8000534 <__aeabi_i2d>
 800a6d8:	a367      	add	r3, pc, #412	@ (adr r3, 800a878 <_dtoa_r+0x2c8>)
 800a6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6de:	f7f5 ff93 	bl	8000608 <__aeabi_dmul>
 800a6e2:	4602      	mov	r2, r0
 800a6e4:	460b      	mov	r3, r1
 800a6e6:	4620      	mov	r0, r4
 800a6e8:	4629      	mov	r1, r5
 800a6ea:	f7f5 fdd7 	bl	800029c <__adddf3>
 800a6ee:	4604      	mov	r4, r0
 800a6f0:	460d      	mov	r5, r1
 800a6f2:	f7f6 fa39 	bl	8000b68 <__aeabi_d2iz>
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	4607      	mov	r7, r0
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	4620      	mov	r0, r4
 800a6fe:	4629      	mov	r1, r5
 800a700:	f7f6 f9f4 	bl	8000aec <__aeabi_dcmplt>
 800a704:	b140      	cbz	r0, 800a718 <_dtoa_r+0x168>
 800a706:	4638      	mov	r0, r7
 800a708:	f7f5 ff14 	bl	8000534 <__aeabi_i2d>
 800a70c:	4622      	mov	r2, r4
 800a70e:	462b      	mov	r3, r5
 800a710:	f7f6 f9e2 	bl	8000ad8 <__aeabi_dcmpeq>
 800a714:	b900      	cbnz	r0, 800a718 <_dtoa_r+0x168>
 800a716:	3f01      	subs	r7, #1
 800a718:	2f16      	cmp	r7, #22
 800a71a:	d852      	bhi.n	800a7c2 <_dtoa_r+0x212>
 800a71c:	4b5d      	ldr	r3, [pc, #372]	@ (800a894 <_dtoa_r+0x2e4>)
 800a71e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a726:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a72a:	f7f6 f9df 	bl	8000aec <__aeabi_dcmplt>
 800a72e:	2800      	cmp	r0, #0
 800a730:	d049      	beq.n	800a7c6 <_dtoa_r+0x216>
 800a732:	3f01      	subs	r7, #1
 800a734:	2300      	movs	r3, #0
 800a736:	9310      	str	r3, [sp, #64]	@ 0x40
 800a738:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a73a:	1b9b      	subs	r3, r3, r6
 800a73c:	1e5a      	subs	r2, r3, #1
 800a73e:	bf45      	ittet	mi
 800a740:	f1c3 0301 	rsbmi	r3, r3, #1
 800a744:	9300      	strmi	r3, [sp, #0]
 800a746:	2300      	movpl	r3, #0
 800a748:	2300      	movmi	r3, #0
 800a74a:	9206      	str	r2, [sp, #24]
 800a74c:	bf54      	ite	pl
 800a74e:	9300      	strpl	r3, [sp, #0]
 800a750:	9306      	strmi	r3, [sp, #24]
 800a752:	2f00      	cmp	r7, #0
 800a754:	db39      	blt.n	800a7ca <_dtoa_r+0x21a>
 800a756:	9b06      	ldr	r3, [sp, #24]
 800a758:	970d      	str	r7, [sp, #52]	@ 0x34
 800a75a:	443b      	add	r3, r7
 800a75c:	9306      	str	r3, [sp, #24]
 800a75e:	2300      	movs	r3, #0
 800a760:	9308      	str	r3, [sp, #32]
 800a762:	9b07      	ldr	r3, [sp, #28]
 800a764:	2b09      	cmp	r3, #9
 800a766:	d863      	bhi.n	800a830 <_dtoa_r+0x280>
 800a768:	2b05      	cmp	r3, #5
 800a76a:	bfc4      	itt	gt
 800a76c:	3b04      	subgt	r3, #4
 800a76e:	9307      	strgt	r3, [sp, #28]
 800a770:	9b07      	ldr	r3, [sp, #28]
 800a772:	f1a3 0302 	sub.w	r3, r3, #2
 800a776:	bfcc      	ite	gt
 800a778:	2400      	movgt	r4, #0
 800a77a:	2401      	movle	r4, #1
 800a77c:	2b03      	cmp	r3, #3
 800a77e:	d863      	bhi.n	800a848 <_dtoa_r+0x298>
 800a780:	e8df f003 	tbb	[pc, r3]
 800a784:	2b375452 	.word	0x2b375452
 800a788:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a78c:	441e      	add	r6, r3
 800a78e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a792:	2b20      	cmp	r3, #32
 800a794:	bfc1      	itttt	gt
 800a796:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a79a:	409f      	lslgt	r7, r3
 800a79c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a7a0:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a7a4:	bfd6      	itet	le
 800a7a6:	f1c3 0320 	rsble	r3, r3, #32
 800a7aa:	ea47 0003 	orrgt.w	r0, r7, r3
 800a7ae:	fa04 f003 	lslle.w	r0, r4, r3
 800a7b2:	f7f5 feaf 	bl	8000514 <__aeabi_ui2d>
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a7bc:	3e01      	subs	r6, #1
 800a7be:	9212      	str	r2, [sp, #72]	@ 0x48
 800a7c0:	e776      	b.n	800a6b0 <_dtoa_r+0x100>
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	e7b7      	b.n	800a736 <_dtoa_r+0x186>
 800a7c6:	9010      	str	r0, [sp, #64]	@ 0x40
 800a7c8:	e7b6      	b.n	800a738 <_dtoa_r+0x188>
 800a7ca:	9b00      	ldr	r3, [sp, #0]
 800a7cc:	1bdb      	subs	r3, r3, r7
 800a7ce:	9300      	str	r3, [sp, #0]
 800a7d0:	427b      	negs	r3, r7
 800a7d2:	9308      	str	r3, [sp, #32]
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	930d      	str	r3, [sp, #52]	@ 0x34
 800a7d8:	e7c3      	b.n	800a762 <_dtoa_r+0x1b2>
 800a7da:	2301      	movs	r3, #1
 800a7dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a7e0:	eb07 0b03 	add.w	fp, r7, r3
 800a7e4:	f10b 0301 	add.w	r3, fp, #1
 800a7e8:	2b01      	cmp	r3, #1
 800a7ea:	9303      	str	r3, [sp, #12]
 800a7ec:	bfb8      	it	lt
 800a7ee:	2301      	movlt	r3, #1
 800a7f0:	e006      	b.n	800a800 <_dtoa_r+0x250>
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	dd28      	ble.n	800a84e <_dtoa_r+0x29e>
 800a7fc:	469b      	mov	fp, r3
 800a7fe:	9303      	str	r3, [sp, #12]
 800a800:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800a804:	2100      	movs	r1, #0
 800a806:	2204      	movs	r2, #4
 800a808:	f102 0514 	add.w	r5, r2, #20
 800a80c:	429d      	cmp	r5, r3
 800a80e:	d926      	bls.n	800a85e <_dtoa_r+0x2ae>
 800a810:	6041      	str	r1, [r0, #4]
 800a812:	4648      	mov	r0, r9
 800a814:	f000 fd9c 	bl	800b350 <_Balloc>
 800a818:	4682      	mov	sl, r0
 800a81a:	2800      	cmp	r0, #0
 800a81c:	d142      	bne.n	800a8a4 <_dtoa_r+0x2f4>
 800a81e:	4b1e      	ldr	r3, [pc, #120]	@ (800a898 <_dtoa_r+0x2e8>)
 800a820:	4602      	mov	r2, r0
 800a822:	f240 11af 	movw	r1, #431	@ 0x1af
 800a826:	e6da      	b.n	800a5de <_dtoa_r+0x2e>
 800a828:	2300      	movs	r3, #0
 800a82a:	e7e3      	b.n	800a7f4 <_dtoa_r+0x244>
 800a82c:	2300      	movs	r3, #0
 800a82e:	e7d5      	b.n	800a7dc <_dtoa_r+0x22c>
 800a830:	2401      	movs	r4, #1
 800a832:	2300      	movs	r3, #0
 800a834:	9307      	str	r3, [sp, #28]
 800a836:	9409      	str	r4, [sp, #36]	@ 0x24
 800a838:	f04f 3bff 	mov.w	fp, #4294967295
 800a83c:	2200      	movs	r2, #0
 800a83e:	f8cd b00c 	str.w	fp, [sp, #12]
 800a842:	2312      	movs	r3, #18
 800a844:	920c      	str	r2, [sp, #48]	@ 0x30
 800a846:	e7db      	b.n	800a800 <_dtoa_r+0x250>
 800a848:	2301      	movs	r3, #1
 800a84a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a84c:	e7f4      	b.n	800a838 <_dtoa_r+0x288>
 800a84e:	f04f 0b01 	mov.w	fp, #1
 800a852:	f8cd b00c 	str.w	fp, [sp, #12]
 800a856:	465b      	mov	r3, fp
 800a858:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800a85c:	e7d0      	b.n	800a800 <_dtoa_r+0x250>
 800a85e:	3101      	adds	r1, #1
 800a860:	0052      	lsls	r2, r2, #1
 800a862:	e7d1      	b.n	800a808 <_dtoa_r+0x258>
 800a864:	f3af 8000 	nop.w
 800a868:	636f4361 	.word	0x636f4361
 800a86c:	3fd287a7 	.word	0x3fd287a7
 800a870:	8b60c8b3 	.word	0x8b60c8b3
 800a874:	3fc68a28 	.word	0x3fc68a28
 800a878:	509f79fb 	.word	0x509f79fb
 800a87c:	3fd34413 	.word	0x3fd34413
 800a880:	0800c28d 	.word	0x0800c28d
 800a884:	0800c2a4 	.word	0x0800c2a4
 800a888:	7ff00000 	.word	0x7ff00000
 800a88c:	0800c25d 	.word	0x0800c25d
 800a890:	3ff80000 	.word	0x3ff80000
 800a894:	0800c3f8 	.word	0x0800c3f8
 800a898:	0800c2fc 	.word	0x0800c2fc
 800a89c:	0800c289 	.word	0x0800c289
 800a8a0:	0800c25c 	.word	0x0800c25c
 800a8a4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a8a8:	6018      	str	r0, [r3, #0]
 800a8aa:	9b03      	ldr	r3, [sp, #12]
 800a8ac:	2b0e      	cmp	r3, #14
 800a8ae:	f200 80a1 	bhi.w	800a9f4 <_dtoa_r+0x444>
 800a8b2:	2c00      	cmp	r4, #0
 800a8b4:	f000 809e 	beq.w	800a9f4 <_dtoa_r+0x444>
 800a8b8:	2f00      	cmp	r7, #0
 800a8ba:	dd33      	ble.n	800a924 <_dtoa_r+0x374>
 800a8bc:	4b9c      	ldr	r3, [pc, #624]	@ (800ab30 <_dtoa_r+0x580>)
 800a8be:	f007 020f 	and.w	r2, r7, #15
 800a8c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a8c6:	ed93 7b00 	vldr	d7, [r3]
 800a8ca:	05f8      	lsls	r0, r7, #23
 800a8cc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800a8d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a8d4:	d516      	bpl.n	800a904 <_dtoa_r+0x354>
 800a8d6:	4b97      	ldr	r3, [pc, #604]	@ (800ab34 <_dtoa_r+0x584>)
 800a8d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a8dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a8e0:	f7f5 ffbc 	bl	800085c <__aeabi_ddiv>
 800a8e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a8e8:	f004 040f 	and.w	r4, r4, #15
 800a8ec:	2603      	movs	r6, #3
 800a8ee:	4d91      	ldr	r5, [pc, #580]	@ (800ab34 <_dtoa_r+0x584>)
 800a8f0:	b954      	cbnz	r4, 800a908 <_dtoa_r+0x358>
 800a8f2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a8f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a8fa:	f7f5 ffaf 	bl	800085c <__aeabi_ddiv>
 800a8fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a902:	e028      	b.n	800a956 <_dtoa_r+0x3a6>
 800a904:	2602      	movs	r6, #2
 800a906:	e7f2      	b.n	800a8ee <_dtoa_r+0x33e>
 800a908:	07e1      	lsls	r1, r4, #31
 800a90a:	d508      	bpl.n	800a91e <_dtoa_r+0x36e>
 800a90c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a910:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a914:	f7f5 fe78 	bl	8000608 <__aeabi_dmul>
 800a918:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a91c:	3601      	adds	r6, #1
 800a91e:	1064      	asrs	r4, r4, #1
 800a920:	3508      	adds	r5, #8
 800a922:	e7e5      	b.n	800a8f0 <_dtoa_r+0x340>
 800a924:	f000 80af 	beq.w	800aa86 <_dtoa_r+0x4d6>
 800a928:	427c      	negs	r4, r7
 800a92a:	4b81      	ldr	r3, [pc, #516]	@ (800ab30 <_dtoa_r+0x580>)
 800a92c:	4d81      	ldr	r5, [pc, #516]	@ (800ab34 <_dtoa_r+0x584>)
 800a92e:	f004 020f 	and.w	r2, r4, #15
 800a932:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a93a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a93e:	f7f5 fe63 	bl	8000608 <__aeabi_dmul>
 800a942:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a946:	1124      	asrs	r4, r4, #4
 800a948:	2300      	movs	r3, #0
 800a94a:	2602      	movs	r6, #2
 800a94c:	2c00      	cmp	r4, #0
 800a94e:	f040 808f 	bne.w	800aa70 <_dtoa_r+0x4c0>
 800a952:	2b00      	cmp	r3, #0
 800a954:	d1d3      	bne.n	800a8fe <_dtoa_r+0x34e>
 800a956:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a958:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	f000 8094 	beq.w	800aa8a <_dtoa_r+0x4da>
 800a962:	4b75      	ldr	r3, [pc, #468]	@ (800ab38 <_dtoa_r+0x588>)
 800a964:	2200      	movs	r2, #0
 800a966:	4620      	mov	r0, r4
 800a968:	4629      	mov	r1, r5
 800a96a:	f7f6 f8bf 	bl	8000aec <__aeabi_dcmplt>
 800a96e:	2800      	cmp	r0, #0
 800a970:	f000 808b 	beq.w	800aa8a <_dtoa_r+0x4da>
 800a974:	9b03      	ldr	r3, [sp, #12]
 800a976:	2b00      	cmp	r3, #0
 800a978:	f000 8087 	beq.w	800aa8a <_dtoa_r+0x4da>
 800a97c:	f1bb 0f00 	cmp.w	fp, #0
 800a980:	dd34      	ble.n	800a9ec <_dtoa_r+0x43c>
 800a982:	4620      	mov	r0, r4
 800a984:	4b6d      	ldr	r3, [pc, #436]	@ (800ab3c <_dtoa_r+0x58c>)
 800a986:	2200      	movs	r2, #0
 800a988:	4629      	mov	r1, r5
 800a98a:	f7f5 fe3d 	bl	8000608 <__aeabi_dmul>
 800a98e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a992:	f107 38ff 	add.w	r8, r7, #4294967295
 800a996:	3601      	adds	r6, #1
 800a998:	465c      	mov	r4, fp
 800a99a:	4630      	mov	r0, r6
 800a99c:	f7f5 fdca 	bl	8000534 <__aeabi_i2d>
 800a9a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a9a4:	f7f5 fe30 	bl	8000608 <__aeabi_dmul>
 800a9a8:	4b65      	ldr	r3, [pc, #404]	@ (800ab40 <_dtoa_r+0x590>)
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	f7f5 fc76 	bl	800029c <__adddf3>
 800a9b0:	4605      	mov	r5, r0
 800a9b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a9b6:	2c00      	cmp	r4, #0
 800a9b8:	d16a      	bne.n	800aa90 <_dtoa_r+0x4e0>
 800a9ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a9be:	4b61      	ldr	r3, [pc, #388]	@ (800ab44 <_dtoa_r+0x594>)
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	f7f5 fc69 	bl	8000298 <__aeabi_dsub>
 800a9c6:	4602      	mov	r2, r0
 800a9c8:	460b      	mov	r3, r1
 800a9ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a9ce:	462a      	mov	r2, r5
 800a9d0:	4633      	mov	r3, r6
 800a9d2:	f7f6 f8a9 	bl	8000b28 <__aeabi_dcmpgt>
 800a9d6:	2800      	cmp	r0, #0
 800a9d8:	f040 8298 	bne.w	800af0c <_dtoa_r+0x95c>
 800a9dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a9e0:	462a      	mov	r2, r5
 800a9e2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a9e6:	f7f6 f881 	bl	8000aec <__aeabi_dcmplt>
 800a9ea:	bb38      	cbnz	r0, 800aa3c <_dtoa_r+0x48c>
 800a9ec:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800a9f0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a9f4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	f2c0 8157 	blt.w	800acaa <_dtoa_r+0x6fa>
 800a9fc:	2f0e      	cmp	r7, #14
 800a9fe:	f300 8154 	bgt.w	800acaa <_dtoa_r+0x6fa>
 800aa02:	4b4b      	ldr	r3, [pc, #300]	@ (800ab30 <_dtoa_r+0x580>)
 800aa04:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800aa08:	ed93 7b00 	vldr	d7, [r3]
 800aa0c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	ed8d 7b00 	vstr	d7, [sp]
 800aa14:	f280 80e5 	bge.w	800abe2 <_dtoa_r+0x632>
 800aa18:	9b03      	ldr	r3, [sp, #12]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	f300 80e1 	bgt.w	800abe2 <_dtoa_r+0x632>
 800aa20:	d10c      	bne.n	800aa3c <_dtoa_r+0x48c>
 800aa22:	4b48      	ldr	r3, [pc, #288]	@ (800ab44 <_dtoa_r+0x594>)
 800aa24:	2200      	movs	r2, #0
 800aa26:	ec51 0b17 	vmov	r0, r1, d7
 800aa2a:	f7f5 fded 	bl	8000608 <__aeabi_dmul>
 800aa2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa32:	f7f6 f86f 	bl	8000b14 <__aeabi_dcmpge>
 800aa36:	2800      	cmp	r0, #0
 800aa38:	f000 8266 	beq.w	800af08 <_dtoa_r+0x958>
 800aa3c:	2400      	movs	r4, #0
 800aa3e:	4625      	mov	r5, r4
 800aa40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aa42:	4656      	mov	r6, sl
 800aa44:	ea6f 0803 	mvn.w	r8, r3
 800aa48:	2700      	movs	r7, #0
 800aa4a:	4621      	mov	r1, r4
 800aa4c:	4648      	mov	r0, r9
 800aa4e:	f000 fcbf 	bl	800b3d0 <_Bfree>
 800aa52:	2d00      	cmp	r5, #0
 800aa54:	f000 80bd 	beq.w	800abd2 <_dtoa_r+0x622>
 800aa58:	b12f      	cbz	r7, 800aa66 <_dtoa_r+0x4b6>
 800aa5a:	42af      	cmp	r7, r5
 800aa5c:	d003      	beq.n	800aa66 <_dtoa_r+0x4b6>
 800aa5e:	4639      	mov	r1, r7
 800aa60:	4648      	mov	r0, r9
 800aa62:	f000 fcb5 	bl	800b3d0 <_Bfree>
 800aa66:	4629      	mov	r1, r5
 800aa68:	4648      	mov	r0, r9
 800aa6a:	f000 fcb1 	bl	800b3d0 <_Bfree>
 800aa6e:	e0b0      	b.n	800abd2 <_dtoa_r+0x622>
 800aa70:	07e2      	lsls	r2, r4, #31
 800aa72:	d505      	bpl.n	800aa80 <_dtoa_r+0x4d0>
 800aa74:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aa78:	f7f5 fdc6 	bl	8000608 <__aeabi_dmul>
 800aa7c:	3601      	adds	r6, #1
 800aa7e:	2301      	movs	r3, #1
 800aa80:	1064      	asrs	r4, r4, #1
 800aa82:	3508      	adds	r5, #8
 800aa84:	e762      	b.n	800a94c <_dtoa_r+0x39c>
 800aa86:	2602      	movs	r6, #2
 800aa88:	e765      	b.n	800a956 <_dtoa_r+0x3a6>
 800aa8a:	9c03      	ldr	r4, [sp, #12]
 800aa8c:	46b8      	mov	r8, r7
 800aa8e:	e784      	b.n	800a99a <_dtoa_r+0x3ea>
 800aa90:	4b27      	ldr	r3, [pc, #156]	@ (800ab30 <_dtoa_r+0x580>)
 800aa92:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aa94:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aa98:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aa9c:	4454      	add	r4, sl
 800aa9e:	2900      	cmp	r1, #0
 800aaa0:	d054      	beq.n	800ab4c <_dtoa_r+0x59c>
 800aaa2:	4929      	ldr	r1, [pc, #164]	@ (800ab48 <_dtoa_r+0x598>)
 800aaa4:	2000      	movs	r0, #0
 800aaa6:	f7f5 fed9 	bl	800085c <__aeabi_ddiv>
 800aaaa:	4633      	mov	r3, r6
 800aaac:	462a      	mov	r2, r5
 800aaae:	f7f5 fbf3 	bl	8000298 <__aeabi_dsub>
 800aab2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800aab6:	4656      	mov	r6, sl
 800aab8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aabc:	f7f6 f854 	bl	8000b68 <__aeabi_d2iz>
 800aac0:	4605      	mov	r5, r0
 800aac2:	f7f5 fd37 	bl	8000534 <__aeabi_i2d>
 800aac6:	4602      	mov	r2, r0
 800aac8:	460b      	mov	r3, r1
 800aaca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aace:	f7f5 fbe3 	bl	8000298 <__aeabi_dsub>
 800aad2:	3530      	adds	r5, #48	@ 0x30
 800aad4:	4602      	mov	r2, r0
 800aad6:	460b      	mov	r3, r1
 800aad8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800aadc:	f806 5b01 	strb.w	r5, [r6], #1
 800aae0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800aae4:	f7f6 f802 	bl	8000aec <__aeabi_dcmplt>
 800aae8:	2800      	cmp	r0, #0
 800aaea:	d172      	bne.n	800abd2 <_dtoa_r+0x622>
 800aaec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aaf0:	4911      	ldr	r1, [pc, #68]	@ (800ab38 <_dtoa_r+0x588>)
 800aaf2:	2000      	movs	r0, #0
 800aaf4:	f7f5 fbd0 	bl	8000298 <__aeabi_dsub>
 800aaf8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800aafc:	f7f5 fff6 	bl	8000aec <__aeabi_dcmplt>
 800ab00:	2800      	cmp	r0, #0
 800ab02:	f040 80b4 	bne.w	800ac6e <_dtoa_r+0x6be>
 800ab06:	42a6      	cmp	r6, r4
 800ab08:	f43f af70 	beq.w	800a9ec <_dtoa_r+0x43c>
 800ab0c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ab10:	4b0a      	ldr	r3, [pc, #40]	@ (800ab3c <_dtoa_r+0x58c>)
 800ab12:	2200      	movs	r2, #0
 800ab14:	f7f5 fd78 	bl	8000608 <__aeabi_dmul>
 800ab18:	4b08      	ldr	r3, [pc, #32]	@ (800ab3c <_dtoa_r+0x58c>)
 800ab1a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ab1e:	2200      	movs	r2, #0
 800ab20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab24:	f7f5 fd70 	bl	8000608 <__aeabi_dmul>
 800ab28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ab2c:	e7c4      	b.n	800aab8 <_dtoa_r+0x508>
 800ab2e:	bf00      	nop
 800ab30:	0800c3f8 	.word	0x0800c3f8
 800ab34:	0800c3d0 	.word	0x0800c3d0
 800ab38:	3ff00000 	.word	0x3ff00000
 800ab3c:	40240000 	.word	0x40240000
 800ab40:	401c0000 	.word	0x401c0000
 800ab44:	40140000 	.word	0x40140000
 800ab48:	3fe00000 	.word	0x3fe00000
 800ab4c:	4631      	mov	r1, r6
 800ab4e:	4628      	mov	r0, r5
 800ab50:	f7f5 fd5a 	bl	8000608 <__aeabi_dmul>
 800ab54:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ab58:	9413      	str	r4, [sp, #76]	@ 0x4c
 800ab5a:	4656      	mov	r6, sl
 800ab5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab60:	f7f6 f802 	bl	8000b68 <__aeabi_d2iz>
 800ab64:	4605      	mov	r5, r0
 800ab66:	f7f5 fce5 	bl	8000534 <__aeabi_i2d>
 800ab6a:	4602      	mov	r2, r0
 800ab6c:	460b      	mov	r3, r1
 800ab6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab72:	f7f5 fb91 	bl	8000298 <__aeabi_dsub>
 800ab76:	3530      	adds	r5, #48	@ 0x30
 800ab78:	f806 5b01 	strb.w	r5, [r6], #1
 800ab7c:	4602      	mov	r2, r0
 800ab7e:	460b      	mov	r3, r1
 800ab80:	42a6      	cmp	r6, r4
 800ab82:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ab86:	f04f 0200 	mov.w	r2, #0
 800ab8a:	d124      	bne.n	800abd6 <_dtoa_r+0x626>
 800ab8c:	4baf      	ldr	r3, [pc, #700]	@ (800ae4c <_dtoa_r+0x89c>)
 800ab8e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ab92:	f7f5 fb83 	bl	800029c <__adddf3>
 800ab96:	4602      	mov	r2, r0
 800ab98:	460b      	mov	r3, r1
 800ab9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab9e:	f7f5 ffc3 	bl	8000b28 <__aeabi_dcmpgt>
 800aba2:	2800      	cmp	r0, #0
 800aba4:	d163      	bne.n	800ac6e <_dtoa_r+0x6be>
 800aba6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800abaa:	49a8      	ldr	r1, [pc, #672]	@ (800ae4c <_dtoa_r+0x89c>)
 800abac:	2000      	movs	r0, #0
 800abae:	f7f5 fb73 	bl	8000298 <__aeabi_dsub>
 800abb2:	4602      	mov	r2, r0
 800abb4:	460b      	mov	r3, r1
 800abb6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800abba:	f7f5 ff97 	bl	8000aec <__aeabi_dcmplt>
 800abbe:	2800      	cmp	r0, #0
 800abc0:	f43f af14 	beq.w	800a9ec <_dtoa_r+0x43c>
 800abc4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800abc6:	1e73      	subs	r3, r6, #1
 800abc8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800abca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800abce:	2b30      	cmp	r3, #48	@ 0x30
 800abd0:	d0f8      	beq.n	800abc4 <_dtoa_r+0x614>
 800abd2:	4647      	mov	r7, r8
 800abd4:	e03b      	b.n	800ac4e <_dtoa_r+0x69e>
 800abd6:	4b9e      	ldr	r3, [pc, #632]	@ (800ae50 <_dtoa_r+0x8a0>)
 800abd8:	f7f5 fd16 	bl	8000608 <__aeabi_dmul>
 800abdc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800abe0:	e7bc      	b.n	800ab5c <_dtoa_r+0x5ac>
 800abe2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800abe6:	4656      	mov	r6, sl
 800abe8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800abec:	4620      	mov	r0, r4
 800abee:	4629      	mov	r1, r5
 800abf0:	f7f5 fe34 	bl	800085c <__aeabi_ddiv>
 800abf4:	f7f5 ffb8 	bl	8000b68 <__aeabi_d2iz>
 800abf8:	4680      	mov	r8, r0
 800abfa:	f7f5 fc9b 	bl	8000534 <__aeabi_i2d>
 800abfe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac02:	f7f5 fd01 	bl	8000608 <__aeabi_dmul>
 800ac06:	4602      	mov	r2, r0
 800ac08:	460b      	mov	r3, r1
 800ac0a:	4620      	mov	r0, r4
 800ac0c:	4629      	mov	r1, r5
 800ac0e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ac12:	f7f5 fb41 	bl	8000298 <__aeabi_dsub>
 800ac16:	f806 4b01 	strb.w	r4, [r6], #1
 800ac1a:	9d03      	ldr	r5, [sp, #12]
 800ac1c:	eba6 040a 	sub.w	r4, r6, sl
 800ac20:	42a5      	cmp	r5, r4
 800ac22:	4602      	mov	r2, r0
 800ac24:	460b      	mov	r3, r1
 800ac26:	d133      	bne.n	800ac90 <_dtoa_r+0x6e0>
 800ac28:	f7f5 fb38 	bl	800029c <__adddf3>
 800ac2c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac30:	4604      	mov	r4, r0
 800ac32:	460d      	mov	r5, r1
 800ac34:	f7f5 ff78 	bl	8000b28 <__aeabi_dcmpgt>
 800ac38:	b9c0      	cbnz	r0, 800ac6c <_dtoa_r+0x6bc>
 800ac3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac3e:	4620      	mov	r0, r4
 800ac40:	4629      	mov	r1, r5
 800ac42:	f7f5 ff49 	bl	8000ad8 <__aeabi_dcmpeq>
 800ac46:	b110      	cbz	r0, 800ac4e <_dtoa_r+0x69e>
 800ac48:	f018 0f01 	tst.w	r8, #1
 800ac4c:	d10e      	bne.n	800ac6c <_dtoa_r+0x6bc>
 800ac4e:	9902      	ldr	r1, [sp, #8]
 800ac50:	4648      	mov	r0, r9
 800ac52:	f000 fbbd 	bl	800b3d0 <_Bfree>
 800ac56:	2300      	movs	r3, #0
 800ac58:	7033      	strb	r3, [r6, #0]
 800ac5a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ac5c:	3701      	adds	r7, #1
 800ac5e:	601f      	str	r7, [r3, #0]
 800ac60:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	f000 824b 	beq.w	800b0fe <_dtoa_r+0xb4e>
 800ac68:	601e      	str	r6, [r3, #0]
 800ac6a:	e248      	b.n	800b0fe <_dtoa_r+0xb4e>
 800ac6c:	46b8      	mov	r8, r7
 800ac6e:	4633      	mov	r3, r6
 800ac70:	461e      	mov	r6, r3
 800ac72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac76:	2a39      	cmp	r2, #57	@ 0x39
 800ac78:	d106      	bne.n	800ac88 <_dtoa_r+0x6d8>
 800ac7a:	459a      	cmp	sl, r3
 800ac7c:	d1f8      	bne.n	800ac70 <_dtoa_r+0x6c0>
 800ac7e:	2230      	movs	r2, #48	@ 0x30
 800ac80:	f108 0801 	add.w	r8, r8, #1
 800ac84:	f88a 2000 	strb.w	r2, [sl]
 800ac88:	781a      	ldrb	r2, [r3, #0]
 800ac8a:	3201      	adds	r2, #1
 800ac8c:	701a      	strb	r2, [r3, #0]
 800ac8e:	e7a0      	b.n	800abd2 <_dtoa_r+0x622>
 800ac90:	4b6f      	ldr	r3, [pc, #444]	@ (800ae50 <_dtoa_r+0x8a0>)
 800ac92:	2200      	movs	r2, #0
 800ac94:	f7f5 fcb8 	bl	8000608 <__aeabi_dmul>
 800ac98:	2200      	movs	r2, #0
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	4604      	mov	r4, r0
 800ac9e:	460d      	mov	r5, r1
 800aca0:	f7f5 ff1a 	bl	8000ad8 <__aeabi_dcmpeq>
 800aca4:	2800      	cmp	r0, #0
 800aca6:	d09f      	beq.n	800abe8 <_dtoa_r+0x638>
 800aca8:	e7d1      	b.n	800ac4e <_dtoa_r+0x69e>
 800acaa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800acac:	2a00      	cmp	r2, #0
 800acae:	f000 80ea 	beq.w	800ae86 <_dtoa_r+0x8d6>
 800acb2:	9a07      	ldr	r2, [sp, #28]
 800acb4:	2a01      	cmp	r2, #1
 800acb6:	f300 80cd 	bgt.w	800ae54 <_dtoa_r+0x8a4>
 800acba:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800acbc:	2a00      	cmp	r2, #0
 800acbe:	f000 80c1 	beq.w	800ae44 <_dtoa_r+0x894>
 800acc2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800acc6:	9c08      	ldr	r4, [sp, #32]
 800acc8:	9e00      	ldr	r6, [sp, #0]
 800acca:	9a00      	ldr	r2, [sp, #0]
 800accc:	441a      	add	r2, r3
 800acce:	9200      	str	r2, [sp, #0]
 800acd0:	9a06      	ldr	r2, [sp, #24]
 800acd2:	2101      	movs	r1, #1
 800acd4:	441a      	add	r2, r3
 800acd6:	4648      	mov	r0, r9
 800acd8:	9206      	str	r2, [sp, #24]
 800acda:	f000 fc2d 	bl	800b538 <__i2b>
 800acde:	4605      	mov	r5, r0
 800ace0:	b166      	cbz	r6, 800acfc <_dtoa_r+0x74c>
 800ace2:	9b06      	ldr	r3, [sp, #24]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	dd09      	ble.n	800acfc <_dtoa_r+0x74c>
 800ace8:	42b3      	cmp	r3, r6
 800acea:	9a00      	ldr	r2, [sp, #0]
 800acec:	bfa8      	it	ge
 800acee:	4633      	movge	r3, r6
 800acf0:	1ad2      	subs	r2, r2, r3
 800acf2:	9200      	str	r2, [sp, #0]
 800acf4:	9a06      	ldr	r2, [sp, #24]
 800acf6:	1af6      	subs	r6, r6, r3
 800acf8:	1ad3      	subs	r3, r2, r3
 800acfa:	9306      	str	r3, [sp, #24]
 800acfc:	9b08      	ldr	r3, [sp, #32]
 800acfe:	b30b      	cbz	r3, 800ad44 <_dtoa_r+0x794>
 800ad00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	f000 80c6 	beq.w	800ae94 <_dtoa_r+0x8e4>
 800ad08:	2c00      	cmp	r4, #0
 800ad0a:	f000 80c0 	beq.w	800ae8e <_dtoa_r+0x8de>
 800ad0e:	4629      	mov	r1, r5
 800ad10:	4622      	mov	r2, r4
 800ad12:	4648      	mov	r0, r9
 800ad14:	f000 fcc8 	bl	800b6a8 <__pow5mult>
 800ad18:	9a02      	ldr	r2, [sp, #8]
 800ad1a:	4601      	mov	r1, r0
 800ad1c:	4605      	mov	r5, r0
 800ad1e:	4648      	mov	r0, r9
 800ad20:	f000 fc20 	bl	800b564 <__multiply>
 800ad24:	9902      	ldr	r1, [sp, #8]
 800ad26:	4680      	mov	r8, r0
 800ad28:	4648      	mov	r0, r9
 800ad2a:	f000 fb51 	bl	800b3d0 <_Bfree>
 800ad2e:	9b08      	ldr	r3, [sp, #32]
 800ad30:	1b1b      	subs	r3, r3, r4
 800ad32:	9308      	str	r3, [sp, #32]
 800ad34:	f000 80b1 	beq.w	800ae9a <_dtoa_r+0x8ea>
 800ad38:	9a08      	ldr	r2, [sp, #32]
 800ad3a:	4641      	mov	r1, r8
 800ad3c:	4648      	mov	r0, r9
 800ad3e:	f000 fcb3 	bl	800b6a8 <__pow5mult>
 800ad42:	9002      	str	r0, [sp, #8]
 800ad44:	2101      	movs	r1, #1
 800ad46:	4648      	mov	r0, r9
 800ad48:	f000 fbf6 	bl	800b538 <__i2b>
 800ad4c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ad4e:	4604      	mov	r4, r0
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	f000 81d8 	beq.w	800b106 <_dtoa_r+0xb56>
 800ad56:	461a      	mov	r2, r3
 800ad58:	4601      	mov	r1, r0
 800ad5a:	4648      	mov	r0, r9
 800ad5c:	f000 fca4 	bl	800b6a8 <__pow5mult>
 800ad60:	9b07      	ldr	r3, [sp, #28]
 800ad62:	2b01      	cmp	r3, #1
 800ad64:	4604      	mov	r4, r0
 800ad66:	f300 809f 	bgt.w	800aea8 <_dtoa_r+0x8f8>
 800ad6a:	9b04      	ldr	r3, [sp, #16]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	f040 8097 	bne.w	800aea0 <_dtoa_r+0x8f0>
 800ad72:	9b05      	ldr	r3, [sp, #20]
 800ad74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	f040 8093 	bne.w	800aea4 <_dtoa_r+0x8f4>
 800ad7e:	9b05      	ldr	r3, [sp, #20]
 800ad80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ad84:	0d1b      	lsrs	r3, r3, #20
 800ad86:	051b      	lsls	r3, r3, #20
 800ad88:	b133      	cbz	r3, 800ad98 <_dtoa_r+0x7e8>
 800ad8a:	9b00      	ldr	r3, [sp, #0]
 800ad8c:	3301      	adds	r3, #1
 800ad8e:	9300      	str	r3, [sp, #0]
 800ad90:	9b06      	ldr	r3, [sp, #24]
 800ad92:	3301      	adds	r3, #1
 800ad94:	9306      	str	r3, [sp, #24]
 800ad96:	2301      	movs	r3, #1
 800ad98:	9308      	str	r3, [sp, #32]
 800ad9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	f000 81b8 	beq.w	800b112 <_dtoa_r+0xb62>
 800ada2:	6923      	ldr	r3, [r4, #16]
 800ada4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ada8:	6918      	ldr	r0, [r3, #16]
 800adaa:	f000 fb79 	bl	800b4a0 <__hi0bits>
 800adae:	f1c0 0020 	rsb	r0, r0, #32
 800adb2:	9b06      	ldr	r3, [sp, #24]
 800adb4:	4418      	add	r0, r3
 800adb6:	f010 001f 	ands.w	r0, r0, #31
 800adba:	f000 8082 	beq.w	800aec2 <_dtoa_r+0x912>
 800adbe:	f1c0 0320 	rsb	r3, r0, #32
 800adc2:	2b04      	cmp	r3, #4
 800adc4:	dd73      	ble.n	800aeae <_dtoa_r+0x8fe>
 800adc6:	9b00      	ldr	r3, [sp, #0]
 800adc8:	f1c0 001c 	rsb	r0, r0, #28
 800adcc:	4403      	add	r3, r0
 800adce:	9300      	str	r3, [sp, #0]
 800add0:	9b06      	ldr	r3, [sp, #24]
 800add2:	4403      	add	r3, r0
 800add4:	4406      	add	r6, r0
 800add6:	9306      	str	r3, [sp, #24]
 800add8:	9b00      	ldr	r3, [sp, #0]
 800adda:	2b00      	cmp	r3, #0
 800addc:	dd05      	ble.n	800adea <_dtoa_r+0x83a>
 800adde:	9902      	ldr	r1, [sp, #8]
 800ade0:	461a      	mov	r2, r3
 800ade2:	4648      	mov	r0, r9
 800ade4:	f000 fcba 	bl	800b75c <__lshift>
 800ade8:	9002      	str	r0, [sp, #8]
 800adea:	9b06      	ldr	r3, [sp, #24]
 800adec:	2b00      	cmp	r3, #0
 800adee:	dd05      	ble.n	800adfc <_dtoa_r+0x84c>
 800adf0:	4621      	mov	r1, r4
 800adf2:	461a      	mov	r2, r3
 800adf4:	4648      	mov	r0, r9
 800adf6:	f000 fcb1 	bl	800b75c <__lshift>
 800adfa:	4604      	mov	r4, r0
 800adfc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d061      	beq.n	800aec6 <_dtoa_r+0x916>
 800ae02:	9802      	ldr	r0, [sp, #8]
 800ae04:	4621      	mov	r1, r4
 800ae06:	f000 fd15 	bl	800b834 <__mcmp>
 800ae0a:	2800      	cmp	r0, #0
 800ae0c:	da5b      	bge.n	800aec6 <_dtoa_r+0x916>
 800ae0e:	2300      	movs	r3, #0
 800ae10:	9902      	ldr	r1, [sp, #8]
 800ae12:	220a      	movs	r2, #10
 800ae14:	4648      	mov	r0, r9
 800ae16:	f000 fafd 	bl	800b414 <__multadd>
 800ae1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae1c:	9002      	str	r0, [sp, #8]
 800ae1e:	f107 38ff 	add.w	r8, r7, #4294967295
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	f000 8177 	beq.w	800b116 <_dtoa_r+0xb66>
 800ae28:	4629      	mov	r1, r5
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	220a      	movs	r2, #10
 800ae2e:	4648      	mov	r0, r9
 800ae30:	f000 faf0 	bl	800b414 <__multadd>
 800ae34:	f1bb 0f00 	cmp.w	fp, #0
 800ae38:	4605      	mov	r5, r0
 800ae3a:	dc6f      	bgt.n	800af1c <_dtoa_r+0x96c>
 800ae3c:	9b07      	ldr	r3, [sp, #28]
 800ae3e:	2b02      	cmp	r3, #2
 800ae40:	dc49      	bgt.n	800aed6 <_dtoa_r+0x926>
 800ae42:	e06b      	b.n	800af1c <_dtoa_r+0x96c>
 800ae44:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ae46:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ae4a:	e73c      	b.n	800acc6 <_dtoa_r+0x716>
 800ae4c:	3fe00000 	.word	0x3fe00000
 800ae50:	40240000 	.word	0x40240000
 800ae54:	9b03      	ldr	r3, [sp, #12]
 800ae56:	1e5c      	subs	r4, r3, #1
 800ae58:	9b08      	ldr	r3, [sp, #32]
 800ae5a:	42a3      	cmp	r3, r4
 800ae5c:	db09      	blt.n	800ae72 <_dtoa_r+0x8c2>
 800ae5e:	1b1c      	subs	r4, r3, r4
 800ae60:	9b03      	ldr	r3, [sp, #12]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	f6bf af30 	bge.w	800acc8 <_dtoa_r+0x718>
 800ae68:	9b00      	ldr	r3, [sp, #0]
 800ae6a:	9a03      	ldr	r2, [sp, #12]
 800ae6c:	1a9e      	subs	r6, r3, r2
 800ae6e:	2300      	movs	r3, #0
 800ae70:	e72b      	b.n	800acca <_dtoa_r+0x71a>
 800ae72:	9b08      	ldr	r3, [sp, #32]
 800ae74:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ae76:	9408      	str	r4, [sp, #32]
 800ae78:	1ae3      	subs	r3, r4, r3
 800ae7a:	441a      	add	r2, r3
 800ae7c:	9e00      	ldr	r6, [sp, #0]
 800ae7e:	9b03      	ldr	r3, [sp, #12]
 800ae80:	920d      	str	r2, [sp, #52]	@ 0x34
 800ae82:	2400      	movs	r4, #0
 800ae84:	e721      	b.n	800acca <_dtoa_r+0x71a>
 800ae86:	9c08      	ldr	r4, [sp, #32]
 800ae88:	9e00      	ldr	r6, [sp, #0]
 800ae8a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800ae8c:	e728      	b.n	800ace0 <_dtoa_r+0x730>
 800ae8e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800ae92:	e751      	b.n	800ad38 <_dtoa_r+0x788>
 800ae94:	9a08      	ldr	r2, [sp, #32]
 800ae96:	9902      	ldr	r1, [sp, #8]
 800ae98:	e750      	b.n	800ad3c <_dtoa_r+0x78c>
 800ae9a:	f8cd 8008 	str.w	r8, [sp, #8]
 800ae9e:	e751      	b.n	800ad44 <_dtoa_r+0x794>
 800aea0:	2300      	movs	r3, #0
 800aea2:	e779      	b.n	800ad98 <_dtoa_r+0x7e8>
 800aea4:	9b04      	ldr	r3, [sp, #16]
 800aea6:	e777      	b.n	800ad98 <_dtoa_r+0x7e8>
 800aea8:	2300      	movs	r3, #0
 800aeaa:	9308      	str	r3, [sp, #32]
 800aeac:	e779      	b.n	800ada2 <_dtoa_r+0x7f2>
 800aeae:	d093      	beq.n	800add8 <_dtoa_r+0x828>
 800aeb0:	9a00      	ldr	r2, [sp, #0]
 800aeb2:	331c      	adds	r3, #28
 800aeb4:	441a      	add	r2, r3
 800aeb6:	9200      	str	r2, [sp, #0]
 800aeb8:	9a06      	ldr	r2, [sp, #24]
 800aeba:	441a      	add	r2, r3
 800aebc:	441e      	add	r6, r3
 800aebe:	9206      	str	r2, [sp, #24]
 800aec0:	e78a      	b.n	800add8 <_dtoa_r+0x828>
 800aec2:	4603      	mov	r3, r0
 800aec4:	e7f4      	b.n	800aeb0 <_dtoa_r+0x900>
 800aec6:	9b03      	ldr	r3, [sp, #12]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	46b8      	mov	r8, r7
 800aecc:	dc20      	bgt.n	800af10 <_dtoa_r+0x960>
 800aece:	469b      	mov	fp, r3
 800aed0:	9b07      	ldr	r3, [sp, #28]
 800aed2:	2b02      	cmp	r3, #2
 800aed4:	dd1e      	ble.n	800af14 <_dtoa_r+0x964>
 800aed6:	f1bb 0f00 	cmp.w	fp, #0
 800aeda:	f47f adb1 	bne.w	800aa40 <_dtoa_r+0x490>
 800aede:	4621      	mov	r1, r4
 800aee0:	465b      	mov	r3, fp
 800aee2:	2205      	movs	r2, #5
 800aee4:	4648      	mov	r0, r9
 800aee6:	f000 fa95 	bl	800b414 <__multadd>
 800aeea:	4601      	mov	r1, r0
 800aeec:	4604      	mov	r4, r0
 800aeee:	9802      	ldr	r0, [sp, #8]
 800aef0:	f000 fca0 	bl	800b834 <__mcmp>
 800aef4:	2800      	cmp	r0, #0
 800aef6:	f77f ada3 	ble.w	800aa40 <_dtoa_r+0x490>
 800aefa:	4656      	mov	r6, sl
 800aefc:	2331      	movs	r3, #49	@ 0x31
 800aefe:	f806 3b01 	strb.w	r3, [r6], #1
 800af02:	f108 0801 	add.w	r8, r8, #1
 800af06:	e59f      	b.n	800aa48 <_dtoa_r+0x498>
 800af08:	9c03      	ldr	r4, [sp, #12]
 800af0a:	46b8      	mov	r8, r7
 800af0c:	4625      	mov	r5, r4
 800af0e:	e7f4      	b.n	800aefa <_dtoa_r+0x94a>
 800af10:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800af14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af16:	2b00      	cmp	r3, #0
 800af18:	f000 8101 	beq.w	800b11e <_dtoa_r+0xb6e>
 800af1c:	2e00      	cmp	r6, #0
 800af1e:	dd05      	ble.n	800af2c <_dtoa_r+0x97c>
 800af20:	4629      	mov	r1, r5
 800af22:	4632      	mov	r2, r6
 800af24:	4648      	mov	r0, r9
 800af26:	f000 fc19 	bl	800b75c <__lshift>
 800af2a:	4605      	mov	r5, r0
 800af2c:	9b08      	ldr	r3, [sp, #32]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d05c      	beq.n	800afec <_dtoa_r+0xa3c>
 800af32:	6869      	ldr	r1, [r5, #4]
 800af34:	4648      	mov	r0, r9
 800af36:	f000 fa0b 	bl	800b350 <_Balloc>
 800af3a:	4606      	mov	r6, r0
 800af3c:	b928      	cbnz	r0, 800af4a <_dtoa_r+0x99a>
 800af3e:	4b82      	ldr	r3, [pc, #520]	@ (800b148 <_dtoa_r+0xb98>)
 800af40:	4602      	mov	r2, r0
 800af42:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800af46:	f7ff bb4a 	b.w	800a5de <_dtoa_r+0x2e>
 800af4a:	692a      	ldr	r2, [r5, #16]
 800af4c:	3202      	adds	r2, #2
 800af4e:	0092      	lsls	r2, r2, #2
 800af50:	f105 010c 	add.w	r1, r5, #12
 800af54:	300c      	adds	r0, #12
 800af56:	f000 fff7 	bl	800bf48 <memcpy>
 800af5a:	2201      	movs	r2, #1
 800af5c:	4631      	mov	r1, r6
 800af5e:	4648      	mov	r0, r9
 800af60:	f000 fbfc 	bl	800b75c <__lshift>
 800af64:	f10a 0301 	add.w	r3, sl, #1
 800af68:	9300      	str	r3, [sp, #0]
 800af6a:	eb0a 030b 	add.w	r3, sl, fp
 800af6e:	9308      	str	r3, [sp, #32]
 800af70:	9b04      	ldr	r3, [sp, #16]
 800af72:	f003 0301 	and.w	r3, r3, #1
 800af76:	462f      	mov	r7, r5
 800af78:	9306      	str	r3, [sp, #24]
 800af7a:	4605      	mov	r5, r0
 800af7c:	9b00      	ldr	r3, [sp, #0]
 800af7e:	9802      	ldr	r0, [sp, #8]
 800af80:	4621      	mov	r1, r4
 800af82:	f103 3bff 	add.w	fp, r3, #4294967295
 800af86:	f7ff fa8a 	bl	800a49e <quorem>
 800af8a:	4603      	mov	r3, r0
 800af8c:	3330      	adds	r3, #48	@ 0x30
 800af8e:	9003      	str	r0, [sp, #12]
 800af90:	4639      	mov	r1, r7
 800af92:	9802      	ldr	r0, [sp, #8]
 800af94:	9309      	str	r3, [sp, #36]	@ 0x24
 800af96:	f000 fc4d 	bl	800b834 <__mcmp>
 800af9a:	462a      	mov	r2, r5
 800af9c:	9004      	str	r0, [sp, #16]
 800af9e:	4621      	mov	r1, r4
 800afa0:	4648      	mov	r0, r9
 800afa2:	f000 fc63 	bl	800b86c <__mdiff>
 800afa6:	68c2      	ldr	r2, [r0, #12]
 800afa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afaa:	4606      	mov	r6, r0
 800afac:	bb02      	cbnz	r2, 800aff0 <_dtoa_r+0xa40>
 800afae:	4601      	mov	r1, r0
 800afb0:	9802      	ldr	r0, [sp, #8]
 800afb2:	f000 fc3f 	bl	800b834 <__mcmp>
 800afb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afb8:	4602      	mov	r2, r0
 800afba:	4631      	mov	r1, r6
 800afbc:	4648      	mov	r0, r9
 800afbe:	920c      	str	r2, [sp, #48]	@ 0x30
 800afc0:	9309      	str	r3, [sp, #36]	@ 0x24
 800afc2:	f000 fa05 	bl	800b3d0 <_Bfree>
 800afc6:	9b07      	ldr	r3, [sp, #28]
 800afc8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800afca:	9e00      	ldr	r6, [sp, #0]
 800afcc:	ea42 0103 	orr.w	r1, r2, r3
 800afd0:	9b06      	ldr	r3, [sp, #24]
 800afd2:	4319      	orrs	r1, r3
 800afd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afd6:	d10d      	bne.n	800aff4 <_dtoa_r+0xa44>
 800afd8:	2b39      	cmp	r3, #57	@ 0x39
 800afda:	d027      	beq.n	800b02c <_dtoa_r+0xa7c>
 800afdc:	9a04      	ldr	r2, [sp, #16]
 800afde:	2a00      	cmp	r2, #0
 800afe0:	dd01      	ble.n	800afe6 <_dtoa_r+0xa36>
 800afe2:	9b03      	ldr	r3, [sp, #12]
 800afe4:	3331      	adds	r3, #49	@ 0x31
 800afe6:	f88b 3000 	strb.w	r3, [fp]
 800afea:	e52e      	b.n	800aa4a <_dtoa_r+0x49a>
 800afec:	4628      	mov	r0, r5
 800afee:	e7b9      	b.n	800af64 <_dtoa_r+0x9b4>
 800aff0:	2201      	movs	r2, #1
 800aff2:	e7e2      	b.n	800afba <_dtoa_r+0xa0a>
 800aff4:	9904      	ldr	r1, [sp, #16]
 800aff6:	2900      	cmp	r1, #0
 800aff8:	db04      	blt.n	800b004 <_dtoa_r+0xa54>
 800affa:	9807      	ldr	r0, [sp, #28]
 800affc:	4301      	orrs	r1, r0
 800affe:	9806      	ldr	r0, [sp, #24]
 800b000:	4301      	orrs	r1, r0
 800b002:	d120      	bne.n	800b046 <_dtoa_r+0xa96>
 800b004:	2a00      	cmp	r2, #0
 800b006:	ddee      	ble.n	800afe6 <_dtoa_r+0xa36>
 800b008:	9902      	ldr	r1, [sp, #8]
 800b00a:	9300      	str	r3, [sp, #0]
 800b00c:	2201      	movs	r2, #1
 800b00e:	4648      	mov	r0, r9
 800b010:	f000 fba4 	bl	800b75c <__lshift>
 800b014:	4621      	mov	r1, r4
 800b016:	9002      	str	r0, [sp, #8]
 800b018:	f000 fc0c 	bl	800b834 <__mcmp>
 800b01c:	2800      	cmp	r0, #0
 800b01e:	9b00      	ldr	r3, [sp, #0]
 800b020:	dc02      	bgt.n	800b028 <_dtoa_r+0xa78>
 800b022:	d1e0      	bne.n	800afe6 <_dtoa_r+0xa36>
 800b024:	07da      	lsls	r2, r3, #31
 800b026:	d5de      	bpl.n	800afe6 <_dtoa_r+0xa36>
 800b028:	2b39      	cmp	r3, #57	@ 0x39
 800b02a:	d1da      	bne.n	800afe2 <_dtoa_r+0xa32>
 800b02c:	2339      	movs	r3, #57	@ 0x39
 800b02e:	f88b 3000 	strb.w	r3, [fp]
 800b032:	4633      	mov	r3, r6
 800b034:	461e      	mov	r6, r3
 800b036:	3b01      	subs	r3, #1
 800b038:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b03c:	2a39      	cmp	r2, #57	@ 0x39
 800b03e:	d04e      	beq.n	800b0de <_dtoa_r+0xb2e>
 800b040:	3201      	adds	r2, #1
 800b042:	701a      	strb	r2, [r3, #0]
 800b044:	e501      	b.n	800aa4a <_dtoa_r+0x49a>
 800b046:	2a00      	cmp	r2, #0
 800b048:	dd03      	ble.n	800b052 <_dtoa_r+0xaa2>
 800b04a:	2b39      	cmp	r3, #57	@ 0x39
 800b04c:	d0ee      	beq.n	800b02c <_dtoa_r+0xa7c>
 800b04e:	3301      	adds	r3, #1
 800b050:	e7c9      	b.n	800afe6 <_dtoa_r+0xa36>
 800b052:	9a00      	ldr	r2, [sp, #0]
 800b054:	9908      	ldr	r1, [sp, #32]
 800b056:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b05a:	428a      	cmp	r2, r1
 800b05c:	d028      	beq.n	800b0b0 <_dtoa_r+0xb00>
 800b05e:	9902      	ldr	r1, [sp, #8]
 800b060:	2300      	movs	r3, #0
 800b062:	220a      	movs	r2, #10
 800b064:	4648      	mov	r0, r9
 800b066:	f000 f9d5 	bl	800b414 <__multadd>
 800b06a:	42af      	cmp	r7, r5
 800b06c:	9002      	str	r0, [sp, #8]
 800b06e:	f04f 0300 	mov.w	r3, #0
 800b072:	f04f 020a 	mov.w	r2, #10
 800b076:	4639      	mov	r1, r7
 800b078:	4648      	mov	r0, r9
 800b07a:	d107      	bne.n	800b08c <_dtoa_r+0xadc>
 800b07c:	f000 f9ca 	bl	800b414 <__multadd>
 800b080:	4607      	mov	r7, r0
 800b082:	4605      	mov	r5, r0
 800b084:	9b00      	ldr	r3, [sp, #0]
 800b086:	3301      	adds	r3, #1
 800b088:	9300      	str	r3, [sp, #0]
 800b08a:	e777      	b.n	800af7c <_dtoa_r+0x9cc>
 800b08c:	f000 f9c2 	bl	800b414 <__multadd>
 800b090:	4629      	mov	r1, r5
 800b092:	4607      	mov	r7, r0
 800b094:	2300      	movs	r3, #0
 800b096:	220a      	movs	r2, #10
 800b098:	4648      	mov	r0, r9
 800b09a:	f000 f9bb 	bl	800b414 <__multadd>
 800b09e:	4605      	mov	r5, r0
 800b0a0:	e7f0      	b.n	800b084 <_dtoa_r+0xad4>
 800b0a2:	f1bb 0f00 	cmp.w	fp, #0
 800b0a6:	bfcc      	ite	gt
 800b0a8:	465e      	movgt	r6, fp
 800b0aa:	2601      	movle	r6, #1
 800b0ac:	4456      	add	r6, sl
 800b0ae:	2700      	movs	r7, #0
 800b0b0:	9902      	ldr	r1, [sp, #8]
 800b0b2:	9300      	str	r3, [sp, #0]
 800b0b4:	2201      	movs	r2, #1
 800b0b6:	4648      	mov	r0, r9
 800b0b8:	f000 fb50 	bl	800b75c <__lshift>
 800b0bc:	4621      	mov	r1, r4
 800b0be:	9002      	str	r0, [sp, #8]
 800b0c0:	f000 fbb8 	bl	800b834 <__mcmp>
 800b0c4:	2800      	cmp	r0, #0
 800b0c6:	dcb4      	bgt.n	800b032 <_dtoa_r+0xa82>
 800b0c8:	d102      	bne.n	800b0d0 <_dtoa_r+0xb20>
 800b0ca:	9b00      	ldr	r3, [sp, #0]
 800b0cc:	07db      	lsls	r3, r3, #31
 800b0ce:	d4b0      	bmi.n	800b032 <_dtoa_r+0xa82>
 800b0d0:	4633      	mov	r3, r6
 800b0d2:	461e      	mov	r6, r3
 800b0d4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b0d8:	2a30      	cmp	r2, #48	@ 0x30
 800b0da:	d0fa      	beq.n	800b0d2 <_dtoa_r+0xb22>
 800b0dc:	e4b5      	b.n	800aa4a <_dtoa_r+0x49a>
 800b0de:	459a      	cmp	sl, r3
 800b0e0:	d1a8      	bne.n	800b034 <_dtoa_r+0xa84>
 800b0e2:	2331      	movs	r3, #49	@ 0x31
 800b0e4:	f108 0801 	add.w	r8, r8, #1
 800b0e8:	f88a 3000 	strb.w	r3, [sl]
 800b0ec:	e4ad      	b.n	800aa4a <_dtoa_r+0x49a>
 800b0ee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b0f0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b14c <_dtoa_r+0xb9c>
 800b0f4:	b11b      	cbz	r3, 800b0fe <_dtoa_r+0xb4e>
 800b0f6:	f10a 0308 	add.w	r3, sl, #8
 800b0fa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b0fc:	6013      	str	r3, [r2, #0]
 800b0fe:	4650      	mov	r0, sl
 800b100:	b017      	add	sp, #92	@ 0x5c
 800b102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b106:	9b07      	ldr	r3, [sp, #28]
 800b108:	2b01      	cmp	r3, #1
 800b10a:	f77f ae2e 	ble.w	800ad6a <_dtoa_r+0x7ba>
 800b10e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b110:	9308      	str	r3, [sp, #32]
 800b112:	2001      	movs	r0, #1
 800b114:	e64d      	b.n	800adb2 <_dtoa_r+0x802>
 800b116:	f1bb 0f00 	cmp.w	fp, #0
 800b11a:	f77f aed9 	ble.w	800aed0 <_dtoa_r+0x920>
 800b11e:	4656      	mov	r6, sl
 800b120:	9802      	ldr	r0, [sp, #8]
 800b122:	4621      	mov	r1, r4
 800b124:	f7ff f9bb 	bl	800a49e <quorem>
 800b128:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b12c:	f806 3b01 	strb.w	r3, [r6], #1
 800b130:	eba6 020a 	sub.w	r2, r6, sl
 800b134:	4593      	cmp	fp, r2
 800b136:	ddb4      	ble.n	800b0a2 <_dtoa_r+0xaf2>
 800b138:	9902      	ldr	r1, [sp, #8]
 800b13a:	2300      	movs	r3, #0
 800b13c:	220a      	movs	r2, #10
 800b13e:	4648      	mov	r0, r9
 800b140:	f000 f968 	bl	800b414 <__multadd>
 800b144:	9002      	str	r0, [sp, #8]
 800b146:	e7eb      	b.n	800b120 <_dtoa_r+0xb70>
 800b148:	0800c2fc 	.word	0x0800c2fc
 800b14c:	0800c280 	.word	0x0800c280

0800b150 <_free_r>:
 800b150:	b538      	push	{r3, r4, r5, lr}
 800b152:	4605      	mov	r5, r0
 800b154:	2900      	cmp	r1, #0
 800b156:	d041      	beq.n	800b1dc <_free_r+0x8c>
 800b158:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b15c:	1f0c      	subs	r4, r1, #4
 800b15e:	2b00      	cmp	r3, #0
 800b160:	bfb8      	it	lt
 800b162:	18e4      	addlt	r4, r4, r3
 800b164:	f000 f8e8 	bl	800b338 <__malloc_lock>
 800b168:	4a1d      	ldr	r2, [pc, #116]	@ (800b1e0 <_free_r+0x90>)
 800b16a:	6813      	ldr	r3, [r2, #0]
 800b16c:	b933      	cbnz	r3, 800b17c <_free_r+0x2c>
 800b16e:	6063      	str	r3, [r4, #4]
 800b170:	6014      	str	r4, [r2, #0]
 800b172:	4628      	mov	r0, r5
 800b174:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b178:	f000 b8e4 	b.w	800b344 <__malloc_unlock>
 800b17c:	42a3      	cmp	r3, r4
 800b17e:	d908      	bls.n	800b192 <_free_r+0x42>
 800b180:	6820      	ldr	r0, [r4, #0]
 800b182:	1821      	adds	r1, r4, r0
 800b184:	428b      	cmp	r3, r1
 800b186:	bf01      	itttt	eq
 800b188:	6819      	ldreq	r1, [r3, #0]
 800b18a:	685b      	ldreq	r3, [r3, #4]
 800b18c:	1809      	addeq	r1, r1, r0
 800b18e:	6021      	streq	r1, [r4, #0]
 800b190:	e7ed      	b.n	800b16e <_free_r+0x1e>
 800b192:	461a      	mov	r2, r3
 800b194:	685b      	ldr	r3, [r3, #4]
 800b196:	b10b      	cbz	r3, 800b19c <_free_r+0x4c>
 800b198:	42a3      	cmp	r3, r4
 800b19a:	d9fa      	bls.n	800b192 <_free_r+0x42>
 800b19c:	6811      	ldr	r1, [r2, #0]
 800b19e:	1850      	adds	r0, r2, r1
 800b1a0:	42a0      	cmp	r0, r4
 800b1a2:	d10b      	bne.n	800b1bc <_free_r+0x6c>
 800b1a4:	6820      	ldr	r0, [r4, #0]
 800b1a6:	4401      	add	r1, r0
 800b1a8:	1850      	adds	r0, r2, r1
 800b1aa:	4283      	cmp	r3, r0
 800b1ac:	6011      	str	r1, [r2, #0]
 800b1ae:	d1e0      	bne.n	800b172 <_free_r+0x22>
 800b1b0:	6818      	ldr	r0, [r3, #0]
 800b1b2:	685b      	ldr	r3, [r3, #4]
 800b1b4:	6053      	str	r3, [r2, #4]
 800b1b6:	4408      	add	r0, r1
 800b1b8:	6010      	str	r0, [r2, #0]
 800b1ba:	e7da      	b.n	800b172 <_free_r+0x22>
 800b1bc:	d902      	bls.n	800b1c4 <_free_r+0x74>
 800b1be:	230c      	movs	r3, #12
 800b1c0:	602b      	str	r3, [r5, #0]
 800b1c2:	e7d6      	b.n	800b172 <_free_r+0x22>
 800b1c4:	6820      	ldr	r0, [r4, #0]
 800b1c6:	1821      	adds	r1, r4, r0
 800b1c8:	428b      	cmp	r3, r1
 800b1ca:	bf04      	itt	eq
 800b1cc:	6819      	ldreq	r1, [r3, #0]
 800b1ce:	685b      	ldreq	r3, [r3, #4]
 800b1d0:	6063      	str	r3, [r4, #4]
 800b1d2:	bf04      	itt	eq
 800b1d4:	1809      	addeq	r1, r1, r0
 800b1d6:	6021      	streq	r1, [r4, #0]
 800b1d8:	6054      	str	r4, [r2, #4]
 800b1da:	e7ca      	b.n	800b172 <_free_r+0x22>
 800b1dc:	bd38      	pop	{r3, r4, r5, pc}
 800b1de:	bf00      	nop
 800b1e0:	200008b8 	.word	0x200008b8

0800b1e4 <malloc>:
 800b1e4:	4b02      	ldr	r3, [pc, #8]	@ (800b1f0 <malloc+0xc>)
 800b1e6:	4601      	mov	r1, r0
 800b1e8:	6818      	ldr	r0, [r3, #0]
 800b1ea:	f000 b825 	b.w	800b238 <_malloc_r>
 800b1ee:	bf00      	nop
 800b1f0:	20000018 	.word	0x20000018

0800b1f4 <sbrk_aligned>:
 800b1f4:	b570      	push	{r4, r5, r6, lr}
 800b1f6:	4e0f      	ldr	r6, [pc, #60]	@ (800b234 <sbrk_aligned+0x40>)
 800b1f8:	460c      	mov	r4, r1
 800b1fa:	6831      	ldr	r1, [r6, #0]
 800b1fc:	4605      	mov	r5, r0
 800b1fe:	b911      	cbnz	r1, 800b206 <sbrk_aligned+0x12>
 800b200:	f000 fe92 	bl	800bf28 <_sbrk_r>
 800b204:	6030      	str	r0, [r6, #0]
 800b206:	4621      	mov	r1, r4
 800b208:	4628      	mov	r0, r5
 800b20a:	f000 fe8d 	bl	800bf28 <_sbrk_r>
 800b20e:	1c43      	adds	r3, r0, #1
 800b210:	d103      	bne.n	800b21a <sbrk_aligned+0x26>
 800b212:	f04f 34ff 	mov.w	r4, #4294967295
 800b216:	4620      	mov	r0, r4
 800b218:	bd70      	pop	{r4, r5, r6, pc}
 800b21a:	1cc4      	adds	r4, r0, #3
 800b21c:	f024 0403 	bic.w	r4, r4, #3
 800b220:	42a0      	cmp	r0, r4
 800b222:	d0f8      	beq.n	800b216 <sbrk_aligned+0x22>
 800b224:	1a21      	subs	r1, r4, r0
 800b226:	4628      	mov	r0, r5
 800b228:	f000 fe7e 	bl	800bf28 <_sbrk_r>
 800b22c:	3001      	adds	r0, #1
 800b22e:	d1f2      	bne.n	800b216 <sbrk_aligned+0x22>
 800b230:	e7ef      	b.n	800b212 <sbrk_aligned+0x1e>
 800b232:	bf00      	nop
 800b234:	200008b4 	.word	0x200008b4

0800b238 <_malloc_r>:
 800b238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b23c:	1ccd      	adds	r5, r1, #3
 800b23e:	f025 0503 	bic.w	r5, r5, #3
 800b242:	3508      	adds	r5, #8
 800b244:	2d0c      	cmp	r5, #12
 800b246:	bf38      	it	cc
 800b248:	250c      	movcc	r5, #12
 800b24a:	2d00      	cmp	r5, #0
 800b24c:	4606      	mov	r6, r0
 800b24e:	db01      	blt.n	800b254 <_malloc_r+0x1c>
 800b250:	42a9      	cmp	r1, r5
 800b252:	d904      	bls.n	800b25e <_malloc_r+0x26>
 800b254:	230c      	movs	r3, #12
 800b256:	6033      	str	r3, [r6, #0]
 800b258:	2000      	movs	r0, #0
 800b25a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b25e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b334 <_malloc_r+0xfc>
 800b262:	f000 f869 	bl	800b338 <__malloc_lock>
 800b266:	f8d8 3000 	ldr.w	r3, [r8]
 800b26a:	461c      	mov	r4, r3
 800b26c:	bb44      	cbnz	r4, 800b2c0 <_malloc_r+0x88>
 800b26e:	4629      	mov	r1, r5
 800b270:	4630      	mov	r0, r6
 800b272:	f7ff ffbf 	bl	800b1f4 <sbrk_aligned>
 800b276:	1c43      	adds	r3, r0, #1
 800b278:	4604      	mov	r4, r0
 800b27a:	d158      	bne.n	800b32e <_malloc_r+0xf6>
 800b27c:	f8d8 4000 	ldr.w	r4, [r8]
 800b280:	4627      	mov	r7, r4
 800b282:	2f00      	cmp	r7, #0
 800b284:	d143      	bne.n	800b30e <_malloc_r+0xd6>
 800b286:	2c00      	cmp	r4, #0
 800b288:	d04b      	beq.n	800b322 <_malloc_r+0xea>
 800b28a:	6823      	ldr	r3, [r4, #0]
 800b28c:	4639      	mov	r1, r7
 800b28e:	4630      	mov	r0, r6
 800b290:	eb04 0903 	add.w	r9, r4, r3
 800b294:	f000 fe48 	bl	800bf28 <_sbrk_r>
 800b298:	4581      	cmp	r9, r0
 800b29a:	d142      	bne.n	800b322 <_malloc_r+0xea>
 800b29c:	6821      	ldr	r1, [r4, #0]
 800b29e:	1a6d      	subs	r5, r5, r1
 800b2a0:	4629      	mov	r1, r5
 800b2a2:	4630      	mov	r0, r6
 800b2a4:	f7ff ffa6 	bl	800b1f4 <sbrk_aligned>
 800b2a8:	3001      	adds	r0, #1
 800b2aa:	d03a      	beq.n	800b322 <_malloc_r+0xea>
 800b2ac:	6823      	ldr	r3, [r4, #0]
 800b2ae:	442b      	add	r3, r5
 800b2b0:	6023      	str	r3, [r4, #0]
 800b2b2:	f8d8 3000 	ldr.w	r3, [r8]
 800b2b6:	685a      	ldr	r2, [r3, #4]
 800b2b8:	bb62      	cbnz	r2, 800b314 <_malloc_r+0xdc>
 800b2ba:	f8c8 7000 	str.w	r7, [r8]
 800b2be:	e00f      	b.n	800b2e0 <_malloc_r+0xa8>
 800b2c0:	6822      	ldr	r2, [r4, #0]
 800b2c2:	1b52      	subs	r2, r2, r5
 800b2c4:	d420      	bmi.n	800b308 <_malloc_r+0xd0>
 800b2c6:	2a0b      	cmp	r2, #11
 800b2c8:	d917      	bls.n	800b2fa <_malloc_r+0xc2>
 800b2ca:	1961      	adds	r1, r4, r5
 800b2cc:	42a3      	cmp	r3, r4
 800b2ce:	6025      	str	r5, [r4, #0]
 800b2d0:	bf18      	it	ne
 800b2d2:	6059      	strne	r1, [r3, #4]
 800b2d4:	6863      	ldr	r3, [r4, #4]
 800b2d6:	bf08      	it	eq
 800b2d8:	f8c8 1000 	streq.w	r1, [r8]
 800b2dc:	5162      	str	r2, [r4, r5]
 800b2de:	604b      	str	r3, [r1, #4]
 800b2e0:	4630      	mov	r0, r6
 800b2e2:	f000 f82f 	bl	800b344 <__malloc_unlock>
 800b2e6:	f104 000b 	add.w	r0, r4, #11
 800b2ea:	1d23      	adds	r3, r4, #4
 800b2ec:	f020 0007 	bic.w	r0, r0, #7
 800b2f0:	1ac2      	subs	r2, r0, r3
 800b2f2:	bf1c      	itt	ne
 800b2f4:	1a1b      	subne	r3, r3, r0
 800b2f6:	50a3      	strne	r3, [r4, r2]
 800b2f8:	e7af      	b.n	800b25a <_malloc_r+0x22>
 800b2fa:	6862      	ldr	r2, [r4, #4]
 800b2fc:	42a3      	cmp	r3, r4
 800b2fe:	bf0c      	ite	eq
 800b300:	f8c8 2000 	streq.w	r2, [r8]
 800b304:	605a      	strne	r2, [r3, #4]
 800b306:	e7eb      	b.n	800b2e0 <_malloc_r+0xa8>
 800b308:	4623      	mov	r3, r4
 800b30a:	6864      	ldr	r4, [r4, #4]
 800b30c:	e7ae      	b.n	800b26c <_malloc_r+0x34>
 800b30e:	463c      	mov	r4, r7
 800b310:	687f      	ldr	r7, [r7, #4]
 800b312:	e7b6      	b.n	800b282 <_malloc_r+0x4a>
 800b314:	461a      	mov	r2, r3
 800b316:	685b      	ldr	r3, [r3, #4]
 800b318:	42a3      	cmp	r3, r4
 800b31a:	d1fb      	bne.n	800b314 <_malloc_r+0xdc>
 800b31c:	2300      	movs	r3, #0
 800b31e:	6053      	str	r3, [r2, #4]
 800b320:	e7de      	b.n	800b2e0 <_malloc_r+0xa8>
 800b322:	230c      	movs	r3, #12
 800b324:	6033      	str	r3, [r6, #0]
 800b326:	4630      	mov	r0, r6
 800b328:	f000 f80c 	bl	800b344 <__malloc_unlock>
 800b32c:	e794      	b.n	800b258 <_malloc_r+0x20>
 800b32e:	6005      	str	r5, [r0, #0]
 800b330:	e7d6      	b.n	800b2e0 <_malloc_r+0xa8>
 800b332:	bf00      	nop
 800b334:	200008b8 	.word	0x200008b8

0800b338 <__malloc_lock>:
 800b338:	4801      	ldr	r0, [pc, #4]	@ (800b340 <__malloc_lock+0x8>)
 800b33a:	f7ff b8ae 	b.w	800a49a <__retarget_lock_acquire_recursive>
 800b33e:	bf00      	nop
 800b340:	200008b0 	.word	0x200008b0

0800b344 <__malloc_unlock>:
 800b344:	4801      	ldr	r0, [pc, #4]	@ (800b34c <__malloc_unlock+0x8>)
 800b346:	f7ff b8a9 	b.w	800a49c <__retarget_lock_release_recursive>
 800b34a:	bf00      	nop
 800b34c:	200008b0 	.word	0x200008b0

0800b350 <_Balloc>:
 800b350:	b570      	push	{r4, r5, r6, lr}
 800b352:	69c6      	ldr	r6, [r0, #28]
 800b354:	4604      	mov	r4, r0
 800b356:	460d      	mov	r5, r1
 800b358:	b976      	cbnz	r6, 800b378 <_Balloc+0x28>
 800b35a:	2010      	movs	r0, #16
 800b35c:	f7ff ff42 	bl	800b1e4 <malloc>
 800b360:	4602      	mov	r2, r0
 800b362:	61e0      	str	r0, [r4, #28]
 800b364:	b920      	cbnz	r0, 800b370 <_Balloc+0x20>
 800b366:	4b18      	ldr	r3, [pc, #96]	@ (800b3c8 <_Balloc+0x78>)
 800b368:	4818      	ldr	r0, [pc, #96]	@ (800b3cc <_Balloc+0x7c>)
 800b36a:	216b      	movs	r1, #107	@ 0x6b
 800b36c:	f000 fdfa 	bl	800bf64 <__assert_func>
 800b370:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b374:	6006      	str	r6, [r0, #0]
 800b376:	60c6      	str	r6, [r0, #12]
 800b378:	69e6      	ldr	r6, [r4, #28]
 800b37a:	68f3      	ldr	r3, [r6, #12]
 800b37c:	b183      	cbz	r3, 800b3a0 <_Balloc+0x50>
 800b37e:	69e3      	ldr	r3, [r4, #28]
 800b380:	68db      	ldr	r3, [r3, #12]
 800b382:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b386:	b9b8      	cbnz	r0, 800b3b8 <_Balloc+0x68>
 800b388:	2101      	movs	r1, #1
 800b38a:	fa01 f605 	lsl.w	r6, r1, r5
 800b38e:	1d72      	adds	r2, r6, #5
 800b390:	0092      	lsls	r2, r2, #2
 800b392:	4620      	mov	r0, r4
 800b394:	f000 fe04 	bl	800bfa0 <_calloc_r>
 800b398:	b160      	cbz	r0, 800b3b4 <_Balloc+0x64>
 800b39a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b39e:	e00e      	b.n	800b3be <_Balloc+0x6e>
 800b3a0:	2221      	movs	r2, #33	@ 0x21
 800b3a2:	2104      	movs	r1, #4
 800b3a4:	4620      	mov	r0, r4
 800b3a6:	f000 fdfb 	bl	800bfa0 <_calloc_r>
 800b3aa:	69e3      	ldr	r3, [r4, #28]
 800b3ac:	60f0      	str	r0, [r6, #12]
 800b3ae:	68db      	ldr	r3, [r3, #12]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d1e4      	bne.n	800b37e <_Balloc+0x2e>
 800b3b4:	2000      	movs	r0, #0
 800b3b6:	bd70      	pop	{r4, r5, r6, pc}
 800b3b8:	6802      	ldr	r2, [r0, #0]
 800b3ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b3be:	2300      	movs	r3, #0
 800b3c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b3c4:	e7f7      	b.n	800b3b6 <_Balloc+0x66>
 800b3c6:	bf00      	nop
 800b3c8:	0800c28d 	.word	0x0800c28d
 800b3cc:	0800c30d 	.word	0x0800c30d

0800b3d0 <_Bfree>:
 800b3d0:	b570      	push	{r4, r5, r6, lr}
 800b3d2:	69c6      	ldr	r6, [r0, #28]
 800b3d4:	4605      	mov	r5, r0
 800b3d6:	460c      	mov	r4, r1
 800b3d8:	b976      	cbnz	r6, 800b3f8 <_Bfree+0x28>
 800b3da:	2010      	movs	r0, #16
 800b3dc:	f7ff ff02 	bl	800b1e4 <malloc>
 800b3e0:	4602      	mov	r2, r0
 800b3e2:	61e8      	str	r0, [r5, #28]
 800b3e4:	b920      	cbnz	r0, 800b3f0 <_Bfree+0x20>
 800b3e6:	4b09      	ldr	r3, [pc, #36]	@ (800b40c <_Bfree+0x3c>)
 800b3e8:	4809      	ldr	r0, [pc, #36]	@ (800b410 <_Bfree+0x40>)
 800b3ea:	218f      	movs	r1, #143	@ 0x8f
 800b3ec:	f000 fdba 	bl	800bf64 <__assert_func>
 800b3f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b3f4:	6006      	str	r6, [r0, #0]
 800b3f6:	60c6      	str	r6, [r0, #12]
 800b3f8:	b13c      	cbz	r4, 800b40a <_Bfree+0x3a>
 800b3fa:	69eb      	ldr	r3, [r5, #28]
 800b3fc:	6862      	ldr	r2, [r4, #4]
 800b3fe:	68db      	ldr	r3, [r3, #12]
 800b400:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b404:	6021      	str	r1, [r4, #0]
 800b406:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b40a:	bd70      	pop	{r4, r5, r6, pc}
 800b40c:	0800c28d 	.word	0x0800c28d
 800b410:	0800c30d 	.word	0x0800c30d

0800b414 <__multadd>:
 800b414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b418:	690d      	ldr	r5, [r1, #16]
 800b41a:	4607      	mov	r7, r0
 800b41c:	460c      	mov	r4, r1
 800b41e:	461e      	mov	r6, r3
 800b420:	f101 0c14 	add.w	ip, r1, #20
 800b424:	2000      	movs	r0, #0
 800b426:	f8dc 3000 	ldr.w	r3, [ip]
 800b42a:	b299      	uxth	r1, r3
 800b42c:	fb02 6101 	mla	r1, r2, r1, r6
 800b430:	0c1e      	lsrs	r6, r3, #16
 800b432:	0c0b      	lsrs	r3, r1, #16
 800b434:	fb02 3306 	mla	r3, r2, r6, r3
 800b438:	b289      	uxth	r1, r1
 800b43a:	3001      	adds	r0, #1
 800b43c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b440:	4285      	cmp	r5, r0
 800b442:	f84c 1b04 	str.w	r1, [ip], #4
 800b446:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b44a:	dcec      	bgt.n	800b426 <__multadd+0x12>
 800b44c:	b30e      	cbz	r6, 800b492 <__multadd+0x7e>
 800b44e:	68a3      	ldr	r3, [r4, #8]
 800b450:	42ab      	cmp	r3, r5
 800b452:	dc19      	bgt.n	800b488 <__multadd+0x74>
 800b454:	6861      	ldr	r1, [r4, #4]
 800b456:	4638      	mov	r0, r7
 800b458:	3101      	adds	r1, #1
 800b45a:	f7ff ff79 	bl	800b350 <_Balloc>
 800b45e:	4680      	mov	r8, r0
 800b460:	b928      	cbnz	r0, 800b46e <__multadd+0x5a>
 800b462:	4602      	mov	r2, r0
 800b464:	4b0c      	ldr	r3, [pc, #48]	@ (800b498 <__multadd+0x84>)
 800b466:	480d      	ldr	r0, [pc, #52]	@ (800b49c <__multadd+0x88>)
 800b468:	21ba      	movs	r1, #186	@ 0xba
 800b46a:	f000 fd7b 	bl	800bf64 <__assert_func>
 800b46e:	6922      	ldr	r2, [r4, #16]
 800b470:	3202      	adds	r2, #2
 800b472:	f104 010c 	add.w	r1, r4, #12
 800b476:	0092      	lsls	r2, r2, #2
 800b478:	300c      	adds	r0, #12
 800b47a:	f000 fd65 	bl	800bf48 <memcpy>
 800b47e:	4621      	mov	r1, r4
 800b480:	4638      	mov	r0, r7
 800b482:	f7ff ffa5 	bl	800b3d0 <_Bfree>
 800b486:	4644      	mov	r4, r8
 800b488:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b48c:	3501      	adds	r5, #1
 800b48e:	615e      	str	r6, [r3, #20]
 800b490:	6125      	str	r5, [r4, #16]
 800b492:	4620      	mov	r0, r4
 800b494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b498:	0800c2fc 	.word	0x0800c2fc
 800b49c:	0800c30d 	.word	0x0800c30d

0800b4a0 <__hi0bits>:
 800b4a0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	bf36      	itet	cc
 800b4a8:	0403      	lslcc	r3, r0, #16
 800b4aa:	2000      	movcs	r0, #0
 800b4ac:	2010      	movcc	r0, #16
 800b4ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b4b2:	bf3c      	itt	cc
 800b4b4:	021b      	lslcc	r3, r3, #8
 800b4b6:	3008      	addcc	r0, #8
 800b4b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b4bc:	bf3c      	itt	cc
 800b4be:	011b      	lslcc	r3, r3, #4
 800b4c0:	3004      	addcc	r0, #4
 800b4c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4c6:	bf3c      	itt	cc
 800b4c8:	009b      	lslcc	r3, r3, #2
 800b4ca:	3002      	addcc	r0, #2
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	db05      	blt.n	800b4dc <__hi0bits+0x3c>
 800b4d0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b4d4:	f100 0001 	add.w	r0, r0, #1
 800b4d8:	bf08      	it	eq
 800b4da:	2020      	moveq	r0, #32
 800b4dc:	4770      	bx	lr

0800b4de <__lo0bits>:
 800b4de:	6803      	ldr	r3, [r0, #0]
 800b4e0:	4602      	mov	r2, r0
 800b4e2:	f013 0007 	ands.w	r0, r3, #7
 800b4e6:	d00b      	beq.n	800b500 <__lo0bits+0x22>
 800b4e8:	07d9      	lsls	r1, r3, #31
 800b4ea:	d421      	bmi.n	800b530 <__lo0bits+0x52>
 800b4ec:	0798      	lsls	r0, r3, #30
 800b4ee:	bf49      	itett	mi
 800b4f0:	085b      	lsrmi	r3, r3, #1
 800b4f2:	089b      	lsrpl	r3, r3, #2
 800b4f4:	2001      	movmi	r0, #1
 800b4f6:	6013      	strmi	r3, [r2, #0]
 800b4f8:	bf5c      	itt	pl
 800b4fa:	6013      	strpl	r3, [r2, #0]
 800b4fc:	2002      	movpl	r0, #2
 800b4fe:	4770      	bx	lr
 800b500:	b299      	uxth	r1, r3
 800b502:	b909      	cbnz	r1, 800b508 <__lo0bits+0x2a>
 800b504:	0c1b      	lsrs	r3, r3, #16
 800b506:	2010      	movs	r0, #16
 800b508:	b2d9      	uxtb	r1, r3
 800b50a:	b909      	cbnz	r1, 800b510 <__lo0bits+0x32>
 800b50c:	3008      	adds	r0, #8
 800b50e:	0a1b      	lsrs	r3, r3, #8
 800b510:	0719      	lsls	r1, r3, #28
 800b512:	bf04      	itt	eq
 800b514:	091b      	lsreq	r3, r3, #4
 800b516:	3004      	addeq	r0, #4
 800b518:	0799      	lsls	r1, r3, #30
 800b51a:	bf04      	itt	eq
 800b51c:	089b      	lsreq	r3, r3, #2
 800b51e:	3002      	addeq	r0, #2
 800b520:	07d9      	lsls	r1, r3, #31
 800b522:	d403      	bmi.n	800b52c <__lo0bits+0x4e>
 800b524:	085b      	lsrs	r3, r3, #1
 800b526:	f100 0001 	add.w	r0, r0, #1
 800b52a:	d003      	beq.n	800b534 <__lo0bits+0x56>
 800b52c:	6013      	str	r3, [r2, #0]
 800b52e:	4770      	bx	lr
 800b530:	2000      	movs	r0, #0
 800b532:	4770      	bx	lr
 800b534:	2020      	movs	r0, #32
 800b536:	4770      	bx	lr

0800b538 <__i2b>:
 800b538:	b510      	push	{r4, lr}
 800b53a:	460c      	mov	r4, r1
 800b53c:	2101      	movs	r1, #1
 800b53e:	f7ff ff07 	bl	800b350 <_Balloc>
 800b542:	4602      	mov	r2, r0
 800b544:	b928      	cbnz	r0, 800b552 <__i2b+0x1a>
 800b546:	4b05      	ldr	r3, [pc, #20]	@ (800b55c <__i2b+0x24>)
 800b548:	4805      	ldr	r0, [pc, #20]	@ (800b560 <__i2b+0x28>)
 800b54a:	f240 1145 	movw	r1, #325	@ 0x145
 800b54e:	f000 fd09 	bl	800bf64 <__assert_func>
 800b552:	2301      	movs	r3, #1
 800b554:	6144      	str	r4, [r0, #20]
 800b556:	6103      	str	r3, [r0, #16]
 800b558:	bd10      	pop	{r4, pc}
 800b55a:	bf00      	nop
 800b55c:	0800c2fc 	.word	0x0800c2fc
 800b560:	0800c30d 	.word	0x0800c30d

0800b564 <__multiply>:
 800b564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b568:	4617      	mov	r7, r2
 800b56a:	690a      	ldr	r2, [r1, #16]
 800b56c:	693b      	ldr	r3, [r7, #16]
 800b56e:	429a      	cmp	r2, r3
 800b570:	bfa8      	it	ge
 800b572:	463b      	movge	r3, r7
 800b574:	4689      	mov	r9, r1
 800b576:	bfa4      	itt	ge
 800b578:	460f      	movge	r7, r1
 800b57a:	4699      	movge	r9, r3
 800b57c:	693d      	ldr	r5, [r7, #16]
 800b57e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	6879      	ldr	r1, [r7, #4]
 800b586:	eb05 060a 	add.w	r6, r5, sl
 800b58a:	42b3      	cmp	r3, r6
 800b58c:	b085      	sub	sp, #20
 800b58e:	bfb8      	it	lt
 800b590:	3101      	addlt	r1, #1
 800b592:	f7ff fedd 	bl	800b350 <_Balloc>
 800b596:	b930      	cbnz	r0, 800b5a6 <__multiply+0x42>
 800b598:	4602      	mov	r2, r0
 800b59a:	4b41      	ldr	r3, [pc, #260]	@ (800b6a0 <__multiply+0x13c>)
 800b59c:	4841      	ldr	r0, [pc, #260]	@ (800b6a4 <__multiply+0x140>)
 800b59e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b5a2:	f000 fcdf 	bl	800bf64 <__assert_func>
 800b5a6:	f100 0414 	add.w	r4, r0, #20
 800b5aa:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b5ae:	4623      	mov	r3, r4
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	4573      	cmp	r3, lr
 800b5b4:	d320      	bcc.n	800b5f8 <__multiply+0x94>
 800b5b6:	f107 0814 	add.w	r8, r7, #20
 800b5ba:	f109 0114 	add.w	r1, r9, #20
 800b5be:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b5c2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b5c6:	9302      	str	r3, [sp, #8]
 800b5c8:	1beb      	subs	r3, r5, r7
 800b5ca:	3b15      	subs	r3, #21
 800b5cc:	f023 0303 	bic.w	r3, r3, #3
 800b5d0:	3304      	adds	r3, #4
 800b5d2:	3715      	adds	r7, #21
 800b5d4:	42bd      	cmp	r5, r7
 800b5d6:	bf38      	it	cc
 800b5d8:	2304      	movcc	r3, #4
 800b5da:	9301      	str	r3, [sp, #4]
 800b5dc:	9b02      	ldr	r3, [sp, #8]
 800b5de:	9103      	str	r1, [sp, #12]
 800b5e0:	428b      	cmp	r3, r1
 800b5e2:	d80c      	bhi.n	800b5fe <__multiply+0x9a>
 800b5e4:	2e00      	cmp	r6, #0
 800b5e6:	dd03      	ble.n	800b5f0 <__multiply+0x8c>
 800b5e8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d055      	beq.n	800b69c <__multiply+0x138>
 800b5f0:	6106      	str	r6, [r0, #16]
 800b5f2:	b005      	add	sp, #20
 800b5f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5f8:	f843 2b04 	str.w	r2, [r3], #4
 800b5fc:	e7d9      	b.n	800b5b2 <__multiply+0x4e>
 800b5fe:	f8b1 a000 	ldrh.w	sl, [r1]
 800b602:	f1ba 0f00 	cmp.w	sl, #0
 800b606:	d01f      	beq.n	800b648 <__multiply+0xe4>
 800b608:	46c4      	mov	ip, r8
 800b60a:	46a1      	mov	r9, r4
 800b60c:	2700      	movs	r7, #0
 800b60e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b612:	f8d9 3000 	ldr.w	r3, [r9]
 800b616:	fa1f fb82 	uxth.w	fp, r2
 800b61a:	b29b      	uxth	r3, r3
 800b61c:	fb0a 330b 	mla	r3, sl, fp, r3
 800b620:	443b      	add	r3, r7
 800b622:	f8d9 7000 	ldr.w	r7, [r9]
 800b626:	0c12      	lsrs	r2, r2, #16
 800b628:	0c3f      	lsrs	r7, r7, #16
 800b62a:	fb0a 7202 	mla	r2, sl, r2, r7
 800b62e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b632:	b29b      	uxth	r3, r3
 800b634:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b638:	4565      	cmp	r5, ip
 800b63a:	f849 3b04 	str.w	r3, [r9], #4
 800b63e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b642:	d8e4      	bhi.n	800b60e <__multiply+0xaa>
 800b644:	9b01      	ldr	r3, [sp, #4]
 800b646:	50e7      	str	r7, [r4, r3]
 800b648:	9b03      	ldr	r3, [sp, #12]
 800b64a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b64e:	3104      	adds	r1, #4
 800b650:	f1b9 0f00 	cmp.w	r9, #0
 800b654:	d020      	beq.n	800b698 <__multiply+0x134>
 800b656:	6823      	ldr	r3, [r4, #0]
 800b658:	4647      	mov	r7, r8
 800b65a:	46a4      	mov	ip, r4
 800b65c:	f04f 0a00 	mov.w	sl, #0
 800b660:	f8b7 b000 	ldrh.w	fp, [r7]
 800b664:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b668:	fb09 220b 	mla	r2, r9, fp, r2
 800b66c:	4452      	add	r2, sl
 800b66e:	b29b      	uxth	r3, r3
 800b670:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b674:	f84c 3b04 	str.w	r3, [ip], #4
 800b678:	f857 3b04 	ldr.w	r3, [r7], #4
 800b67c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b680:	f8bc 3000 	ldrh.w	r3, [ip]
 800b684:	fb09 330a 	mla	r3, r9, sl, r3
 800b688:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b68c:	42bd      	cmp	r5, r7
 800b68e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b692:	d8e5      	bhi.n	800b660 <__multiply+0xfc>
 800b694:	9a01      	ldr	r2, [sp, #4]
 800b696:	50a3      	str	r3, [r4, r2]
 800b698:	3404      	adds	r4, #4
 800b69a:	e79f      	b.n	800b5dc <__multiply+0x78>
 800b69c:	3e01      	subs	r6, #1
 800b69e:	e7a1      	b.n	800b5e4 <__multiply+0x80>
 800b6a0:	0800c2fc 	.word	0x0800c2fc
 800b6a4:	0800c30d 	.word	0x0800c30d

0800b6a8 <__pow5mult>:
 800b6a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6ac:	4615      	mov	r5, r2
 800b6ae:	f012 0203 	ands.w	r2, r2, #3
 800b6b2:	4607      	mov	r7, r0
 800b6b4:	460e      	mov	r6, r1
 800b6b6:	d007      	beq.n	800b6c8 <__pow5mult+0x20>
 800b6b8:	4c25      	ldr	r4, [pc, #148]	@ (800b750 <__pow5mult+0xa8>)
 800b6ba:	3a01      	subs	r2, #1
 800b6bc:	2300      	movs	r3, #0
 800b6be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b6c2:	f7ff fea7 	bl	800b414 <__multadd>
 800b6c6:	4606      	mov	r6, r0
 800b6c8:	10ad      	asrs	r5, r5, #2
 800b6ca:	d03d      	beq.n	800b748 <__pow5mult+0xa0>
 800b6cc:	69fc      	ldr	r4, [r7, #28]
 800b6ce:	b97c      	cbnz	r4, 800b6f0 <__pow5mult+0x48>
 800b6d0:	2010      	movs	r0, #16
 800b6d2:	f7ff fd87 	bl	800b1e4 <malloc>
 800b6d6:	4602      	mov	r2, r0
 800b6d8:	61f8      	str	r0, [r7, #28]
 800b6da:	b928      	cbnz	r0, 800b6e8 <__pow5mult+0x40>
 800b6dc:	4b1d      	ldr	r3, [pc, #116]	@ (800b754 <__pow5mult+0xac>)
 800b6de:	481e      	ldr	r0, [pc, #120]	@ (800b758 <__pow5mult+0xb0>)
 800b6e0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b6e4:	f000 fc3e 	bl	800bf64 <__assert_func>
 800b6e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b6ec:	6004      	str	r4, [r0, #0]
 800b6ee:	60c4      	str	r4, [r0, #12]
 800b6f0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b6f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b6f8:	b94c      	cbnz	r4, 800b70e <__pow5mult+0x66>
 800b6fa:	f240 2171 	movw	r1, #625	@ 0x271
 800b6fe:	4638      	mov	r0, r7
 800b700:	f7ff ff1a 	bl	800b538 <__i2b>
 800b704:	2300      	movs	r3, #0
 800b706:	f8c8 0008 	str.w	r0, [r8, #8]
 800b70a:	4604      	mov	r4, r0
 800b70c:	6003      	str	r3, [r0, #0]
 800b70e:	f04f 0900 	mov.w	r9, #0
 800b712:	07eb      	lsls	r3, r5, #31
 800b714:	d50a      	bpl.n	800b72c <__pow5mult+0x84>
 800b716:	4631      	mov	r1, r6
 800b718:	4622      	mov	r2, r4
 800b71a:	4638      	mov	r0, r7
 800b71c:	f7ff ff22 	bl	800b564 <__multiply>
 800b720:	4631      	mov	r1, r6
 800b722:	4680      	mov	r8, r0
 800b724:	4638      	mov	r0, r7
 800b726:	f7ff fe53 	bl	800b3d0 <_Bfree>
 800b72a:	4646      	mov	r6, r8
 800b72c:	106d      	asrs	r5, r5, #1
 800b72e:	d00b      	beq.n	800b748 <__pow5mult+0xa0>
 800b730:	6820      	ldr	r0, [r4, #0]
 800b732:	b938      	cbnz	r0, 800b744 <__pow5mult+0x9c>
 800b734:	4622      	mov	r2, r4
 800b736:	4621      	mov	r1, r4
 800b738:	4638      	mov	r0, r7
 800b73a:	f7ff ff13 	bl	800b564 <__multiply>
 800b73e:	6020      	str	r0, [r4, #0]
 800b740:	f8c0 9000 	str.w	r9, [r0]
 800b744:	4604      	mov	r4, r0
 800b746:	e7e4      	b.n	800b712 <__pow5mult+0x6a>
 800b748:	4630      	mov	r0, r6
 800b74a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b74e:	bf00      	nop
 800b750:	0800c3c0 	.word	0x0800c3c0
 800b754:	0800c28d 	.word	0x0800c28d
 800b758:	0800c30d 	.word	0x0800c30d

0800b75c <__lshift>:
 800b75c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b760:	460c      	mov	r4, r1
 800b762:	6849      	ldr	r1, [r1, #4]
 800b764:	6923      	ldr	r3, [r4, #16]
 800b766:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b76a:	68a3      	ldr	r3, [r4, #8]
 800b76c:	4607      	mov	r7, r0
 800b76e:	4691      	mov	r9, r2
 800b770:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b774:	f108 0601 	add.w	r6, r8, #1
 800b778:	42b3      	cmp	r3, r6
 800b77a:	db0b      	blt.n	800b794 <__lshift+0x38>
 800b77c:	4638      	mov	r0, r7
 800b77e:	f7ff fde7 	bl	800b350 <_Balloc>
 800b782:	4605      	mov	r5, r0
 800b784:	b948      	cbnz	r0, 800b79a <__lshift+0x3e>
 800b786:	4602      	mov	r2, r0
 800b788:	4b28      	ldr	r3, [pc, #160]	@ (800b82c <__lshift+0xd0>)
 800b78a:	4829      	ldr	r0, [pc, #164]	@ (800b830 <__lshift+0xd4>)
 800b78c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b790:	f000 fbe8 	bl	800bf64 <__assert_func>
 800b794:	3101      	adds	r1, #1
 800b796:	005b      	lsls	r3, r3, #1
 800b798:	e7ee      	b.n	800b778 <__lshift+0x1c>
 800b79a:	2300      	movs	r3, #0
 800b79c:	f100 0114 	add.w	r1, r0, #20
 800b7a0:	f100 0210 	add.w	r2, r0, #16
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	4553      	cmp	r3, sl
 800b7a8:	db33      	blt.n	800b812 <__lshift+0xb6>
 800b7aa:	6920      	ldr	r0, [r4, #16]
 800b7ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b7b0:	f104 0314 	add.w	r3, r4, #20
 800b7b4:	f019 091f 	ands.w	r9, r9, #31
 800b7b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b7bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b7c0:	d02b      	beq.n	800b81a <__lshift+0xbe>
 800b7c2:	f1c9 0e20 	rsb	lr, r9, #32
 800b7c6:	468a      	mov	sl, r1
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	6818      	ldr	r0, [r3, #0]
 800b7cc:	fa00 f009 	lsl.w	r0, r0, r9
 800b7d0:	4310      	orrs	r0, r2
 800b7d2:	f84a 0b04 	str.w	r0, [sl], #4
 800b7d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7da:	459c      	cmp	ip, r3
 800b7dc:	fa22 f20e 	lsr.w	r2, r2, lr
 800b7e0:	d8f3      	bhi.n	800b7ca <__lshift+0x6e>
 800b7e2:	ebac 0304 	sub.w	r3, ip, r4
 800b7e6:	3b15      	subs	r3, #21
 800b7e8:	f023 0303 	bic.w	r3, r3, #3
 800b7ec:	3304      	adds	r3, #4
 800b7ee:	f104 0015 	add.w	r0, r4, #21
 800b7f2:	4560      	cmp	r0, ip
 800b7f4:	bf88      	it	hi
 800b7f6:	2304      	movhi	r3, #4
 800b7f8:	50ca      	str	r2, [r1, r3]
 800b7fa:	b10a      	cbz	r2, 800b800 <__lshift+0xa4>
 800b7fc:	f108 0602 	add.w	r6, r8, #2
 800b800:	3e01      	subs	r6, #1
 800b802:	4638      	mov	r0, r7
 800b804:	612e      	str	r6, [r5, #16]
 800b806:	4621      	mov	r1, r4
 800b808:	f7ff fde2 	bl	800b3d0 <_Bfree>
 800b80c:	4628      	mov	r0, r5
 800b80e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b812:	f842 0f04 	str.w	r0, [r2, #4]!
 800b816:	3301      	adds	r3, #1
 800b818:	e7c5      	b.n	800b7a6 <__lshift+0x4a>
 800b81a:	3904      	subs	r1, #4
 800b81c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b820:	f841 2f04 	str.w	r2, [r1, #4]!
 800b824:	459c      	cmp	ip, r3
 800b826:	d8f9      	bhi.n	800b81c <__lshift+0xc0>
 800b828:	e7ea      	b.n	800b800 <__lshift+0xa4>
 800b82a:	bf00      	nop
 800b82c:	0800c2fc 	.word	0x0800c2fc
 800b830:	0800c30d 	.word	0x0800c30d

0800b834 <__mcmp>:
 800b834:	690a      	ldr	r2, [r1, #16]
 800b836:	4603      	mov	r3, r0
 800b838:	6900      	ldr	r0, [r0, #16]
 800b83a:	1a80      	subs	r0, r0, r2
 800b83c:	b530      	push	{r4, r5, lr}
 800b83e:	d10e      	bne.n	800b85e <__mcmp+0x2a>
 800b840:	3314      	adds	r3, #20
 800b842:	3114      	adds	r1, #20
 800b844:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b848:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b84c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b850:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b854:	4295      	cmp	r5, r2
 800b856:	d003      	beq.n	800b860 <__mcmp+0x2c>
 800b858:	d205      	bcs.n	800b866 <__mcmp+0x32>
 800b85a:	f04f 30ff 	mov.w	r0, #4294967295
 800b85e:	bd30      	pop	{r4, r5, pc}
 800b860:	42a3      	cmp	r3, r4
 800b862:	d3f3      	bcc.n	800b84c <__mcmp+0x18>
 800b864:	e7fb      	b.n	800b85e <__mcmp+0x2a>
 800b866:	2001      	movs	r0, #1
 800b868:	e7f9      	b.n	800b85e <__mcmp+0x2a>
	...

0800b86c <__mdiff>:
 800b86c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b870:	4689      	mov	r9, r1
 800b872:	4606      	mov	r6, r0
 800b874:	4611      	mov	r1, r2
 800b876:	4648      	mov	r0, r9
 800b878:	4614      	mov	r4, r2
 800b87a:	f7ff ffdb 	bl	800b834 <__mcmp>
 800b87e:	1e05      	subs	r5, r0, #0
 800b880:	d112      	bne.n	800b8a8 <__mdiff+0x3c>
 800b882:	4629      	mov	r1, r5
 800b884:	4630      	mov	r0, r6
 800b886:	f7ff fd63 	bl	800b350 <_Balloc>
 800b88a:	4602      	mov	r2, r0
 800b88c:	b928      	cbnz	r0, 800b89a <__mdiff+0x2e>
 800b88e:	4b3f      	ldr	r3, [pc, #252]	@ (800b98c <__mdiff+0x120>)
 800b890:	f240 2137 	movw	r1, #567	@ 0x237
 800b894:	483e      	ldr	r0, [pc, #248]	@ (800b990 <__mdiff+0x124>)
 800b896:	f000 fb65 	bl	800bf64 <__assert_func>
 800b89a:	2301      	movs	r3, #1
 800b89c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b8a0:	4610      	mov	r0, r2
 800b8a2:	b003      	add	sp, #12
 800b8a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8a8:	bfbc      	itt	lt
 800b8aa:	464b      	movlt	r3, r9
 800b8ac:	46a1      	movlt	r9, r4
 800b8ae:	4630      	mov	r0, r6
 800b8b0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b8b4:	bfba      	itte	lt
 800b8b6:	461c      	movlt	r4, r3
 800b8b8:	2501      	movlt	r5, #1
 800b8ba:	2500      	movge	r5, #0
 800b8bc:	f7ff fd48 	bl	800b350 <_Balloc>
 800b8c0:	4602      	mov	r2, r0
 800b8c2:	b918      	cbnz	r0, 800b8cc <__mdiff+0x60>
 800b8c4:	4b31      	ldr	r3, [pc, #196]	@ (800b98c <__mdiff+0x120>)
 800b8c6:	f240 2145 	movw	r1, #581	@ 0x245
 800b8ca:	e7e3      	b.n	800b894 <__mdiff+0x28>
 800b8cc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b8d0:	6926      	ldr	r6, [r4, #16]
 800b8d2:	60c5      	str	r5, [r0, #12]
 800b8d4:	f109 0310 	add.w	r3, r9, #16
 800b8d8:	f109 0514 	add.w	r5, r9, #20
 800b8dc:	f104 0e14 	add.w	lr, r4, #20
 800b8e0:	f100 0b14 	add.w	fp, r0, #20
 800b8e4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b8e8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b8ec:	9301      	str	r3, [sp, #4]
 800b8ee:	46d9      	mov	r9, fp
 800b8f0:	f04f 0c00 	mov.w	ip, #0
 800b8f4:	9b01      	ldr	r3, [sp, #4]
 800b8f6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b8fa:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b8fe:	9301      	str	r3, [sp, #4]
 800b900:	fa1f f38a 	uxth.w	r3, sl
 800b904:	4619      	mov	r1, r3
 800b906:	b283      	uxth	r3, r0
 800b908:	1acb      	subs	r3, r1, r3
 800b90a:	0c00      	lsrs	r0, r0, #16
 800b90c:	4463      	add	r3, ip
 800b90e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b912:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b916:	b29b      	uxth	r3, r3
 800b918:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b91c:	4576      	cmp	r6, lr
 800b91e:	f849 3b04 	str.w	r3, [r9], #4
 800b922:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b926:	d8e5      	bhi.n	800b8f4 <__mdiff+0x88>
 800b928:	1b33      	subs	r3, r6, r4
 800b92a:	3b15      	subs	r3, #21
 800b92c:	f023 0303 	bic.w	r3, r3, #3
 800b930:	3415      	adds	r4, #21
 800b932:	3304      	adds	r3, #4
 800b934:	42a6      	cmp	r6, r4
 800b936:	bf38      	it	cc
 800b938:	2304      	movcc	r3, #4
 800b93a:	441d      	add	r5, r3
 800b93c:	445b      	add	r3, fp
 800b93e:	461e      	mov	r6, r3
 800b940:	462c      	mov	r4, r5
 800b942:	4544      	cmp	r4, r8
 800b944:	d30e      	bcc.n	800b964 <__mdiff+0xf8>
 800b946:	f108 0103 	add.w	r1, r8, #3
 800b94a:	1b49      	subs	r1, r1, r5
 800b94c:	f021 0103 	bic.w	r1, r1, #3
 800b950:	3d03      	subs	r5, #3
 800b952:	45a8      	cmp	r8, r5
 800b954:	bf38      	it	cc
 800b956:	2100      	movcc	r1, #0
 800b958:	440b      	add	r3, r1
 800b95a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b95e:	b191      	cbz	r1, 800b986 <__mdiff+0x11a>
 800b960:	6117      	str	r7, [r2, #16]
 800b962:	e79d      	b.n	800b8a0 <__mdiff+0x34>
 800b964:	f854 1b04 	ldr.w	r1, [r4], #4
 800b968:	46e6      	mov	lr, ip
 800b96a:	0c08      	lsrs	r0, r1, #16
 800b96c:	fa1c fc81 	uxtah	ip, ip, r1
 800b970:	4471      	add	r1, lr
 800b972:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b976:	b289      	uxth	r1, r1
 800b978:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b97c:	f846 1b04 	str.w	r1, [r6], #4
 800b980:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b984:	e7dd      	b.n	800b942 <__mdiff+0xd6>
 800b986:	3f01      	subs	r7, #1
 800b988:	e7e7      	b.n	800b95a <__mdiff+0xee>
 800b98a:	bf00      	nop
 800b98c:	0800c2fc 	.word	0x0800c2fc
 800b990:	0800c30d 	.word	0x0800c30d

0800b994 <__d2b>:
 800b994:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b998:	460f      	mov	r7, r1
 800b99a:	2101      	movs	r1, #1
 800b99c:	ec59 8b10 	vmov	r8, r9, d0
 800b9a0:	4616      	mov	r6, r2
 800b9a2:	f7ff fcd5 	bl	800b350 <_Balloc>
 800b9a6:	4604      	mov	r4, r0
 800b9a8:	b930      	cbnz	r0, 800b9b8 <__d2b+0x24>
 800b9aa:	4602      	mov	r2, r0
 800b9ac:	4b23      	ldr	r3, [pc, #140]	@ (800ba3c <__d2b+0xa8>)
 800b9ae:	4824      	ldr	r0, [pc, #144]	@ (800ba40 <__d2b+0xac>)
 800b9b0:	f240 310f 	movw	r1, #783	@ 0x30f
 800b9b4:	f000 fad6 	bl	800bf64 <__assert_func>
 800b9b8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b9bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b9c0:	b10d      	cbz	r5, 800b9c6 <__d2b+0x32>
 800b9c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b9c6:	9301      	str	r3, [sp, #4]
 800b9c8:	f1b8 0300 	subs.w	r3, r8, #0
 800b9cc:	d023      	beq.n	800ba16 <__d2b+0x82>
 800b9ce:	4668      	mov	r0, sp
 800b9d0:	9300      	str	r3, [sp, #0]
 800b9d2:	f7ff fd84 	bl	800b4de <__lo0bits>
 800b9d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b9da:	b1d0      	cbz	r0, 800ba12 <__d2b+0x7e>
 800b9dc:	f1c0 0320 	rsb	r3, r0, #32
 800b9e0:	fa02 f303 	lsl.w	r3, r2, r3
 800b9e4:	430b      	orrs	r3, r1
 800b9e6:	40c2      	lsrs	r2, r0
 800b9e8:	6163      	str	r3, [r4, #20]
 800b9ea:	9201      	str	r2, [sp, #4]
 800b9ec:	9b01      	ldr	r3, [sp, #4]
 800b9ee:	61a3      	str	r3, [r4, #24]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	bf0c      	ite	eq
 800b9f4:	2201      	moveq	r2, #1
 800b9f6:	2202      	movne	r2, #2
 800b9f8:	6122      	str	r2, [r4, #16]
 800b9fa:	b1a5      	cbz	r5, 800ba26 <__d2b+0x92>
 800b9fc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ba00:	4405      	add	r5, r0
 800ba02:	603d      	str	r5, [r7, #0]
 800ba04:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ba08:	6030      	str	r0, [r6, #0]
 800ba0a:	4620      	mov	r0, r4
 800ba0c:	b003      	add	sp, #12
 800ba0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba12:	6161      	str	r1, [r4, #20]
 800ba14:	e7ea      	b.n	800b9ec <__d2b+0x58>
 800ba16:	a801      	add	r0, sp, #4
 800ba18:	f7ff fd61 	bl	800b4de <__lo0bits>
 800ba1c:	9b01      	ldr	r3, [sp, #4]
 800ba1e:	6163      	str	r3, [r4, #20]
 800ba20:	3020      	adds	r0, #32
 800ba22:	2201      	movs	r2, #1
 800ba24:	e7e8      	b.n	800b9f8 <__d2b+0x64>
 800ba26:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ba2a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ba2e:	6038      	str	r0, [r7, #0]
 800ba30:	6918      	ldr	r0, [r3, #16]
 800ba32:	f7ff fd35 	bl	800b4a0 <__hi0bits>
 800ba36:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ba3a:	e7e5      	b.n	800ba08 <__d2b+0x74>
 800ba3c:	0800c2fc 	.word	0x0800c2fc
 800ba40:	0800c30d 	.word	0x0800c30d

0800ba44 <__sfputc_r>:
 800ba44:	6893      	ldr	r3, [r2, #8]
 800ba46:	3b01      	subs	r3, #1
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	b410      	push	{r4}
 800ba4c:	6093      	str	r3, [r2, #8]
 800ba4e:	da08      	bge.n	800ba62 <__sfputc_r+0x1e>
 800ba50:	6994      	ldr	r4, [r2, #24]
 800ba52:	42a3      	cmp	r3, r4
 800ba54:	db01      	blt.n	800ba5a <__sfputc_r+0x16>
 800ba56:	290a      	cmp	r1, #10
 800ba58:	d103      	bne.n	800ba62 <__sfputc_r+0x1e>
 800ba5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba5e:	f7fe bc0a 	b.w	800a276 <__swbuf_r>
 800ba62:	6813      	ldr	r3, [r2, #0]
 800ba64:	1c58      	adds	r0, r3, #1
 800ba66:	6010      	str	r0, [r2, #0]
 800ba68:	7019      	strb	r1, [r3, #0]
 800ba6a:	4608      	mov	r0, r1
 800ba6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba70:	4770      	bx	lr

0800ba72 <__sfputs_r>:
 800ba72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba74:	4606      	mov	r6, r0
 800ba76:	460f      	mov	r7, r1
 800ba78:	4614      	mov	r4, r2
 800ba7a:	18d5      	adds	r5, r2, r3
 800ba7c:	42ac      	cmp	r4, r5
 800ba7e:	d101      	bne.n	800ba84 <__sfputs_r+0x12>
 800ba80:	2000      	movs	r0, #0
 800ba82:	e007      	b.n	800ba94 <__sfputs_r+0x22>
 800ba84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba88:	463a      	mov	r2, r7
 800ba8a:	4630      	mov	r0, r6
 800ba8c:	f7ff ffda 	bl	800ba44 <__sfputc_r>
 800ba90:	1c43      	adds	r3, r0, #1
 800ba92:	d1f3      	bne.n	800ba7c <__sfputs_r+0xa>
 800ba94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ba98 <_vfiprintf_r>:
 800ba98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba9c:	460d      	mov	r5, r1
 800ba9e:	b09d      	sub	sp, #116	@ 0x74
 800baa0:	4614      	mov	r4, r2
 800baa2:	4698      	mov	r8, r3
 800baa4:	4606      	mov	r6, r0
 800baa6:	b118      	cbz	r0, 800bab0 <_vfiprintf_r+0x18>
 800baa8:	6a03      	ldr	r3, [r0, #32]
 800baaa:	b90b      	cbnz	r3, 800bab0 <_vfiprintf_r+0x18>
 800baac:	f7fe fafa 	bl	800a0a4 <__sinit>
 800bab0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bab2:	07d9      	lsls	r1, r3, #31
 800bab4:	d405      	bmi.n	800bac2 <_vfiprintf_r+0x2a>
 800bab6:	89ab      	ldrh	r3, [r5, #12]
 800bab8:	059a      	lsls	r2, r3, #22
 800baba:	d402      	bmi.n	800bac2 <_vfiprintf_r+0x2a>
 800babc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800babe:	f7fe fcec 	bl	800a49a <__retarget_lock_acquire_recursive>
 800bac2:	89ab      	ldrh	r3, [r5, #12]
 800bac4:	071b      	lsls	r3, r3, #28
 800bac6:	d501      	bpl.n	800bacc <_vfiprintf_r+0x34>
 800bac8:	692b      	ldr	r3, [r5, #16]
 800baca:	b99b      	cbnz	r3, 800baf4 <_vfiprintf_r+0x5c>
 800bacc:	4629      	mov	r1, r5
 800bace:	4630      	mov	r0, r6
 800bad0:	f7fe fc10 	bl	800a2f4 <__swsetup_r>
 800bad4:	b170      	cbz	r0, 800baf4 <_vfiprintf_r+0x5c>
 800bad6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bad8:	07dc      	lsls	r4, r3, #31
 800bada:	d504      	bpl.n	800bae6 <_vfiprintf_r+0x4e>
 800badc:	f04f 30ff 	mov.w	r0, #4294967295
 800bae0:	b01d      	add	sp, #116	@ 0x74
 800bae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bae6:	89ab      	ldrh	r3, [r5, #12]
 800bae8:	0598      	lsls	r0, r3, #22
 800baea:	d4f7      	bmi.n	800badc <_vfiprintf_r+0x44>
 800baec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800baee:	f7fe fcd5 	bl	800a49c <__retarget_lock_release_recursive>
 800baf2:	e7f3      	b.n	800badc <_vfiprintf_r+0x44>
 800baf4:	2300      	movs	r3, #0
 800baf6:	9309      	str	r3, [sp, #36]	@ 0x24
 800baf8:	2320      	movs	r3, #32
 800bafa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bafe:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb02:	2330      	movs	r3, #48	@ 0x30
 800bb04:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bcb4 <_vfiprintf_r+0x21c>
 800bb08:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bb0c:	f04f 0901 	mov.w	r9, #1
 800bb10:	4623      	mov	r3, r4
 800bb12:	469a      	mov	sl, r3
 800bb14:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb18:	b10a      	cbz	r2, 800bb1e <_vfiprintf_r+0x86>
 800bb1a:	2a25      	cmp	r2, #37	@ 0x25
 800bb1c:	d1f9      	bne.n	800bb12 <_vfiprintf_r+0x7a>
 800bb1e:	ebba 0b04 	subs.w	fp, sl, r4
 800bb22:	d00b      	beq.n	800bb3c <_vfiprintf_r+0xa4>
 800bb24:	465b      	mov	r3, fp
 800bb26:	4622      	mov	r2, r4
 800bb28:	4629      	mov	r1, r5
 800bb2a:	4630      	mov	r0, r6
 800bb2c:	f7ff ffa1 	bl	800ba72 <__sfputs_r>
 800bb30:	3001      	adds	r0, #1
 800bb32:	f000 80a7 	beq.w	800bc84 <_vfiprintf_r+0x1ec>
 800bb36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb38:	445a      	add	r2, fp
 800bb3a:	9209      	str	r2, [sp, #36]	@ 0x24
 800bb3c:	f89a 3000 	ldrb.w	r3, [sl]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	f000 809f 	beq.w	800bc84 <_vfiprintf_r+0x1ec>
 800bb46:	2300      	movs	r3, #0
 800bb48:	f04f 32ff 	mov.w	r2, #4294967295
 800bb4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb50:	f10a 0a01 	add.w	sl, sl, #1
 800bb54:	9304      	str	r3, [sp, #16]
 800bb56:	9307      	str	r3, [sp, #28]
 800bb58:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bb5c:	931a      	str	r3, [sp, #104]	@ 0x68
 800bb5e:	4654      	mov	r4, sl
 800bb60:	2205      	movs	r2, #5
 800bb62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb66:	4853      	ldr	r0, [pc, #332]	@ (800bcb4 <_vfiprintf_r+0x21c>)
 800bb68:	f7f4 fb3a 	bl	80001e0 <memchr>
 800bb6c:	9a04      	ldr	r2, [sp, #16]
 800bb6e:	b9d8      	cbnz	r0, 800bba8 <_vfiprintf_r+0x110>
 800bb70:	06d1      	lsls	r1, r2, #27
 800bb72:	bf44      	itt	mi
 800bb74:	2320      	movmi	r3, #32
 800bb76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb7a:	0713      	lsls	r3, r2, #28
 800bb7c:	bf44      	itt	mi
 800bb7e:	232b      	movmi	r3, #43	@ 0x2b
 800bb80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb84:	f89a 3000 	ldrb.w	r3, [sl]
 800bb88:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb8a:	d015      	beq.n	800bbb8 <_vfiprintf_r+0x120>
 800bb8c:	9a07      	ldr	r2, [sp, #28]
 800bb8e:	4654      	mov	r4, sl
 800bb90:	2000      	movs	r0, #0
 800bb92:	f04f 0c0a 	mov.w	ip, #10
 800bb96:	4621      	mov	r1, r4
 800bb98:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb9c:	3b30      	subs	r3, #48	@ 0x30
 800bb9e:	2b09      	cmp	r3, #9
 800bba0:	d94b      	bls.n	800bc3a <_vfiprintf_r+0x1a2>
 800bba2:	b1b0      	cbz	r0, 800bbd2 <_vfiprintf_r+0x13a>
 800bba4:	9207      	str	r2, [sp, #28]
 800bba6:	e014      	b.n	800bbd2 <_vfiprintf_r+0x13a>
 800bba8:	eba0 0308 	sub.w	r3, r0, r8
 800bbac:	fa09 f303 	lsl.w	r3, r9, r3
 800bbb0:	4313      	orrs	r3, r2
 800bbb2:	9304      	str	r3, [sp, #16]
 800bbb4:	46a2      	mov	sl, r4
 800bbb6:	e7d2      	b.n	800bb5e <_vfiprintf_r+0xc6>
 800bbb8:	9b03      	ldr	r3, [sp, #12]
 800bbba:	1d19      	adds	r1, r3, #4
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	9103      	str	r1, [sp, #12]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	bfbb      	ittet	lt
 800bbc4:	425b      	neglt	r3, r3
 800bbc6:	f042 0202 	orrlt.w	r2, r2, #2
 800bbca:	9307      	strge	r3, [sp, #28]
 800bbcc:	9307      	strlt	r3, [sp, #28]
 800bbce:	bfb8      	it	lt
 800bbd0:	9204      	strlt	r2, [sp, #16]
 800bbd2:	7823      	ldrb	r3, [r4, #0]
 800bbd4:	2b2e      	cmp	r3, #46	@ 0x2e
 800bbd6:	d10a      	bne.n	800bbee <_vfiprintf_r+0x156>
 800bbd8:	7863      	ldrb	r3, [r4, #1]
 800bbda:	2b2a      	cmp	r3, #42	@ 0x2a
 800bbdc:	d132      	bne.n	800bc44 <_vfiprintf_r+0x1ac>
 800bbde:	9b03      	ldr	r3, [sp, #12]
 800bbe0:	1d1a      	adds	r2, r3, #4
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	9203      	str	r2, [sp, #12]
 800bbe6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bbea:	3402      	adds	r4, #2
 800bbec:	9305      	str	r3, [sp, #20]
 800bbee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bcc4 <_vfiprintf_r+0x22c>
 800bbf2:	7821      	ldrb	r1, [r4, #0]
 800bbf4:	2203      	movs	r2, #3
 800bbf6:	4650      	mov	r0, sl
 800bbf8:	f7f4 faf2 	bl	80001e0 <memchr>
 800bbfc:	b138      	cbz	r0, 800bc0e <_vfiprintf_r+0x176>
 800bbfe:	9b04      	ldr	r3, [sp, #16]
 800bc00:	eba0 000a 	sub.w	r0, r0, sl
 800bc04:	2240      	movs	r2, #64	@ 0x40
 800bc06:	4082      	lsls	r2, r0
 800bc08:	4313      	orrs	r3, r2
 800bc0a:	3401      	adds	r4, #1
 800bc0c:	9304      	str	r3, [sp, #16]
 800bc0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc12:	4829      	ldr	r0, [pc, #164]	@ (800bcb8 <_vfiprintf_r+0x220>)
 800bc14:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bc18:	2206      	movs	r2, #6
 800bc1a:	f7f4 fae1 	bl	80001e0 <memchr>
 800bc1e:	2800      	cmp	r0, #0
 800bc20:	d03f      	beq.n	800bca2 <_vfiprintf_r+0x20a>
 800bc22:	4b26      	ldr	r3, [pc, #152]	@ (800bcbc <_vfiprintf_r+0x224>)
 800bc24:	bb1b      	cbnz	r3, 800bc6e <_vfiprintf_r+0x1d6>
 800bc26:	9b03      	ldr	r3, [sp, #12]
 800bc28:	3307      	adds	r3, #7
 800bc2a:	f023 0307 	bic.w	r3, r3, #7
 800bc2e:	3308      	adds	r3, #8
 800bc30:	9303      	str	r3, [sp, #12]
 800bc32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc34:	443b      	add	r3, r7
 800bc36:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc38:	e76a      	b.n	800bb10 <_vfiprintf_r+0x78>
 800bc3a:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc3e:	460c      	mov	r4, r1
 800bc40:	2001      	movs	r0, #1
 800bc42:	e7a8      	b.n	800bb96 <_vfiprintf_r+0xfe>
 800bc44:	2300      	movs	r3, #0
 800bc46:	3401      	adds	r4, #1
 800bc48:	9305      	str	r3, [sp, #20]
 800bc4a:	4619      	mov	r1, r3
 800bc4c:	f04f 0c0a 	mov.w	ip, #10
 800bc50:	4620      	mov	r0, r4
 800bc52:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc56:	3a30      	subs	r2, #48	@ 0x30
 800bc58:	2a09      	cmp	r2, #9
 800bc5a:	d903      	bls.n	800bc64 <_vfiprintf_r+0x1cc>
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d0c6      	beq.n	800bbee <_vfiprintf_r+0x156>
 800bc60:	9105      	str	r1, [sp, #20]
 800bc62:	e7c4      	b.n	800bbee <_vfiprintf_r+0x156>
 800bc64:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc68:	4604      	mov	r4, r0
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	e7f0      	b.n	800bc50 <_vfiprintf_r+0x1b8>
 800bc6e:	ab03      	add	r3, sp, #12
 800bc70:	9300      	str	r3, [sp, #0]
 800bc72:	462a      	mov	r2, r5
 800bc74:	4b12      	ldr	r3, [pc, #72]	@ (800bcc0 <_vfiprintf_r+0x228>)
 800bc76:	a904      	add	r1, sp, #16
 800bc78:	4630      	mov	r0, r6
 800bc7a:	f7fd fdd1 	bl	8009820 <_printf_float>
 800bc7e:	4607      	mov	r7, r0
 800bc80:	1c78      	adds	r0, r7, #1
 800bc82:	d1d6      	bne.n	800bc32 <_vfiprintf_r+0x19a>
 800bc84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bc86:	07d9      	lsls	r1, r3, #31
 800bc88:	d405      	bmi.n	800bc96 <_vfiprintf_r+0x1fe>
 800bc8a:	89ab      	ldrh	r3, [r5, #12]
 800bc8c:	059a      	lsls	r2, r3, #22
 800bc8e:	d402      	bmi.n	800bc96 <_vfiprintf_r+0x1fe>
 800bc90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc92:	f7fe fc03 	bl	800a49c <__retarget_lock_release_recursive>
 800bc96:	89ab      	ldrh	r3, [r5, #12]
 800bc98:	065b      	lsls	r3, r3, #25
 800bc9a:	f53f af1f 	bmi.w	800badc <_vfiprintf_r+0x44>
 800bc9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bca0:	e71e      	b.n	800bae0 <_vfiprintf_r+0x48>
 800bca2:	ab03      	add	r3, sp, #12
 800bca4:	9300      	str	r3, [sp, #0]
 800bca6:	462a      	mov	r2, r5
 800bca8:	4b05      	ldr	r3, [pc, #20]	@ (800bcc0 <_vfiprintf_r+0x228>)
 800bcaa:	a904      	add	r1, sp, #16
 800bcac:	4630      	mov	r0, r6
 800bcae:	f7fe f84f 	bl	8009d50 <_printf_i>
 800bcb2:	e7e4      	b.n	800bc7e <_vfiprintf_r+0x1e6>
 800bcb4:	0800c366 	.word	0x0800c366
 800bcb8:	0800c370 	.word	0x0800c370
 800bcbc:	08009821 	.word	0x08009821
 800bcc0:	0800ba73 	.word	0x0800ba73
 800bcc4:	0800c36c 	.word	0x0800c36c

0800bcc8 <__sflush_r>:
 800bcc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcd0:	0716      	lsls	r6, r2, #28
 800bcd2:	4605      	mov	r5, r0
 800bcd4:	460c      	mov	r4, r1
 800bcd6:	d454      	bmi.n	800bd82 <__sflush_r+0xba>
 800bcd8:	684b      	ldr	r3, [r1, #4]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	dc02      	bgt.n	800bce4 <__sflush_r+0x1c>
 800bcde:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	dd48      	ble.n	800bd76 <__sflush_r+0xae>
 800bce4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bce6:	2e00      	cmp	r6, #0
 800bce8:	d045      	beq.n	800bd76 <__sflush_r+0xae>
 800bcea:	2300      	movs	r3, #0
 800bcec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bcf0:	682f      	ldr	r7, [r5, #0]
 800bcf2:	6a21      	ldr	r1, [r4, #32]
 800bcf4:	602b      	str	r3, [r5, #0]
 800bcf6:	d030      	beq.n	800bd5a <__sflush_r+0x92>
 800bcf8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bcfa:	89a3      	ldrh	r3, [r4, #12]
 800bcfc:	0759      	lsls	r1, r3, #29
 800bcfe:	d505      	bpl.n	800bd0c <__sflush_r+0x44>
 800bd00:	6863      	ldr	r3, [r4, #4]
 800bd02:	1ad2      	subs	r2, r2, r3
 800bd04:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bd06:	b10b      	cbz	r3, 800bd0c <__sflush_r+0x44>
 800bd08:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bd0a:	1ad2      	subs	r2, r2, r3
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bd10:	6a21      	ldr	r1, [r4, #32]
 800bd12:	4628      	mov	r0, r5
 800bd14:	47b0      	blx	r6
 800bd16:	1c43      	adds	r3, r0, #1
 800bd18:	89a3      	ldrh	r3, [r4, #12]
 800bd1a:	d106      	bne.n	800bd2a <__sflush_r+0x62>
 800bd1c:	6829      	ldr	r1, [r5, #0]
 800bd1e:	291d      	cmp	r1, #29
 800bd20:	d82b      	bhi.n	800bd7a <__sflush_r+0xb2>
 800bd22:	4a2a      	ldr	r2, [pc, #168]	@ (800bdcc <__sflush_r+0x104>)
 800bd24:	40ca      	lsrs	r2, r1
 800bd26:	07d6      	lsls	r6, r2, #31
 800bd28:	d527      	bpl.n	800bd7a <__sflush_r+0xb2>
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	6062      	str	r2, [r4, #4]
 800bd2e:	04d9      	lsls	r1, r3, #19
 800bd30:	6922      	ldr	r2, [r4, #16]
 800bd32:	6022      	str	r2, [r4, #0]
 800bd34:	d504      	bpl.n	800bd40 <__sflush_r+0x78>
 800bd36:	1c42      	adds	r2, r0, #1
 800bd38:	d101      	bne.n	800bd3e <__sflush_r+0x76>
 800bd3a:	682b      	ldr	r3, [r5, #0]
 800bd3c:	b903      	cbnz	r3, 800bd40 <__sflush_r+0x78>
 800bd3e:	6560      	str	r0, [r4, #84]	@ 0x54
 800bd40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bd42:	602f      	str	r7, [r5, #0]
 800bd44:	b1b9      	cbz	r1, 800bd76 <__sflush_r+0xae>
 800bd46:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bd4a:	4299      	cmp	r1, r3
 800bd4c:	d002      	beq.n	800bd54 <__sflush_r+0x8c>
 800bd4e:	4628      	mov	r0, r5
 800bd50:	f7ff f9fe 	bl	800b150 <_free_r>
 800bd54:	2300      	movs	r3, #0
 800bd56:	6363      	str	r3, [r4, #52]	@ 0x34
 800bd58:	e00d      	b.n	800bd76 <__sflush_r+0xae>
 800bd5a:	2301      	movs	r3, #1
 800bd5c:	4628      	mov	r0, r5
 800bd5e:	47b0      	blx	r6
 800bd60:	4602      	mov	r2, r0
 800bd62:	1c50      	adds	r0, r2, #1
 800bd64:	d1c9      	bne.n	800bcfa <__sflush_r+0x32>
 800bd66:	682b      	ldr	r3, [r5, #0]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d0c6      	beq.n	800bcfa <__sflush_r+0x32>
 800bd6c:	2b1d      	cmp	r3, #29
 800bd6e:	d001      	beq.n	800bd74 <__sflush_r+0xac>
 800bd70:	2b16      	cmp	r3, #22
 800bd72:	d11e      	bne.n	800bdb2 <__sflush_r+0xea>
 800bd74:	602f      	str	r7, [r5, #0]
 800bd76:	2000      	movs	r0, #0
 800bd78:	e022      	b.n	800bdc0 <__sflush_r+0xf8>
 800bd7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd7e:	b21b      	sxth	r3, r3
 800bd80:	e01b      	b.n	800bdba <__sflush_r+0xf2>
 800bd82:	690f      	ldr	r7, [r1, #16]
 800bd84:	2f00      	cmp	r7, #0
 800bd86:	d0f6      	beq.n	800bd76 <__sflush_r+0xae>
 800bd88:	0793      	lsls	r3, r2, #30
 800bd8a:	680e      	ldr	r6, [r1, #0]
 800bd8c:	bf08      	it	eq
 800bd8e:	694b      	ldreq	r3, [r1, #20]
 800bd90:	600f      	str	r7, [r1, #0]
 800bd92:	bf18      	it	ne
 800bd94:	2300      	movne	r3, #0
 800bd96:	eba6 0807 	sub.w	r8, r6, r7
 800bd9a:	608b      	str	r3, [r1, #8]
 800bd9c:	f1b8 0f00 	cmp.w	r8, #0
 800bda0:	dde9      	ble.n	800bd76 <__sflush_r+0xae>
 800bda2:	6a21      	ldr	r1, [r4, #32]
 800bda4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bda6:	4643      	mov	r3, r8
 800bda8:	463a      	mov	r2, r7
 800bdaa:	4628      	mov	r0, r5
 800bdac:	47b0      	blx	r6
 800bdae:	2800      	cmp	r0, #0
 800bdb0:	dc08      	bgt.n	800bdc4 <__sflush_r+0xfc>
 800bdb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bdba:	81a3      	strh	r3, [r4, #12]
 800bdbc:	f04f 30ff 	mov.w	r0, #4294967295
 800bdc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdc4:	4407      	add	r7, r0
 800bdc6:	eba8 0800 	sub.w	r8, r8, r0
 800bdca:	e7e7      	b.n	800bd9c <__sflush_r+0xd4>
 800bdcc:	20400001 	.word	0x20400001

0800bdd0 <_fflush_r>:
 800bdd0:	b538      	push	{r3, r4, r5, lr}
 800bdd2:	690b      	ldr	r3, [r1, #16]
 800bdd4:	4605      	mov	r5, r0
 800bdd6:	460c      	mov	r4, r1
 800bdd8:	b913      	cbnz	r3, 800bde0 <_fflush_r+0x10>
 800bdda:	2500      	movs	r5, #0
 800bddc:	4628      	mov	r0, r5
 800bdde:	bd38      	pop	{r3, r4, r5, pc}
 800bde0:	b118      	cbz	r0, 800bdea <_fflush_r+0x1a>
 800bde2:	6a03      	ldr	r3, [r0, #32]
 800bde4:	b90b      	cbnz	r3, 800bdea <_fflush_r+0x1a>
 800bde6:	f7fe f95d 	bl	800a0a4 <__sinit>
 800bdea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d0f3      	beq.n	800bdda <_fflush_r+0xa>
 800bdf2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bdf4:	07d0      	lsls	r0, r2, #31
 800bdf6:	d404      	bmi.n	800be02 <_fflush_r+0x32>
 800bdf8:	0599      	lsls	r1, r3, #22
 800bdfa:	d402      	bmi.n	800be02 <_fflush_r+0x32>
 800bdfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bdfe:	f7fe fb4c 	bl	800a49a <__retarget_lock_acquire_recursive>
 800be02:	4628      	mov	r0, r5
 800be04:	4621      	mov	r1, r4
 800be06:	f7ff ff5f 	bl	800bcc8 <__sflush_r>
 800be0a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800be0c:	07da      	lsls	r2, r3, #31
 800be0e:	4605      	mov	r5, r0
 800be10:	d4e4      	bmi.n	800bddc <_fflush_r+0xc>
 800be12:	89a3      	ldrh	r3, [r4, #12]
 800be14:	059b      	lsls	r3, r3, #22
 800be16:	d4e1      	bmi.n	800bddc <_fflush_r+0xc>
 800be18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800be1a:	f7fe fb3f 	bl	800a49c <__retarget_lock_release_recursive>
 800be1e:	e7dd      	b.n	800bddc <_fflush_r+0xc>

0800be20 <__swhatbuf_r>:
 800be20:	b570      	push	{r4, r5, r6, lr}
 800be22:	460c      	mov	r4, r1
 800be24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be28:	2900      	cmp	r1, #0
 800be2a:	b096      	sub	sp, #88	@ 0x58
 800be2c:	4615      	mov	r5, r2
 800be2e:	461e      	mov	r6, r3
 800be30:	da0d      	bge.n	800be4e <__swhatbuf_r+0x2e>
 800be32:	89a3      	ldrh	r3, [r4, #12]
 800be34:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800be38:	f04f 0100 	mov.w	r1, #0
 800be3c:	bf14      	ite	ne
 800be3e:	2340      	movne	r3, #64	@ 0x40
 800be40:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800be44:	2000      	movs	r0, #0
 800be46:	6031      	str	r1, [r6, #0]
 800be48:	602b      	str	r3, [r5, #0]
 800be4a:	b016      	add	sp, #88	@ 0x58
 800be4c:	bd70      	pop	{r4, r5, r6, pc}
 800be4e:	466a      	mov	r2, sp
 800be50:	f000 f848 	bl	800bee4 <_fstat_r>
 800be54:	2800      	cmp	r0, #0
 800be56:	dbec      	blt.n	800be32 <__swhatbuf_r+0x12>
 800be58:	9901      	ldr	r1, [sp, #4]
 800be5a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800be5e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800be62:	4259      	negs	r1, r3
 800be64:	4159      	adcs	r1, r3
 800be66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800be6a:	e7eb      	b.n	800be44 <__swhatbuf_r+0x24>

0800be6c <__smakebuf_r>:
 800be6c:	898b      	ldrh	r3, [r1, #12]
 800be6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be70:	079d      	lsls	r5, r3, #30
 800be72:	4606      	mov	r6, r0
 800be74:	460c      	mov	r4, r1
 800be76:	d507      	bpl.n	800be88 <__smakebuf_r+0x1c>
 800be78:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800be7c:	6023      	str	r3, [r4, #0]
 800be7e:	6123      	str	r3, [r4, #16]
 800be80:	2301      	movs	r3, #1
 800be82:	6163      	str	r3, [r4, #20]
 800be84:	b003      	add	sp, #12
 800be86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be88:	ab01      	add	r3, sp, #4
 800be8a:	466a      	mov	r2, sp
 800be8c:	f7ff ffc8 	bl	800be20 <__swhatbuf_r>
 800be90:	9f00      	ldr	r7, [sp, #0]
 800be92:	4605      	mov	r5, r0
 800be94:	4639      	mov	r1, r7
 800be96:	4630      	mov	r0, r6
 800be98:	f7ff f9ce 	bl	800b238 <_malloc_r>
 800be9c:	b948      	cbnz	r0, 800beb2 <__smakebuf_r+0x46>
 800be9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bea2:	059a      	lsls	r2, r3, #22
 800bea4:	d4ee      	bmi.n	800be84 <__smakebuf_r+0x18>
 800bea6:	f023 0303 	bic.w	r3, r3, #3
 800beaa:	f043 0302 	orr.w	r3, r3, #2
 800beae:	81a3      	strh	r3, [r4, #12]
 800beb0:	e7e2      	b.n	800be78 <__smakebuf_r+0xc>
 800beb2:	89a3      	ldrh	r3, [r4, #12]
 800beb4:	6020      	str	r0, [r4, #0]
 800beb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800beba:	81a3      	strh	r3, [r4, #12]
 800bebc:	9b01      	ldr	r3, [sp, #4]
 800bebe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bec2:	b15b      	cbz	r3, 800bedc <__smakebuf_r+0x70>
 800bec4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bec8:	4630      	mov	r0, r6
 800beca:	f000 f81d 	bl	800bf08 <_isatty_r>
 800bece:	b128      	cbz	r0, 800bedc <__smakebuf_r+0x70>
 800bed0:	89a3      	ldrh	r3, [r4, #12]
 800bed2:	f023 0303 	bic.w	r3, r3, #3
 800bed6:	f043 0301 	orr.w	r3, r3, #1
 800beda:	81a3      	strh	r3, [r4, #12]
 800bedc:	89a3      	ldrh	r3, [r4, #12]
 800bede:	431d      	orrs	r5, r3
 800bee0:	81a5      	strh	r5, [r4, #12]
 800bee2:	e7cf      	b.n	800be84 <__smakebuf_r+0x18>

0800bee4 <_fstat_r>:
 800bee4:	b538      	push	{r3, r4, r5, lr}
 800bee6:	4d07      	ldr	r5, [pc, #28]	@ (800bf04 <_fstat_r+0x20>)
 800bee8:	2300      	movs	r3, #0
 800beea:	4604      	mov	r4, r0
 800beec:	4608      	mov	r0, r1
 800beee:	4611      	mov	r1, r2
 800bef0:	602b      	str	r3, [r5, #0]
 800bef2:	f7f5 feeb 	bl	8001ccc <_fstat>
 800bef6:	1c43      	adds	r3, r0, #1
 800bef8:	d102      	bne.n	800bf00 <_fstat_r+0x1c>
 800befa:	682b      	ldr	r3, [r5, #0]
 800befc:	b103      	cbz	r3, 800bf00 <_fstat_r+0x1c>
 800befe:	6023      	str	r3, [r4, #0]
 800bf00:	bd38      	pop	{r3, r4, r5, pc}
 800bf02:	bf00      	nop
 800bf04:	200008ac 	.word	0x200008ac

0800bf08 <_isatty_r>:
 800bf08:	b538      	push	{r3, r4, r5, lr}
 800bf0a:	4d06      	ldr	r5, [pc, #24]	@ (800bf24 <_isatty_r+0x1c>)
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	4604      	mov	r4, r0
 800bf10:	4608      	mov	r0, r1
 800bf12:	602b      	str	r3, [r5, #0]
 800bf14:	f7f5 feea 	bl	8001cec <_isatty>
 800bf18:	1c43      	adds	r3, r0, #1
 800bf1a:	d102      	bne.n	800bf22 <_isatty_r+0x1a>
 800bf1c:	682b      	ldr	r3, [r5, #0]
 800bf1e:	b103      	cbz	r3, 800bf22 <_isatty_r+0x1a>
 800bf20:	6023      	str	r3, [r4, #0]
 800bf22:	bd38      	pop	{r3, r4, r5, pc}
 800bf24:	200008ac 	.word	0x200008ac

0800bf28 <_sbrk_r>:
 800bf28:	b538      	push	{r3, r4, r5, lr}
 800bf2a:	4d06      	ldr	r5, [pc, #24]	@ (800bf44 <_sbrk_r+0x1c>)
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	4604      	mov	r4, r0
 800bf30:	4608      	mov	r0, r1
 800bf32:	602b      	str	r3, [r5, #0]
 800bf34:	f7f5 fef2 	bl	8001d1c <_sbrk>
 800bf38:	1c43      	adds	r3, r0, #1
 800bf3a:	d102      	bne.n	800bf42 <_sbrk_r+0x1a>
 800bf3c:	682b      	ldr	r3, [r5, #0]
 800bf3e:	b103      	cbz	r3, 800bf42 <_sbrk_r+0x1a>
 800bf40:	6023      	str	r3, [r4, #0]
 800bf42:	bd38      	pop	{r3, r4, r5, pc}
 800bf44:	200008ac 	.word	0x200008ac

0800bf48 <memcpy>:
 800bf48:	440a      	add	r2, r1
 800bf4a:	4291      	cmp	r1, r2
 800bf4c:	f100 33ff 	add.w	r3, r0, #4294967295
 800bf50:	d100      	bne.n	800bf54 <memcpy+0xc>
 800bf52:	4770      	bx	lr
 800bf54:	b510      	push	{r4, lr}
 800bf56:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf5e:	4291      	cmp	r1, r2
 800bf60:	d1f9      	bne.n	800bf56 <memcpy+0xe>
 800bf62:	bd10      	pop	{r4, pc}

0800bf64 <__assert_func>:
 800bf64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bf66:	4614      	mov	r4, r2
 800bf68:	461a      	mov	r2, r3
 800bf6a:	4b09      	ldr	r3, [pc, #36]	@ (800bf90 <__assert_func+0x2c>)
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	4605      	mov	r5, r0
 800bf70:	68d8      	ldr	r0, [r3, #12]
 800bf72:	b14c      	cbz	r4, 800bf88 <__assert_func+0x24>
 800bf74:	4b07      	ldr	r3, [pc, #28]	@ (800bf94 <__assert_func+0x30>)
 800bf76:	9100      	str	r1, [sp, #0]
 800bf78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bf7c:	4906      	ldr	r1, [pc, #24]	@ (800bf98 <__assert_func+0x34>)
 800bf7e:	462b      	mov	r3, r5
 800bf80:	f000 f842 	bl	800c008 <fiprintf>
 800bf84:	f000 f852 	bl	800c02c <abort>
 800bf88:	4b04      	ldr	r3, [pc, #16]	@ (800bf9c <__assert_func+0x38>)
 800bf8a:	461c      	mov	r4, r3
 800bf8c:	e7f3      	b.n	800bf76 <__assert_func+0x12>
 800bf8e:	bf00      	nop
 800bf90:	20000018 	.word	0x20000018
 800bf94:	0800c381 	.word	0x0800c381
 800bf98:	0800c38e 	.word	0x0800c38e
 800bf9c:	0800c3bc 	.word	0x0800c3bc

0800bfa0 <_calloc_r>:
 800bfa0:	b570      	push	{r4, r5, r6, lr}
 800bfa2:	fba1 5402 	umull	r5, r4, r1, r2
 800bfa6:	b934      	cbnz	r4, 800bfb6 <_calloc_r+0x16>
 800bfa8:	4629      	mov	r1, r5
 800bfaa:	f7ff f945 	bl	800b238 <_malloc_r>
 800bfae:	4606      	mov	r6, r0
 800bfb0:	b928      	cbnz	r0, 800bfbe <_calloc_r+0x1e>
 800bfb2:	4630      	mov	r0, r6
 800bfb4:	bd70      	pop	{r4, r5, r6, pc}
 800bfb6:	220c      	movs	r2, #12
 800bfb8:	6002      	str	r2, [r0, #0]
 800bfba:	2600      	movs	r6, #0
 800bfbc:	e7f9      	b.n	800bfb2 <_calloc_r+0x12>
 800bfbe:	462a      	mov	r2, r5
 800bfc0:	4621      	mov	r1, r4
 800bfc2:	f7fe f9ed 	bl	800a3a0 <memset>
 800bfc6:	e7f4      	b.n	800bfb2 <_calloc_r+0x12>

0800bfc8 <__ascii_mbtowc>:
 800bfc8:	b082      	sub	sp, #8
 800bfca:	b901      	cbnz	r1, 800bfce <__ascii_mbtowc+0x6>
 800bfcc:	a901      	add	r1, sp, #4
 800bfce:	b142      	cbz	r2, 800bfe2 <__ascii_mbtowc+0x1a>
 800bfd0:	b14b      	cbz	r3, 800bfe6 <__ascii_mbtowc+0x1e>
 800bfd2:	7813      	ldrb	r3, [r2, #0]
 800bfd4:	600b      	str	r3, [r1, #0]
 800bfd6:	7812      	ldrb	r2, [r2, #0]
 800bfd8:	1e10      	subs	r0, r2, #0
 800bfda:	bf18      	it	ne
 800bfdc:	2001      	movne	r0, #1
 800bfde:	b002      	add	sp, #8
 800bfe0:	4770      	bx	lr
 800bfe2:	4610      	mov	r0, r2
 800bfe4:	e7fb      	b.n	800bfde <__ascii_mbtowc+0x16>
 800bfe6:	f06f 0001 	mvn.w	r0, #1
 800bfea:	e7f8      	b.n	800bfde <__ascii_mbtowc+0x16>

0800bfec <__ascii_wctomb>:
 800bfec:	4603      	mov	r3, r0
 800bfee:	4608      	mov	r0, r1
 800bff0:	b141      	cbz	r1, 800c004 <__ascii_wctomb+0x18>
 800bff2:	2aff      	cmp	r2, #255	@ 0xff
 800bff4:	d904      	bls.n	800c000 <__ascii_wctomb+0x14>
 800bff6:	228a      	movs	r2, #138	@ 0x8a
 800bff8:	601a      	str	r2, [r3, #0]
 800bffa:	f04f 30ff 	mov.w	r0, #4294967295
 800bffe:	4770      	bx	lr
 800c000:	700a      	strb	r2, [r1, #0]
 800c002:	2001      	movs	r0, #1
 800c004:	4770      	bx	lr
	...

0800c008 <fiprintf>:
 800c008:	b40e      	push	{r1, r2, r3}
 800c00a:	b503      	push	{r0, r1, lr}
 800c00c:	4601      	mov	r1, r0
 800c00e:	ab03      	add	r3, sp, #12
 800c010:	4805      	ldr	r0, [pc, #20]	@ (800c028 <fiprintf+0x20>)
 800c012:	f853 2b04 	ldr.w	r2, [r3], #4
 800c016:	6800      	ldr	r0, [r0, #0]
 800c018:	9301      	str	r3, [sp, #4]
 800c01a:	f7ff fd3d 	bl	800ba98 <_vfiprintf_r>
 800c01e:	b002      	add	sp, #8
 800c020:	f85d eb04 	ldr.w	lr, [sp], #4
 800c024:	b003      	add	sp, #12
 800c026:	4770      	bx	lr
 800c028:	20000018 	.word	0x20000018

0800c02c <abort>:
 800c02c:	b508      	push	{r3, lr}
 800c02e:	2006      	movs	r0, #6
 800c030:	f000 f82c 	bl	800c08c <raise>
 800c034:	2001      	movs	r0, #1
 800c036:	f7f5 fdf9 	bl	8001c2c <_exit>

0800c03a <_raise_r>:
 800c03a:	291f      	cmp	r1, #31
 800c03c:	b538      	push	{r3, r4, r5, lr}
 800c03e:	4605      	mov	r5, r0
 800c040:	460c      	mov	r4, r1
 800c042:	d904      	bls.n	800c04e <_raise_r+0x14>
 800c044:	2316      	movs	r3, #22
 800c046:	6003      	str	r3, [r0, #0]
 800c048:	f04f 30ff 	mov.w	r0, #4294967295
 800c04c:	bd38      	pop	{r3, r4, r5, pc}
 800c04e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c050:	b112      	cbz	r2, 800c058 <_raise_r+0x1e>
 800c052:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c056:	b94b      	cbnz	r3, 800c06c <_raise_r+0x32>
 800c058:	4628      	mov	r0, r5
 800c05a:	f000 f831 	bl	800c0c0 <_getpid_r>
 800c05e:	4622      	mov	r2, r4
 800c060:	4601      	mov	r1, r0
 800c062:	4628      	mov	r0, r5
 800c064:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c068:	f000 b818 	b.w	800c09c <_kill_r>
 800c06c:	2b01      	cmp	r3, #1
 800c06e:	d00a      	beq.n	800c086 <_raise_r+0x4c>
 800c070:	1c59      	adds	r1, r3, #1
 800c072:	d103      	bne.n	800c07c <_raise_r+0x42>
 800c074:	2316      	movs	r3, #22
 800c076:	6003      	str	r3, [r0, #0]
 800c078:	2001      	movs	r0, #1
 800c07a:	e7e7      	b.n	800c04c <_raise_r+0x12>
 800c07c:	2100      	movs	r1, #0
 800c07e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c082:	4620      	mov	r0, r4
 800c084:	4798      	blx	r3
 800c086:	2000      	movs	r0, #0
 800c088:	e7e0      	b.n	800c04c <_raise_r+0x12>
	...

0800c08c <raise>:
 800c08c:	4b02      	ldr	r3, [pc, #8]	@ (800c098 <raise+0xc>)
 800c08e:	4601      	mov	r1, r0
 800c090:	6818      	ldr	r0, [r3, #0]
 800c092:	f7ff bfd2 	b.w	800c03a <_raise_r>
 800c096:	bf00      	nop
 800c098:	20000018 	.word	0x20000018

0800c09c <_kill_r>:
 800c09c:	b538      	push	{r3, r4, r5, lr}
 800c09e:	4d07      	ldr	r5, [pc, #28]	@ (800c0bc <_kill_r+0x20>)
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	4604      	mov	r4, r0
 800c0a4:	4608      	mov	r0, r1
 800c0a6:	4611      	mov	r1, r2
 800c0a8:	602b      	str	r3, [r5, #0]
 800c0aa:	f7f5 fdaf 	bl	8001c0c <_kill>
 800c0ae:	1c43      	adds	r3, r0, #1
 800c0b0:	d102      	bne.n	800c0b8 <_kill_r+0x1c>
 800c0b2:	682b      	ldr	r3, [r5, #0]
 800c0b4:	b103      	cbz	r3, 800c0b8 <_kill_r+0x1c>
 800c0b6:	6023      	str	r3, [r4, #0]
 800c0b8:	bd38      	pop	{r3, r4, r5, pc}
 800c0ba:	bf00      	nop
 800c0bc:	200008ac 	.word	0x200008ac

0800c0c0 <_getpid_r>:
 800c0c0:	f7f5 bd9c 	b.w	8001bfc <_getpid>

0800c0c4 <_init>:
 800c0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0c6:	bf00      	nop
 800c0c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0ca:	bc08      	pop	{r3}
 800c0cc:	469e      	mov	lr, r3
 800c0ce:	4770      	bx	lr

0800c0d0 <_fini>:
 800c0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0d2:	bf00      	nop
 800c0d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0d6:	bc08      	pop	{r3}
 800c0d8:	469e      	mov	lr, r3
 800c0da:	4770      	bx	lr
